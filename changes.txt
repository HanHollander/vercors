examples/known-problems/array-problem-2.java
27: requires (\forall* int i ; 0 <= i && i < array.length;Perm(array[i],1/100));
28: requires (\forall* int i ; 0 <= i && i < array.length;Perm(array[i].F,1/100));

examples/known-problems/array-problem.pvl
45: xs=vals_method(1/2,array);
62: xs=vals_function(1/2,array);

examples/known-problems/ParallelGCD.pvl
39: split  F, 1/2, F.tx(), 1/2, F.ty();
43: requires Future(F,1/2,F.tx());
44: ensures Future(F,1/2,empty);
47: loop_invariant run?Future(F,1/2,F.tx()):Future(F,1/2,empty);
51: choose F, 1/2, F.tx(), F.decr_x()*F.tx();
52: action(F,1/2,F.tx(),F.decr_x()){ F.x = F.x - F.y; }
55: choose F, 1/2, F.tx(), F.done();
56: action(F,1/2,empty,F.done()){ run=false; }
60: requires Future(F,1/2,F.ty());
61: ensures Future(F,1/2,empty);
64: loop_invariant run?Future(F,1/2,F.ty()):Future(F,1/2,empty);
69: choose F, 1/2, F.ty(), F.decr_y()*F.ty();
70: action(F,1/2,F.ty(),F.decr_y()){
75: choose F, 1/2, F.ty(), F.done();
76: action(F,1/2,empty,F.done()){
85: merge F, 1/2, empty, 1/2, empty;

examples/known-problems/summation.c
11: context \pointer(ar, N, 1/2);
24: context Perm(ar[i], 1/2);

examples/floats/TestCount.java
12: ** (\forall* int i ; 0 <= i && i < array.length ; Perm(array[i],1/2))

examples/floats/TestHist.java
11: context_everywhere (\forall* int i; 0 <= i && i < a.length ; Perm(a[i],1/2));

examples/floats/TestFloat.java
37: context_everywhere (\forall* int i; 0 <= i && i < a.length;PointsTo(a[i],1/2,vals[i]));
56: context_everywhere (\forall* int i; 0 <= i && i < a.length;PointsTo(a[i],1/2,vals[i]));
77: context_everywhere (\forall* int i; 0 <= i && i < a.length;PointsTo(a[i],1/2,vals[i]));

examples/parallel/array_par.pvl
15: context_everywhere inv( Perm(x,1/2) **
19: requires i==0 ==> Perm(x,1/2) ** x==0;
21: ensures  i==0 ==> Perm(x,1/2) ** x==1;
26: requires i==0 ==> Perm(x,1/2) ** x==0;
28: ensures  i==0 ==> Perm(x,1/2) ** x==1;

examples/parallel/block-par.pvl
9: context Perm(x,1)**Perm(y,1)**Perm(z,1/2)**x+y==z;

examples/parallel/inv-test.pvl
17: context_everywhere inv(Perm(x,1/2)**Perm(y,1/2)**Perm(z,1/2)** x+y==z){
34: context_everywhere inv(Perm(x,1/2)**Perm(y,1/2)**Perm(z,1/2)** x+y==z){
51: context_everywhere inv(Perm(x,1/2)**Perm(y,1/2)**Perm(z,1/2)** x+y==z){

examples/verifythis2018/challenge1.pvl
78: Perm(l, 2/3) **
79: Perm(r, 2/3) **
80: Perm(a, 2/3) **
94: context Perm(l, 1/3) ** Perm(r, 1/3);
109: context Perm(l, 1/3) ** Perm(r, 1/3);
125: context Perm(l, 1/3);
151: context_everywhere Perm(l, 1/4) ** Perm(r, 1/3) ** Perm(a, 1/3) ** K > 0;
160: loop_invariant Perm(l, 2/3) ** Perm(r, 2/3) ** Perm(a, 2/3) ** a != null;
177: loop_invariant Perm(l, 2/3) ** Perm(r, 2/3) ** Perm(a, 2/3) ** a != null;
201: context_everywhere Perm(l, 1/3) ** Perm(r, 1/3) ** Perm(a, 1/3) ** K > 0;

examples/quickselect/QuickSelect.java
20: //@ context Perm(a[*], 1/2);
35: //@ context_everywhere (\forall* int i; 0<=i && i<a.length && (i<low || i>high); Perm(a[i], 1/2));

examples/layers/LFQHist.java
84: requires Value(hist) ** PointsTo(hist_active,1/2,true);
85: ensures Value(hist)  ** PointsTo(hist_active,1/2,false)
97: ** PointsTo(hist_active,1/2,true); @*/
154: Perm(hist_active,1/2) ** Value(hist) ** (hist_active ==>
224: requires Perm(last,1/2) ** RPerm(last.next)
226: ensures  Perm(last,1/2) ** RPerm(last.next)
285: requires Value(hist) ** HPerm(hist.q,1/2);
286: requires Value(head) ** Perm(head.ref,1/2)
292: ensures  Value(hist) ** HPerm(hist.q,1/2);
293: ensures  Value(head) ** Perm(head.ref,1/2)

examples/layers/LFQ.java
142: requires Perm(last,1/2) ** RPerm(last.next) **
144: ensures  Perm(last,1/2) ** RPerm(last.next) **
185: ** Value(head) ** Perm(head.val,1/2) ** chain(head.val,last)
190: ** Value(head) ** Perm(head.val,1/2)

examples/layers/Java6Lock.java
148: APerm(count,1/2) ** APerm(owner,1/2) **
150: APerm(count,1/2) ** APerm(owner,1/2)) **
154: Perm(held[i],1/2) ** (i!=holder ==> held[i]==0)
164: Perm(held[\current_thread],1/2) **
166: APointsTo(count,1/2,held[\current_thread]) **
167: APointsTo(owner,1/2,\current_thread));

examples/layers/HistoryApplication.java
105: ** Value(this.input) ** PointsTo(queue.hist_active,1/4,true)
110: ** Hist(queue.hist,1/2,empty)
115: ** Value(this.input) ** PointsTo(queue.hist_active,1/4,true)
120: ** Hist(queue.hist,1/2,queue.hist.put_all(vals))
127: ** Value(queue.hist) ** Hist(queue.hist,1/2,empty)
128: ** PointsTo(queue.hist_active,1/4,true)
150: //@ assert Hist(queue.hist,1/2,queue.hist.put_all(take(vals,i)));
156: ** Value(this.input) ** PointsTo(queue.hist_active,1/4,true)
161: ** Hist(queue.hist,1/2,queue.hist.put_all(take(vals,i)));
165: /*@ with { p=1/2 ; P = queue.hist.put_all(take(vals,i));} @*/;
166: //@ assert Hist(queue.hist,1/2,
170: //@ assert Hist(queue.hist,1/2,queue.hist.put_all(take(vals,i)));
172: //@ assert Hist(queue.hist,1/2,queue.hist.put_all(take(vals,N)));
192: ** Value(this.output) ** PointsTo(queue.hist_active,1/4,true)
195: ** Hist(queue.hist,1/2,empty)
200: ** Value(this.output) ** PointsTo(queue.hist_active,1/4,true)
205: ** Hist(queue.hist,1/2,queue.hist.get_all(vals))
211: ** Hist(queue.hist,1/2,empty) ** output != null
212: ** PointsTo(queue.hist_active,1/4,true)
233: ** PointsTo(queue.hist_active,1/4,true)
236: ** Hist(queue.hist,1/2,queue.hist.get_all(vals)); @*/
239: p=1/2 ; P = queue.hist.get_all(vals);} @*/;
256: ** PointsTo(hist_active,1/2,true); @*/
280: requires Value(hist) ** PointsTo(hist_active,1/2,true);
281: ensures Value(hist)  ** PointsTo(hist_active,1/2,false)** HPerm(hist.q,1);
305: //@ split q.hist, 1/2, empty, 1/2, empty;
321: //@ assert Hist(hist,1/2,hist.put_all(s.vals));
322: //@ assert Hist(hist,1/2,hist.get_all(r.vals));
323: //@ merge hist, 1/2, hist.put_all(s.vals), 1/2, hist.get_all(r.vals);

examples/manual/fibonacci.pvl
20: requires Perm(input,1/10) ** Perm(output,1);
21: ensures  Perm(input,1/10) ** Perm(output,1) ** output==fib(input);

examples/histories/HistoryAppl.java
28: //@ split h, 1/3, empty, 2/3, empty;
29: do_incr(h) /*@ with { p = empty; q = 1/3; } @*/;
30: //@ merge h, 2/3, empty, 1/3, h.single(1);

examples/carp/forward-loop.c
9: context \pointer(b, len, 1/2);
21: requires Perm(b[i],1/2);
24: ensures Perm(a[i],1/2);
25: ensures Perm(b[i],1/2);
30: ensures  i>0 ==> Perm(a[i-1],1/2);
31: ensures  i==len-1 ==> Perm(a[i],1/2);
40: send 0 <= i ** i < len ** Perm(a[i],1/2) ** a[i]==i+1 to S2,1;
44: //@ recv 0 < i ** i < len ** Perm(a[i-1],1/2) ** a[i-1]==i from S1,1;

examples/carp/forward-host.pvl
13: requires (\forall* int i ; 0 <= i && i < N ; Perm(b[i],1/2));
19: ensures  (\forall* int i ; 0 <= i && i < N ; Perm(b[i],1/2));
29: requires Perm(b[i],1/2);
34: ensures  Perm(a[i],1/2);
35: ensures  Perm(b[i],1/2);
41: ensures  i>0 ==> Perm(a[i-1],1/2);
42: ensures  i==N-1 ==> Perm(a[i],1/2);
46: requires i < N-1 ==> Perm(a[i],1/2);
48: ensures  i > 0   ==> Perm(a[i-1],1/2);

examples/carp/histogram-matrix.c
19: context \pointer(matrix, M, 1/2);
20: context (\forall* int i; 0 <= i < M; (\forall* int j; 0 <= j < N; Perm(matrix[i][j], 1/2)));
36: context Perm(matrix[i][j],1/4) ** 0 <= matrix[i][j] < P ;

examples/carp/summation-kernel-0.pvl
11: context Perm(res,write) ** (\forall* int i;0 <= i && i < M*N ; Perm(ar[i],1/2));
17: context (\forall* int k ; 0 <= k && k < N ; Perm(ar[g*N+k],1/4));
23: requires Perm(ar[g*N+t],1/4);
24: ensures t==0 ==> (\forall* int k; 0 <= k && k < N ; Perm(ar[g*N+k],1/4));
30: requires Perm(ar[g*N+t],1/4);
31: ensures  t==0 ==> (\forall* int k; 0 <= k && k < N ; Perm(ar[g*N+k],1/4));

examples/carp/summation-kernel-1.pvl
12: context (\forall* int i;0 <= i && i < M*N ; Perm(ar[i],1/2));
21: context (\forall* int k ; 0 <= k && k < N ; Perm(ar[g*N+k],1/4));
33: \array(contrib,N) ** (\forall* int k; 0 <= k && k < N ; Perm(contrib[k],1/2))
39: requires PointsTo(contrib[t],1/2,0);
40: requires Perm(ar[g*N+t],1/4);
41: ensures t==0 ==> (\forall* int k; 0 <= k && k < N ; Perm(ar[g*N+k],1/4));
51: requires Perm(ar[g*N+t],1/4);
52: requires PointsTo(contrib[t],1/2,ar[g*N+t]);
53: ensures  t==0 ==> (\forall* int k; 0 <= k && k < N ; Perm(ar[g*N+k],1/4));
54: ensures  t==0 ==> (\forall* int k; 0 <= k && k < N ; Perm(contrib[k],1/4));

examples/witnesses/WandDemoSilver.java
15: resource readonly()=Perm(x,1/4);
41: use    Perm(this.x,3/4);

examples/openmp/add-spec.c
13: context \pointer(a, len, 1/2) ** \pointer(b, len, 1/2) ** \pointer(c, len, write);
20: context \pointer(a, len, 1/2) ** \pointer(b, len, 1/2) ** \pointer(c, len, write);
27: context Perm(c[i],1) ** Perm(a[i],1/2);
37: context Perm(c[i],1) ** Perm(b[i],1/2);

examples/openmp/add-spec-simd.c
16: context   (\forall* int k;0 <= k && k < len ; Perm(a[k],1/2));
17: context   (\forall* int k;0 <= k && k < len ; Perm(b[k],1/2));
25: context (\forall* int k;0 <= k && k < len ; Perm(a[k],1/2));
26: context (\forall* int k;0 <= k && k < len ; Perm(b[k],1/2));
33: context Perm(c[i],1) ** Perm(b[i],1/2) ** Perm(a[i],1/2);

examples/openmp/parallel-example1.pvl
22: context Perm(x[i],1) ** Perm(z[i],1/20);
31: context Perm(z[k],1) ** Perm(y[k],1/2);

examples/openmp/sections-reduced.c
15: context \pointer(a, len, 1/2) ** \pointer(b, len, 1/2);
25: context \pointer(a, len, 1/2) ** \pointer(b, len, 1/2);
40: context Perm(c[i],1) ** Perm(a[i],1/4);
50: context Perm(c[i],1) ** Perm(b[i],1/4);
66: context Perm(d[i],1) ** Perm(a[i],1/4);
76: context Perm(d[i],1) ** Perm(b[i],1/4);

examples/openmp/addvec1.pvl
17: context   (\forall* int i; 0 <= i && i < M ; Perm(b[i],1/2));
18: context   (\forall* int i; 0 <= i && i < M ; Perm(c[i],1/2));

examples/openmp/sections-reduced-fail.c
14: context \pointer(a, len, 1/2) ** \pointer(b, len, 1/2);
24: context \pointer(a, len, 1/2) ** \pointer(b, len, 1/2);
39: context Perm(c[i],1) ** Perm(a[i],1/4);
49: context Perm(c[i],1) ** Perm(b[i],1/4);
65: context Perm(d[i],1) ** Perm(a[i],1/4);

examples/openmp/addvec2.pvl
16: context (\forall* int i; 0 <= i && i < M*N ; Perm(b[i],1/2));
17: context (\forall* int i; 0 <= i && i < M*N ; Perm(c[i],1/2));
22: context (\forall* int i; k*N <= i && i < (k+1)*N ; Perm(b[i],1/2));
23: context (\forall* int i; k*N <= i && i < (k+1)*N ; Perm(c[i],1/2));

examples/openmp/copy-spec.c
13: context \pointer(a, len, write) ** \pointer(b, len, 1/2);
23: context Perm(a[i],1) ** Perm(b[i],1/4);

examples/arrays/array-example.pvl
31: xs=vals_method(1/2,array);
48: xs=vals_function(1/2,array);

examples/arrays/JavaArrayExamples.java
45: requires Perm(a[i],1/2);
46: requires i==0 ==> Perm(a[i],1/2);
47: requires i < a.length-1 ==> Perm(a[i+1],1/2);
51: //@ S1:if(i>0){ recv 0 < i ** i < a.length ** Perm(a[i],1/2) from S2,1; }
54: //@ send 0 <= i ** i < a.length - 1 ** Perm(a[i+1],1/2) to S1,1;

examples/arrays/kernel-example-v3.pvl
10: context  (\forall* int i; 0 <= i && i < tcount; Perm(c[i], 1/4) ** c[i] > 0); // Perm(c[i], read) also possible (1)
13: ensures  (\forall* int i; 0 <= i && i < tcount; Perm(a[i], 1/4) ** a[i] > 0); // Perm(a[i], read) also possible (1)
14: ensures  (\forall* int i; 0 <= i && i < tcount; Perm(b[i], 1/4) ** b[i] > 0); // Perm(b[i], read) also possible (1)
17: context  Perm(c[tid], 1/4) ** c[tid] > 0; // Perm(c[tid], read) also possible (2)
20: ensures  Perm(a[tid], 1/4) ** a[tid] > 0; // Perm(a[tid], read) also possible (2)
21: ensures  Perm(b[tid], 1/4) ** b[tid] > 0; // Perm(b[tid], read) also possible (2)
26: requires Perm(b[tid], 1/4); // Perm(b[tid], read) also possible (3)
27: ensures  tid>0 ==> Perm(b[tid-1], 1/4); // Perm(b[tid-1], read) also possible (4)

examples/arrays/forward-dep.pvl
13: ensures  (\forall* int i; 0 <= i && i < tcount; Perm(a[i], 1/2)); // Perm(a[i], read) also possible (1)
22: ensures  Perm(a[tid], 1/2); // Perm(a[tid], read) also possible (2)
34: ensures  Perm(a[tid], 1/2); // Perm(a[tid], read) also possible (3)
35: ensures  tid>0 ==> Perm(a[tid-1], 1/2); // Perm(a[tid-1], read) also possible (4)

examples/arrays/kernel-example-v2.pvl
10: context  (\forall* int i; 0 <= i && i < tcount; Perm(c[i], 1/4) ** c[i] > 0); // Perm(c[i], read) also possible (1)
13: ensures  (\forall* int i; 0 <= i && i < tcount; Perm(a[i], 1/4) ** a[i] > 0); // Perm(a[i], read) also possible (1)
14: ensures  (\forall* int i; 0 <= i && i < tcount; Perm(b[i], 1/4) ** b[i] > 0); // Perm(b[i], read) also possible (1)
17: context  Perm(c[tid], 1/4) ** c[tid] > 0; // Perm(c[tid], read) also possible (2)
20: ensures  Perm(a[tid], 1/4) ** a[tid] > 0; // Perm(a[tid], read) also possible (2)
21: ensures  Perm(b[tid], 1/4) ** b[tid] > 0; // Perm(b[tid], read) also possible (2)
28: context  Perm(c[tid], 1/4); // Perm(c[tid], read) also possible (3)
30: ensures  Perm(b[tid], 1/4); // Perm(b[tid], read) also possible (3)
31: ensures  tid>0 ==> Perm(b[tid-1], 1/4); // Perm(b[tid-1], read) also possible (4)

examples/arrays/forward-dep-e1.c
8: context \pointer(b, len, 1/2);
16: ensures  Perm(a[i],1/2);
17: ensures  i>0 ==> Perm(a[i-1],1/2);
18: ensures  i==len-1 ==> Perm(a[i],1/2);
20: context  Perm(b[i],1/2);
27: //@ send a != NULL ** Perm(a[i],1/2) to S2,1;
30: //@ recv a != NULL ** Perm(a[i-1],1/2) from S1,1;

examples/arrays/Transpose.pvl
18: Perm(inp[i1][j1],1/2)));
28: context  Perm(inp[j][i],1/4);

examples/arrays/basic-examples.c
70: context \pointer(a, len, write) ** \pointer(b, len, 1/2) ** \pointer(c, len, 1/2);
80: context Perm(a[i],write) ** Perm(b[i],1/2) ** Perm(c[i],1/2);
90: context \pointer(a, N, write) ** \pointer(b, N, 1/2) ** \pointer(c, N, write);
95: context Perm(a[i],write) ** Perm(c[i],write) ** Perm(b[i],1/2);
103: context \pointer(a, N, write) ** \pointer(b, N, 1/2) ** \pointer(c, N, write);
108: requires Perm(a[i],write) ** Perm(b[i],1/2) ** Perm(c[i],write);
109: ensures  Perm(a[i],1/2) ** Perm(b[i],1/2) ** Perm(c[i],write);
110: ensures  (i>0 ==> Perm(a[i-1],1/2)) ** (i==N-1 ==> Perm(a[i],1/2));
115: send a != NULL ** 0 <= i ** i < N - 1 ** Perm(a[i],1/2) to S2,1;
119: //@ recv a != NULL ** 0 < i ** i < N ** Perm(a[i-1],1/2) from S1,1;
126: context \pointer(a, len, write) ** \pointer(b, len, 1/2) ** \pointer(c, len, write);
135: requires Perm(a[i],write) ** Perm(b[i],1/2) ** Perm(c[i],write);
138: ensures  Perm(a[i],1/2) ** Perm(b[i],1/2) ** Perm(c[i],write);
139: ensures  i>0 ==> Perm(a[i-1],1/2);
140: ensures  i==len-1 ==> Perm(a[i],1/2);
146: send a != NULL ** 0 <= i ** i < len - 1 ** Perm(a[i],1/2) ** a[i]==i+1 to FS2,1;
150: //@ recv a != NULL ** 0 < i ** i < len ** Perm(a[i-1],1/2) ** a[i-1]==i from FS1,1;
158: context \pointer(a, N, write) ** \pointer(b, N, 1/2) ** \pointer(c, N, write);
164: requires Perm(a[i],1/2) ** Perm(b[i],1/2) ** Perm(c[i],write);
165: requires (i==0 ==> Perm(a[i],1/2)) ** (i < N-1 ==> Perm(a[i+1],1/2));
166: ensures  Perm(a[i],1/2) ** Perm(a[i],1/2) ** Perm(b[i],1/2) ** Perm(c[i],write);
171: recv a != NULL ** 0 < i ** i < N ** Perm(a[i],1/2) from T2,1;
177: //@ send a != NULL ** 0 <= i ** i < N - 1 ** Perm(a[i+1],1/2) to T1,1;
183: context \pointer(a, len, write) ** \pointer(b, len, 1/2) ** \pointer(c, len, write);
196: requires Perm(a[i], 1/2);
197: requires i==0 ==> Perm(a[i], 1/2);
198: requires i < len-1 ==> Perm(a[i+1], 1/2);
199: context  Perm(b[i], 1/2);
211: recv a != NULL ** 0 < i ** i < len ** i == (i-1)+1 ** Perm(a[i], 1/2) from FT2,1;
217: //@ send a != NULL ** 0 <= i ** i < len - 1 ** Perm(a[i+1], 1/2) to FT1,1;

examples/arrays/forward-dep-noauto.pvl
13: ensures  (\forall* int i; 0 <= i && i < tcount; Perm(a[i], 1/2)); // Perm(a[i], write) also possible or Perm[a[i], read) also possible (1)
22: ensures  Perm(a[tid], 1/2); // Perm(a[tid], read) also possible (2)
23: ensures  tid>0 ==> Perm(a[tid-1], 1/2); // Perm(a[tid-1], read) also possible (3)
24: ensures  tid==tcount-1 ==> Perm(a[tid], 1/2); // Perm(a[tid], read) also possible (4)
32: requires tid<tcount-1 ==> Perm(a[tid], 1/2); // Perm(a[tid], read) also possible (5)
33: ensures  tid>0 ==> Perm(a[tid-1], 1/2); // Perm(a[tid-1], read) also possible (6)

examples/arrays/backward-dep-e1.c
8: context \pointer(b, len, 1/2);
17: requires Perm(a[i],1/2);
18: requires i==0 ==> Perm(a[i],1/2);
19: requires i < len-1 ==> Perm(a[i+1],1/2);
20: requires Perm(b[i],1/2);
24: ensures  Perm(b[i],1/2);
31: recv a!=NULL ** Perm(a[i],1/2) from S2,1;
36: //@ send a!=NULL ** Perm(a[i+1],1/2) to S1,1;

examples/arrays/kernel-example.pvl
12: requires (\forall* int i; 0 <= i && i < tcount; Perm(c[i], 1/4)); // Perm(c[i], read) also possible (1)
17: requires Perm(c[tid], 1/4); // Perm(c[tid], read) also possible (2)
25: requires Perm(c[tid], 1/4); // Perm(c[tid], read) also possible (3)
26: ensures  Perm(b[tid], 1/4); // Perm(b[tid], read) also possible (1)
27: ensures  tid>0 ==> Perm(b[tid-1], 1/4); // Perm(b[tid-1], read) also possible (2)

examples/basic/BasicAssert-e1.java
10: requires b ** Perm(r.test,1/2);

examples/basic/frac1.pvl
7: context_everywhere 1/5 < p && p < 1/2;

examples/basic/test-scale.java
11: requires ([1/2]P()) ** ([read]P());
14: requires ([read]P()) ** ([1/2]P());

examples/basic/frac2.pvl
7: context_everywhere 0/1 < p && p < 1/1;

examples/basic/outputbinder-e1.pvl
12: requires PointsTo(x,1/2,15);

examples/futures/NoSendAfterRead.java
91: requires Future(d.F,1/2,d.F.nsar());
96: loop_invariant Future(d.F,1/2,d.F.nsar());
100: //@ choose d.F,1/2,d.F.nsar(),d.F.send()*d.F.nsar(); //skip(run)
102: /*@ with { p=1/2; P=d.F.nsar();} @*/; //skip(run)
115: requires Future(d.F,1/2,d.F.rs());
119: loop_invariant Future(d.F,1/2,d.F.rs()); @*/
122: //@ choose d.F,1/2,d.F.rs(),d.F.clear()*d.F.rs(); //skip(run)
123: { //@ action d.F,1/2,d.F.rs(),d.F.clear();
127: //@ choose d.F,1/2,d.F.rs(),d.F.receive()*d.F.rs(); //skip(run)
129: /*@ with { p=1/2; P=d.F.rs();} @*/; //skip(run)

examples/futures/counteradd_2.pvl
29: split f, 1/2, f.decr(), 1/2, f.decr();
33: requires Future(f, 1/2, f.decr());
34: ensures Future(f, 1/2, empty);
37: action(f, 1/2, empty, f.decr()) { f.counter = f.counter - 1; }
41: requires Future(f, 1/2, f.decr());
42: ensures Future(f, 1/2, empty);
45: action(f, 1/2, empty, f.decr()) { f.counter = f.counter - 1; }
50: merge f, 1/2, empty, 1/2, empty;

examples/futures/unequalcounting.pvl
31: split f, 1/2, f.plus(n), 1/2, f.mult(n);
35: requires Future(f, 1/2, f.plus(n));
36: ensures Future(f, 1/2, empty);
39: action(f, 1/2, empty, f.plus(n)) { f.counter = f.counter + n; }
43: requires Future(f, 1/2, f.mult(n));
44: ensures Future(f, 1/2, empty);
47: action(f, 1/2, empty, f.mult(n)) { f.counter = f.counter * n; }
52: merge f, 1/2, empty, 1/2, empty;

examples/demo/demo3a.pvl
10: context (\forall* int i; 0 <= i && i < A.length; Perm(A[i], 1/2));
15: requires Perm(A[tid], 1/2);
16: ensures Perm(A[tid], 1/2);

examples/demo/demo3c.pvl
18: context Perm(main, 1/2) ** main != null;
19: context Perm(val, 1/2);

examples/demo/demo3d.pvl
37: context (\forall* int i; 0 <= i && i < A.length; Perm(A[i], 1/2));
48: context Perm(A[tid], 1/4) ** A[tid] == xs[tid];

examples/demo/demo3a-func.pvl
11: requires (\forall* int j; 0 <= j && j < A.length; Perm(A[j], 1/2));
19: context (\forall* int i; 0 <= i && i < A.length; Perm(A[i], 1/2));
25: (\forall* int i; 0 <= i && i < contrib.length; Perm(contrib[i], 1/2)) **
28: requires Perm(A[tid], 1/2);
29: requires Perm(contrib[tid], 1/2) ** contrib[tid] == 0;
30: ensures Perm(A[tid], 1/2);
31: ensures Perm(contrib[tid], 1/2) ** contrib[tid] == A[tid];

examples/demo/demo1.pvl
10: ensures Perm(count, 1/2);
17: ensures Perm(count, 1/2);

examples/demo/demo3a-funcW.pvl
59: context (\forall* int i; 0 <= i && i < A.length; Perm(A[i], 1/2));
73: context Perm(A[tid], 1/2);

examples/demo/demo3b.pvl
15: context (\forall* int i; 0 <= i && i < A.length; Perm(A[i], 1/2));
18: requires Perm(A[tid], 1/2);
19: ensures Perm(A[tid], 1/2);

examples/demo/demo4.pvl
33: split model, 1/2, model.incr(), 1/2, model.incr(); // splitting the model
34: assert Future(model, 1/2, model.incr()) ** Future(model, 1/2, model.incr()) ** HPerm(model.x, 1); // and now we have this
39: assert Future(model, 1/2, model.incr()) ** Future(model, 1/2, model.incr()); // now we are left with this
43: requires Future(model, 1/2, model.incr());
44: ensures Future(model, 1/2, empty);
47: action(model, 1/2, empty, model.incr()) { model.x = model.x + 2; }
51: requires Future(model, 1/2, model.incr());
52: ensures Future(model, 1/2, empty);
55: action(model, 1/2, empty, model.incr()) { model.x = model.x + 2; }
59: assert Future(model, 1/2, empty) ** Future(model, 1/2, empty); // after both threads have terminated, we are left with this
60: merge model, 1/2, empty, 1/2, empty; // we may merge the two models back into one again

