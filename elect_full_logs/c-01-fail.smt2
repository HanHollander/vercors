(get-info :version)
; (:version "4.8.7")
; Started: 2020-09-07 16:38:49
; Silicon.version: 1.1-SNAPSHOT (0964fff4)
; Input file: elect_full.sil
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Boogie: default
(set-option :auto_config false) ; Usually a good idea
(set-option :smt.restart_strategy 0)
(set-option :smt.restart_factor |1.5|)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :smt.delay_units_threshold 16)
(set-option :nnf.sk_hack true)
(set-option :type_check true)
(set-option :smt.bv.reflect true)
(set-option :smt.mbqi false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.qi.cost "(+ weight generation)")
(set-option :smt.qi.max_multi_patterns 1000)
(set-option :smt.phase_selection 0) ; default: 3, Boogie: 0
(set-option :sat.phase caching)
(set-option :sat.random_seed 0)
(set-option :nlsat.randomize true)
(set-option :nlsat.seed 0)
(set-option :nlsat.shuffle_vars false)
(set-option :fp.spacer.order_children 0) ; Not available with Z3 4.5
(set-option :fp.spacer.random_seed 0) ; Not available with Z3 4.5
(set-option :smt.arith.random_initial_value true) ; Boogie: true
(set-option :smt.random_seed 0)
(set-option :sls.random_offset true)
(set-option :sls.random_seed 0)
(set-option :sls.restart_init false)
(set-option :sls.walksat_ucb true)
(set-option :model.v2 true)
; 
; ; /preamble.smt2
(declare-datatypes () ((
    $Snap ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM)
(declare-sort $PPM)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm) (ub $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))
         (< p $Perm.Write)))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<Int>)
(declare-sort Seq<Seq<Int>>)
(declare-sort Set<Seq<Seq<Int>>>)
(declare-sort Set<Seq<Int>>)
(declare-sort Set<Bool>)
(declare-sort Set<Int>)
(declare-sort Set<$Ref>)
(declare-sort Set<frac>)
(declare-sort Set<$Snap>)
(declare-sort Process)
(declare-sort zfrac)
(declare-sort frac)
(declare-sort $FVF<Seq<Seq<Int>>>)
(declare-sort $FVF<$Ref>)
(declare-sort $FVF<Seq<Int>>)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<Int>To$Snap (Seq<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Int> ($Snap) Seq<Int>)
(assert (forall ((x Seq<Int>)) (!
    (= x ($SortWrappers.$SnapToSeq<Int>($SortWrappers.Seq<Int>To$Snap x)))
    :pattern (($SortWrappers.Seq<Int>To$Snap x))
    :qid |$Snap.$SnapToSeq<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Int>To$Snap($SortWrappers.$SnapToSeq<Int> x)))
    :pattern (($SortWrappers.$SnapToSeq<Int> x))
    :qid |$Snap.Seq<Int>To$SnapToSeq<Int>|
    )))
(declare-fun $SortWrappers.Seq<Seq<Int>>To$Snap (Seq<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Seq<Int>> ($Snap) Seq<Seq<Int>>)
(assert (forall ((x Seq<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapToSeq<Seq<Int>>($SortWrappers.Seq<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.Seq<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapToSeq<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Seq<Int>>To$Snap($SortWrappers.$SnapToSeq<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapToSeq<Seq<Int>> x))
    :qid |$Snap.Seq<Seq<Int>>To$SnapToSeq<Seq<Int>>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<Seq<Seq<Int>>>To$Snap (Set<Seq<Seq<Int>>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Seq<Seq<Int>>> ($Snap) Set<Seq<Seq<Int>>>)
(assert (forall ((x Set<Seq<Seq<Int>>>)) (!
    (= x ($SortWrappers.$SnapToSet<Seq<Seq<Int>>>($SortWrappers.Set<Seq<Seq<Int>>>To$Snap x)))
    :pattern (($SortWrappers.Set<Seq<Seq<Int>>>To$Snap x))
    :qid |$Snap.$SnapToSet<Seq<Seq<Int>>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Seq<Seq<Int>>>To$Snap($SortWrappers.$SnapToSet<Seq<Seq<Int>>> x)))
    :pattern (($SortWrappers.$SnapToSet<Seq<Seq<Int>>> x))
    :qid |$Snap.Set<Seq<Seq<Int>>>To$SnapToSet<Seq<Seq<Int>>>|
    )))
(declare-fun $SortWrappers.Set<Seq<Int>>To$Snap (Set<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Seq<Int>> ($Snap) Set<Seq<Int>>)
(assert (forall ((x Set<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapToSet<Seq<Int>>($SortWrappers.Set<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.Set<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapToSet<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Seq<Int>>To$Snap($SortWrappers.$SnapToSet<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapToSet<Seq<Int>> x))
    :qid |$Snap.Set<Seq<Int>>To$SnapToSet<Seq<Int>>|
    )))
(declare-fun $SortWrappers.Set<Bool>To$Snap (Set<Bool>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Bool> ($Snap) Set<Bool>)
(assert (forall ((x Set<Bool>)) (!
    (= x ($SortWrappers.$SnapToSet<Bool>($SortWrappers.Set<Bool>To$Snap x)))
    :pattern (($SortWrappers.Set<Bool>To$Snap x))
    :qid |$Snap.$SnapToSet<Bool>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Bool>To$Snap($SortWrappers.$SnapToSet<Bool> x)))
    :pattern (($SortWrappers.$SnapToSet<Bool> x))
    :qid |$Snap.Set<Bool>To$SnapToSet<Bool>|
    )))
(declare-fun $SortWrappers.Set<Int>To$Snap (Set<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Int> ($Snap) Set<Int>)
(assert (forall ((x Set<Int>)) (!
    (= x ($SortWrappers.$SnapToSet<Int>($SortWrappers.Set<Int>To$Snap x)))
    :pattern (($SortWrappers.Set<Int>To$Snap x))
    :qid |$Snap.$SnapToSet<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Int>To$Snap($SortWrappers.$SnapToSet<Int> x)))
    :pattern (($SortWrappers.$SnapToSet<Int> x))
    :qid |$Snap.Set<Int>To$SnapToSet<Int>|
    )))
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<frac>To$Snap (Set<frac>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<frac> ($Snap) Set<frac>)
(assert (forall ((x Set<frac>)) (!
    (= x ($SortWrappers.$SnapToSet<frac>($SortWrappers.Set<frac>To$Snap x)))
    :pattern (($SortWrappers.Set<frac>To$Snap x))
    :qid |$Snap.$SnapToSet<frac>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<frac>To$Snap($SortWrappers.$SnapToSet<frac> x)))
    :pattern (($SortWrappers.$SnapToSet<frac> x))
    :qid |$Snap.Set<frac>To$SnapToSet<frac>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.ProcessTo$Snap (Process) $Snap)
(declare-fun $SortWrappers.$SnapToProcess ($Snap) Process)
(assert (forall ((x Process)) (!
    (= x ($SortWrappers.$SnapToProcess($SortWrappers.ProcessTo$Snap x)))
    :pattern (($SortWrappers.ProcessTo$Snap x))
    :qid |$Snap.$SnapToProcessTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.ProcessTo$Snap($SortWrappers.$SnapToProcess x)))
    :pattern (($SortWrappers.$SnapToProcess x))
    :qid |$Snap.ProcessTo$SnapToProcess|
    )))
(declare-fun $SortWrappers.zfracTo$Snap (zfrac) $Snap)
(declare-fun $SortWrappers.$SnapTozfrac ($Snap) zfrac)
(assert (forall ((x zfrac)) (!
    (= x ($SortWrappers.$SnapTozfrac($SortWrappers.zfracTo$Snap x)))
    :pattern (($SortWrappers.zfracTo$Snap x))
    :qid |$Snap.$SnapTozfracTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.zfracTo$Snap($SortWrappers.$SnapTozfrac x)))
    :pattern (($SortWrappers.$SnapTozfrac x))
    :qid |$Snap.zfracTo$SnapTozfrac|
    )))
(declare-fun $SortWrappers.fracTo$Snap (frac) $Snap)
(declare-fun $SortWrappers.$SnapTofrac ($Snap) frac)
(assert (forall ((x frac)) (!
    (= x ($SortWrappers.$SnapTofrac($SortWrappers.fracTo$Snap x)))
    :pattern (($SortWrappers.fracTo$Snap x))
    :qid |$Snap.$SnapTofracTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.fracTo$Snap($SortWrappers.$SnapTofrac x)))
    :pattern (($SortWrappers.$SnapTofrac x))
    :qid |$Snap.fracTo$SnapTofrac|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<Seq<Seq<Int>>>To$Snap ($FVF<Seq<Seq<Int>>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<Seq<Seq<Int>>> ($Snap) $FVF<Seq<Seq<Int>>>)
(assert (forall ((x $FVF<Seq<Seq<Int>>>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<Seq<Seq<Int>>>($SortWrappers.$FVF<Seq<Seq<Int>>>To$Snap x)))
    :pattern (($SortWrappers.$FVF<Seq<Seq<Int>>>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<Seq<Seq<Int>>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<Seq<Seq<Int>>>To$Snap($SortWrappers.$SnapTo$FVF<Seq<Seq<Int>>> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<Seq<Seq<Int>>> x))
    :qid |$Snap.$FVF<Seq<Seq<Int>>>To$SnapTo$FVF<Seq<Seq<Int>>>|
    )))
(declare-fun $SortWrappers.$FVF<$Ref>To$Snap ($FVF<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<$Ref> ($Snap) $FVF<$Ref>)
(assert (forall ((x $FVF<$Ref>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<$Ref>($SortWrappers.$FVF<$Ref>To$Snap x)))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<$Ref>To$Snap($SortWrappers.$SnapTo$FVF<$Ref> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<$Ref> x))
    :qid |$Snap.$FVF<$Ref>To$SnapTo$FVF<$Ref>|
    )))
(declare-fun $SortWrappers.$FVF<Seq<Int>>To$Snap ($FVF<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<Seq<Int>> ($Snap) $FVF<Seq<Int>>)
(assert (forall ((x $FVF<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<Seq<Int>>($SortWrappers.$FVF<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<Seq<Int>>To$Snap($SortWrappers.$SnapTo$FVF<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<Seq<Int>> x))
    :qid |$Snap.$FVF<Seq<Int>>To$SnapTo$FVF<Seq<Int>>|
    )))
; ////////// Symbols
(declare-fun Set_in (Seq<Seq<Int>> Set<Seq<Seq<Int>>>) Bool)
(declare-fun Set_card (Set<Seq<Seq<Int>>>) Int)
(declare-const Set_empty Set<Seq<Seq<Int>>>)
(declare-fun Set_singleton (Seq<Seq<Int>>) Set<Seq<Seq<Int>>>)
(declare-fun Set_unionone (Set<Seq<Seq<Int>>> Seq<Seq<Int>>) Set<Seq<Seq<Int>>>)
(declare-fun Set_union (Set<Seq<Seq<Int>>> Set<Seq<Seq<Int>>>) Set<Seq<Seq<Int>>>)
(declare-fun Set_disjoint (Set<Seq<Seq<Int>>> Set<Seq<Seq<Int>>>) Bool)
(declare-fun Set_difference (Set<Seq<Seq<Int>>> Set<Seq<Seq<Int>>>) Set<Seq<Seq<Int>>>)
(declare-fun Set_intersection (Set<Seq<Seq<Int>>> Set<Seq<Seq<Int>>>) Set<Seq<Seq<Int>>>)
(declare-fun Set_subset (Set<Seq<Seq<Int>>> Set<Seq<Seq<Int>>>) Bool)
(declare-fun Set_equal (Set<Seq<Seq<Int>>> Set<Seq<Seq<Int>>>) Bool)
(declare-fun Set_in (Seq<Int> Set<Seq<Int>>) Bool)
(declare-fun Set_card (Set<Seq<Int>>) Int)
(declare-const Set_empty Set<Seq<Int>>)
(declare-fun Set_singleton (Seq<Int>) Set<Seq<Int>>)
(declare-fun Set_unionone (Set<Seq<Int>> Seq<Int>) Set<Seq<Int>>)
(declare-fun Set_union (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_disjoint (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_difference (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_intersection (Set<Seq<Int>> Set<Seq<Int>>) Set<Seq<Int>>)
(declare-fun Set_subset (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_equal (Set<Seq<Int>> Set<Seq<Int>>) Bool)
(declare-fun Set_in (Bool Set<Bool>) Bool)
(declare-fun Set_card (Set<Bool>) Int)
(declare-const Set_empty Set<Bool>)
(declare-fun Set_singleton (Bool) Set<Bool>)
(declare-fun Set_unionone (Set<Bool> Bool) Set<Bool>)
(declare-fun Set_union (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_disjoint (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_difference (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_intersection (Set<Bool> Set<Bool>) Set<Bool>)
(declare-fun Set_subset (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_equal (Set<Bool> Set<Bool>) Bool)
(declare-fun Set_in (Int Set<Int>) Bool)
(declare-fun Set_card (Set<Int>) Int)
(declare-const Set_empty Set<Int>)
(declare-fun Set_singleton (Int) Set<Int>)
(declare-fun Set_unionone (Set<Int> Int) Set<Int>)
(declare-fun Set_union (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_disjoint (Set<Int> Set<Int>) Bool)
(declare-fun Set_difference (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_intersection (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_subset (Set<Int> Set<Int>) Bool)
(declare-fun Set_equal (Set<Int> Set<Int>) Bool)
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_disjoint (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_in (frac Set<frac>) Bool)
(declare-fun Set_card (Set<frac>) Int)
(declare-const Set_empty Set<frac>)
(declare-fun Set_singleton (frac) Set<frac>)
(declare-fun Set_unionone (Set<frac> frac) Set<frac>)
(declare-fun Set_union (Set<frac> Set<frac>) Set<frac>)
(declare-fun Set_disjoint (Set<frac> Set<frac>) Bool)
(declare-fun Set_difference (Set<frac> Set<frac>) Set<frac>)
(declare-fun Set_intersection (Set<frac> Set<frac>) Set<frac>)
(declare-fun Set_subset (Set<frac> Set<frac>) Bool)
(declare-fun Set_equal (Set<frac> Set<frac>) Bool)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_disjoint (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Seq_length (Seq<Int>) Int)
(declare-const Seq_empty Seq<Int>)
(declare-fun Seq_singleton (Int) Seq<Int>)
(declare-fun Seq_build (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_index (Seq<Int> Int) Int)
(declare-fun Seq_append (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun Seq_update (Seq<Int> Int Int) Seq<Int>)
(declare-fun Seq_contains (Seq<Int> Int) Bool)
(declare-fun Seq_take (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_drop (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_equal (Seq<Int> Seq<Int>) Bool)
(declare-fun Seq_sameuntil (Seq<Int> Seq<Int> Int) Bool)
(declare-fun Seq_range (Int Int) Seq<Int>)
(declare-fun Seq_length (Seq<Seq<Int>>) Int)
(declare-const Seq_empty Seq<Seq<Int>>)
(declare-fun Seq_singleton (Seq<Int>) Seq<Seq<Int>>)
(declare-fun Seq_build (Seq<Seq<Int>> Seq<Int>) Seq<Seq<Int>>)
(declare-fun Seq_index (Seq<Seq<Int>> Int) Seq<Int>)
(declare-fun Seq_append (Seq<Seq<Int>> Seq<Seq<Int>>) Seq<Seq<Int>>)
(declare-fun Seq_update (Seq<Seq<Int>> Int Seq<Int>) Seq<Seq<Int>>)
(declare-fun Seq_contains (Seq<Seq<Int>> Seq<Int>) Bool)
(declare-fun Seq_take (Seq<Seq<Int>> Int) Seq<Seq<Int>>)
(declare-fun Seq_drop (Seq<Seq<Int>> Int) Seq<Seq<Int>>)
(declare-fun Seq_equal (Seq<Seq<Int>> Seq<Seq<Int>>) Bool)
(declare-fun Seq_sameuntil (Seq<Seq<Int>> Seq<Seq<Int>> Int) Bool)
(declare-fun zfrac_val<Perm> (zfrac) $Perm)
(declare-fun frac_val<Perm> (frac) $Perm)
(declare-fun p_is_choice<Bool> (Process Process) Bool)
(declare-const p_empty<Process> Process)
(declare-fun p_merge<Process> (Process Process) Process)
(declare-fun p_choice<Process> (Process Process) Process)
(declare-fun p_seq<Process> (Process Process) Process)
(declare-fun p_method_Future_Send__Integer__Integer<Process> (Int Int) Process)
(declare-fun p_method_Future_Recv__Integer__Integer<Process> (Int Int) Process)
(declare-fun p_method_Future_Done__Integer__Integer<Process> (Int Int) Process)
(declare-fun p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer<Process> (Int Int Int Int Int Int) Process)
(declare-fun p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer<Process> (Int Int Int Int Int Int) Process)
(declare-fun p_method_Future_Elect__Integer__Integer__Integer__Integer__Integer<Process> (Int Int Int Int Int) Process)
(declare-fun p_method_Future_Spawn__Integer__Integer__Sequence$Integer$__Integer<Process> (Int Int Seq<Int> Int) Process)
(declare-fun p_method_Future_Start__Integer__Sequence$Integer$__Integer<Process> (Int Seq<Int> Int) Process)
; /field_value_functions_declarations.smt2 [channel_hist_value: Seq[Seq[Int]]]
(declare-fun $FVF.domain_channel_hist_value ($FVF<Seq<Seq<Int>>>) Set<$Ref>)
(declare-fun $FVF.lookup_channel_hist_value ($FVF<Seq<Seq<Int>>> $Ref) Seq<Seq<Int>>)
(declare-fun $FVF.after_channel_hist_value ($FVF<Seq<Seq<Int>>> $FVF<Seq<Seq<Int>>>) Bool)
(declare-fun $FVF.loc_channel_hist_value (Seq<Seq<Int>> $Ref) Bool)
(declare-fun $FVF.perm_channel_hist_value ($FPM $Ref) $Perm)
(declare-const $fvfTOP_channel_hist_value $FVF<Seq<Seq<Int>>>)
; /field_value_functions_declarations.smt2 [field_Program_f: Ref]
(declare-fun $FVF.domain_field_Program_f ($FVF<$Ref>) Set<$Ref>)
(declare-fun $FVF.lookup_field_Program_f ($FVF<$Ref> $Ref) $Ref)
(declare-fun $FVF.after_field_Program_f ($FVF<$Ref> $FVF<$Ref>) Bool)
(declare-fun $FVF.loc_field_Program_f ($Ref $Ref) Bool)
(declare-fun $FVF.perm_field_Program_f ($FPM $Ref) $Perm)
(declare-const $fvfTOP_field_Program_f $FVF<$Ref>)
; /field_value_functions_declarations.smt2 [channel_hist_act: Seq[Seq[Int]]]
(declare-fun $FVF.domain_channel_hist_act ($FVF<Seq<Seq<Int>>>) Set<$Ref>)
(declare-fun $FVF.lookup_channel_hist_act ($FVF<Seq<Seq<Int>>> $Ref) Seq<Seq<Int>>)
(declare-fun $FVF.after_channel_hist_act ($FVF<Seq<Seq<Int>>> $FVF<Seq<Seq<Int>>>) Bool)
(declare-fun $FVF.loc_channel_hist_act (Seq<Seq<Int>> $Ref) Bool)
(declare-fun $FVF.perm_channel_hist_act ($FPM $Ref) $Perm)
(declare-const $fvfTOP_channel_hist_act $FVF<Seq<Seq<Int>>>)
; /field_value_functions_declarations.smt2 [results_hist_value: Seq[Int]]
(declare-fun $FVF.domain_results_hist_value ($FVF<Seq<Int>>) Set<$Ref>)
(declare-fun $FVF.lookup_results_hist_value ($FVF<Seq<Int>> $Ref) Seq<Int>)
(declare-fun $FVF.after_results_hist_value ($FVF<Seq<Int>> $FVF<Seq<Int>>) Bool)
(declare-fun $FVF.loc_results_hist_value (Seq<Int> $Ref) Bool)
(declare-fun $FVF.perm_results_hist_value ($FPM $Ref) $Perm)
(declare-const $fvfTOP_results_hist_value $FVF<Seq<Int>>)
; /field_value_functions_declarations.smt2 [results_hist_act: Seq[Int]]
(declare-fun $FVF.domain_results_hist_act ($FVF<Seq<Int>>) Set<$Ref>)
(declare-fun $FVF.lookup_results_hist_act ($FVF<Seq<Int>> $Ref) Seq<Int>)
(declare-fun $FVF.after_results_hist_act ($FVF<Seq<Int>> $FVF<Seq<Int>>) Bool)
(declare-fun $FVF.loc_results_hist_act (Seq<Int> $Ref) Bool)
(declare-fun $FVF.perm_results_hist_act ($FPM $Ref) $Perm)
(declare-const $fvfTOP_results_hist_act $FVF<Seq<Int>>)
; /field_value_functions_declarations.smt2 [results_hist_init: Seq[Int]]
(declare-fun $FVF.domain_results_hist_init ($FVF<Seq<Int>>) Set<$Ref>)
(declare-fun $FVF.lookup_results_hist_init ($FVF<Seq<Int>> $Ref) Seq<Int>)
(declare-fun $FVF.after_results_hist_init ($FVF<Seq<Int>> $FVF<Seq<Int>>) Bool)
(declare-fun $FVF.loc_results_hist_init (Seq<Int> $Ref) Bool)
(declare-fun $FVF.perm_results_hist_init ($FPM $Ref) $Perm)
(declare-const $fvfTOP_results_hist_init $FVF<Seq<Int>>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun method_Program_update__Sequence$Integer$__Integer__Integer ($Snap Seq<Int> Int Int) Seq<Int>)
(declare-fun method_Program_update__Sequence$Integer$__Integer__Integer%limited ($Snap Seq<Int> Int Int) Seq<Int>)
(declare-fun method_Program_update__Sequence$Integer$__Integer__Integer%stateless (Seq<Int> Int Int) Bool)
(declare-fun new_frac ($Snap $Perm) frac)
(declare-fun new_frac%limited ($Snap $Perm) frac)
(declare-fun new_frac%stateless ($Perm) Bool)
(declare-fun method_Program_push__Sequence$Sequence$Integer$$__Integer__Integer ($Snap $Ref Seq<Seq<Int>> Int Int) Seq<Seq<Int>>)
(declare-fun method_Program_push__Sequence$Sequence$Integer$$__Integer__Integer%limited ($Snap $Ref Seq<Seq<Int>> Int Int) Seq<Seq<Int>>)
(declare-fun method_Program_push__Sequence$Sequence$Integer$$__Integer__Integer%stateless ($Ref Seq<Seq<Int>> Int Int) Bool)
(declare-fun method_Program_maxint__Sequence$Integer$__Integer__Integer ($Snap Seq<Int> Int Int) Int)
(declare-fun method_Program_maxint__Sequence$Integer$__Integer__Integer%limited ($Snap Seq<Int> Int Int) Int)
(declare-fun method_Program_maxint__Sequence$Integer$__Integer__Integer%stateless (Seq<Int> Int Int) Bool)
(declare-fun new_zfrac ($Snap $Perm) zfrac)
(declare-fun new_zfrac%limited ($Snap $Perm) zfrac)
(declare-fun new_zfrac%stateless ($Perm) Bool)
(declare-fun method_Program_pop__Sequence$Sequence$Integer$$__Integer ($Snap $Ref Seq<Seq<Int>> Int) Seq<Seq<Int>>)
(declare-fun method_Program_pop__Sequence$Sequence$Integer$$__Integer%limited ($Snap $Ref Seq<Seq<Int>> Int) Seq<Seq<Int>>)
(declare-fun method_Program_pop__Sequence$Sequence$Integer$$__Integer%stateless ($Ref Seq<Seq<Int>> Int) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun hist_do_method_Future_Send__Integer__Integer%trigger ($Snap $Ref frac Process) Bool)
(declare-fun hist_do_method_Future_Recv__Integer__Integer%trigger ($Snap $Ref frac Process) Bool)
(declare-fun hist_do_method_Future_Done__Integer__Integer%trigger ($Snap $Ref frac Process) Bool)
(declare-fun hist_idle%trigger ($Snap $Ref frac Process) Bool)
(declare-fun method_Program_lock_held%trigger ($Snap $Ref $Ref) Bool)
(declare-fun method_Program_lock_invariant%trigger ($Snap $Ref $Ref) Bool)
(declare-fun method_Main_joinToken%trigger ($Snap $Ref $Ref) Bool)
(declare-fun method_Main_idleToken%trigger ($Snap $Ref $Ref) Bool)
; ////////// Uniqueness assumptions from domains
; ////////// Axioms
(assert (forall ((s Seq<Int>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.seq_length_non_negative|)))
(assert (= (Seq_length (as Seq_empty  Seq<Int>)) 0))
(assert (forall ((s Seq<Int>)) (!
  (implies (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_length s))
  :qid |$Seq[Int]_prog.only_empty_seq_length_zero|)))
(assert (forall ((e Int)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_length (Seq_singleton e)))
  :qid |$Seq[Int]_prog.length_singleton_seq|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (= (Seq_length (Seq_build s e)) (+ 1 (Seq_length s)))
  :pattern ((Seq_length (Seq_build s e)))
  :qid |$Seq[Int]_prog.length_seq_build_inc_by_one|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (ite
    (= i (Seq_length s))
    (= (Seq_index (Seq_build s e) i) e)
    (= (Seq_index (Seq_build s e) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_build s e) i))
  :qid |$Seq[Int]_prog.seq_index_over_build|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (= (Seq_length (Seq_append s1 s2)) (+ (Seq_length s1) (Seq_length s2))))
  :pattern ((Seq_length (Seq_append s1 s2)))
  :qid |$Seq[Int]_prog.seq_length_over_append|)))
(assert (forall ((e Int)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_index (Seq_singleton e) 0))
  :qid |$Seq[Int]_prog.seq_index_over_singleton|)))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_singleton e1) e2) (= e1 e2))
  :pattern ((Seq_contains (Seq_singleton e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_singleton|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append (as Seq_empty  Seq<Int>) s) s)
  :pattern ((Seq_append (as Seq_empty  Seq<Int>) s))
  :qid |$Seq[Int]_prog.seq_append_empty_left|)))
(assert (forall ((s Seq<Int>)) (!
  (= (Seq_append s (as Seq_empty  Seq<Int>)) s)
  :pattern ((Seq_append s (as Seq_empty  Seq<Int>)))
  :qid |$Seq[Int]_prog.seq_append_empty_right|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (i Int)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Int>)))
      (not (= s2 (as Seq_empty  Seq<Int>))))
    (ite
      (< i (Seq_length s1))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s1 i))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s2 (- i (Seq_length s1))))))
  :pattern ((Seq_index (Seq_append s1 s2) i))
  :pattern ((Seq_index s1 i) (Seq_append s1 s2))
  :qid |$Seq[Int]_prog.seq_index_over_append|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int)) (!
  (implies
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i e)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i e)))
  :qid |$Seq[Int]_prog.seq_length_invariant_over_update|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (j Int)) (!
  (ite
    (implies (and (<= 0 i) (< i (Seq_length s))) (= i j))
    (= (Seq_index (Seq_update s i e) j) e)
    (= (Seq_index (Seq_update s i e) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_update s i e) j))
  :qid |$Seq[Int]_prog.seq_index_over_update|)))
(assert (forall ((s Seq<Int>) (e Int)) (!
  (=
    (Seq_contains s e)
    (exists ((i Int)) (!
      (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) e)))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains s e))
  :qid |$Seq[Int]_prog.seq_element_contains_index_exists|)))
(assert (forall ((e Int)) (!
  (not (Seq_contains (as Seq_empty  Seq<Int>) e))
  :pattern ((Seq_contains (as Seq_empty  Seq<Int>) e))
  :qid |$Seq[Int]_prog.empty_seq_contains_nothing|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (e Int)) (!
  (=
    (Seq_contains (Seq_append s1 s2) e)
    (or (Seq_contains s1 e) (Seq_contains s2 e)))
  :pattern ((Seq_contains (Seq_append s1 s2) e))
  :qid |$Seq[Int]_prog.seq_contains_over_append|)))
(assert (forall ((s Seq<Int>) (e1 Int) (e2 Int)) (!
  (= (Seq_contains (Seq_build s e1) e2) (or (= e1 e2) (Seq_contains s e2)))
  :pattern ((Seq_contains (Seq_build s e1) e2))
  :qid |$Seq[Int]_prog.seq_contains_over_build|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_take s n))
  :qid |$Seq[Int]_prog.seq_take_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_take s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (< i n) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_take s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_take_index_exists|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_drop_negative_length|)))
(assert (forall ((s Seq<Int>) (n Int) (e Int)) (!
  (=
    (Seq_contains (Seq_drop s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (<= n i) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_drop s n) e))
  :qid |$Seq[Int]_prog.seq_contains_over_drop_index_exists|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (=
    (Seq_equal s1 s2)
    (and
      (= (Seq_length s1) (Seq_length s2))
      (forall ((i Int)) (!
        (implies
          (and (<= 0 i) (< i (Seq_length s1)))
          (= (Seq_index s1 i) (Seq_index s2 i)))
        :pattern ((Seq_index s1 i))
        :pattern ((Seq_index s2 i))
        ))))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.extensional_seq_equality|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>)) (!
  (implies (Seq_equal s1 s2) (= s1 s2))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Int]_prog.seq_equality_identity|)))
(assert (forall ((s1 Seq<Int>) (s2 Seq<Int>) (n Int)) (!
  (=
    (Seq_sameuntil s1 s2 n)
    (forall ((i Int)) (!
      (implies (and (<= 0 i) (< i n)) (= (Seq_index s1 i) (Seq_index s2 i)))
      :pattern ((Seq_index s1 i))
      :pattern ((Seq_index s2 i))
      )))
  :pattern ((Seq_sameuntil s1 s2 n))
  :qid |$Seq[Int]_prog.extensional_seq_equality_prefix|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_take s n)) n)
      (= (Seq_length (Seq_take s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_take s n)))
  :qid |$Seq[Int]_prog.seq_length_over_take|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< i (Seq_length s))))
    (= (Seq_index (Seq_take s n) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_take s n) i))
  :pattern ((Seq_index s i) (Seq_take s n))
  :qid |$Seq[Int]_prog.seq_index_over_take|)))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n))
      (= (Seq_length (Seq_drop s n)) 0)))
  :pattern ((Seq_length (Seq_drop s n)))
  :qid |$Seq[Int]_prog.seq_length_over_drop|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= 0 i) (< i (- (Seq_length s) n))))
    (= (Seq_index (Seq_drop s n) i) (Seq_index s (+ i n))))
  :pattern ((Seq_index (Seq_drop s n) i))
  :qid |$Seq[Int]_prog.seq_index_over_drop_1|)))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_index (Seq_drop s n) (- i n)) (Seq_index s i)))
  :pattern ((Seq_index s i) (Seq_drop s n))
  :qid |$Seq[Int]_prog.seq_index_over_drop_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_take (Seq_update s i e) n) (Seq_update (Seq_take s n) i e)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= n i) (< i (Seq_length s)))
    (= (Seq_take (Seq_update s i e) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_take_over_update_2|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_update (Seq_drop s n) (- i n) e)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_1|)))
(assert (forall ((s Seq<Int>) (i Int) (e Int) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_drop s n)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_update_2|)))
(assert (forall ((s Seq<Int>) (e Int) (n Int)) (!
  (implies
    (and (<= 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_build s e) n) (Seq_build (Seq_drop s n) e)))
  :pattern ((Seq_drop (Seq_build s e) n))
  :qid |$Seq[Int]_prog.seq_drop_over_build|)))
(assert (forall ((min_ Int) (max Int)) (!
  (ite
    (< min_ max)
    (= (Seq_length (Seq_range min_ max)) (- max min_))
    (= (Seq_length (Seq_range min_ max)) 0))
  :pattern ((Seq_length (Seq_range min_ max)))
  :qid |$Seq[Int]_prog.ranged_seq_length|)))
(assert (forall ((min_ Int) (max Int) (i Int)) (!
  (implies
    (and (<= 0 i) (< i (- max min_)))
    (= (Seq_index (Seq_range min_ max) i) (+ min_ i)))
  :pattern ((Seq_index (Seq_range min_ max) i))
  :qid |$Seq[Int]_prog.ranged_seq_index|)))
(assert (forall ((min_ Int) (max Int) (e Int)) (!
  (= (Seq_contains (Seq_range min_ max) e) (and (<= min_ e) (< e max)))
  :pattern ((Seq_contains (Seq_range min_ max) e))
  :qid |$Seq[Int]_prog.ranged_seq_contains|)))
(assert (forall ((s Seq<Seq<Int>>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  :qid |$Seq[Seq[Int]]_prog.seq_length_non_negative|)))
(assert (= (Seq_length (as Seq_empty  Seq<Seq<Int>>)) 0))
(assert (forall ((s Seq<Seq<Int>>)) (!
  (implies (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Seq<Int>>)))
  :pattern ((Seq_length s))
  :qid |$Seq[Seq[Int]]_prog.only_empty_seq_length_zero|)))
(assert (forall ((e Seq<Int>)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_length (Seq_singleton e)))
  :qid |$Seq[Seq[Int]]_prog.length_singleton_seq|)))
(assert (forall ((s Seq<Seq<Int>>) (e Seq<Int>)) (!
  (= (Seq_length (Seq_build s e)) (+ 1 (Seq_length s)))
  :pattern ((Seq_length (Seq_build s e)))
  :qid |$Seq[Seq[Int]]_prog.length_seq_build_inc_by_one|)))
(assert (forall ((s Seq<Seq<Int>>) (i Int) (e Seq<Int>)) (!
  (ite
    (= i (Seq_length s))
    (= (Seq_index (Seq_build s e) i) e)
    (= (Seq_index (Seq_build s e) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_build s e) i))
  :qid |$Seq[Seq[Int]]_prog.seq_index_over_build|)))
(assert (forall ((s1 Seq<Seq<Int>>) (s2 Seq<Seq<Int>>)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Seq<Int>>)))
      (not (= s2 (as Seq_empty  Seq<Seq<Int>>))))
    (= (Seq_length (Seq_append s1 s2)) (+ (Seq_length s1) (Seq_length s2))))
  :pattern ((Seq_length (Seq_append s1 s2)))
  :qid |$Seq[Seq[Int]]_prog.seq_length_over_append|)))
(assert (forall ((e Seq<Int>)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_index (Seq_singleton e) 0))
  :qid |$Seq[Seq[Int]]_prog.seq_index_over_singleton|)))
(assert (forall ((e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Seq_contains (Seq_singleton e1) e2) (= e1 e2))
  :pattern ((Seq_contains (Seq_singleton e1) e2))
  :qid |$Seq[Seq[Int]]_prog.seq_contains_over_singleton|)))
(assert (forall ((s Seq<Seq<Int>>)) (!
  (= (Seq_append (as Seq_empty  Seq<Seq<Int>>) s) s)
  :pattern ((Seq_append (as Seq_empty  Seq<Seq<Int>>) s))
  :qid |$Seq[Seq[Int]]_prog.seq_append_empty_left|)))
(assert (forall ((s Seq<Seq<Int>>)) (!
  (= (Seq_append s (as Seq_empty  Seq<Seq<Int>>)) s)
  :pattern ((Seq_append s (as Seq_empty  Seq<Seq<Int>>)))
  :qid |$Seq[Seq[Int]]_prog.seq_append_empty_right|)))
(assert (forall ((s1 Seq<Seq<Int>>) (s2 Seq<Seq<Int>>) (i Int)) (!
  (implies
    (and
      (not (= s1 (as Seq_empty  Seq<Seq<Int>>)))
      (not (= s2 (as Seq_empty  Seq<Seq<Int>>))))
    (ite
      (< i (Seq_length s1))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s1 i))
      (= (Seq_index (Seq_append s1 s2) i) (Seq_index s2 (- i (Seq_length s1))))))
  :pattern ((Seq_index (Seq_append s1 s2) i))
  :pattern ((Seq_index s1 i) (Seq_append s1 s2))
  :qid |$Seq[Seq[Int]]_prog.seq_index_over_append|)))
(assert (forall ((s Seq<Seq<Int>>) (i Int) (e Seq<Int>)) (!
  (implies
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i e)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i e)))
  :qid |$Seq[Seq[Int]]_prog.seq_length_invariant_over_update|)))
(assert (forall ((s Seq<Seq<Int>>) (i Int) (e Seq<Int>) (j Int)) (!
  (ite
    (implies (and (<= 0 i) (< i (Seq_length s))) (= i j))
    (= (Seq_index (Seq_update s i e) j) e)
    (= (Seq_index (Seq_update s i e) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_update s i e) j))
  :qid |$Seq[Seq[Int]]_prog.seq_index_over_update|)))
(assert (forall ((s Seq<Seq<Int>>) (e Seq<Int>)) (!
  (=
    (Seq_contains s e)
    (exists ((i Int)) (!
      (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) e)))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains s e))
  :qid |$Seq[Seq[Int]]_prog.seq_element_contains_index_exists|)))
(assert (forall ((e Seq<Int>)) (!
  (not (Seq_contains (as Seq_empty  Seq<Seq<Int>>) e))
  :pattern ((Seq_contains (as Seq_empty  Seq<Seq<Int>>) e))
  :qid |$Seq[Seq[Int]]_prog.empty_seq_contains_nothing|)))
(assert (forall ((s1 Seq<Seq<Int>>) (s2 Seq<Seq<Int>>) (e Seq<Int>)) (!
  (=
    (Seq_contains (Seq_append s1 s2) e)
    (or (Seq_contains s1 e) (Seq_contains s2 e)))
  :pattern ((Seq_contains (Seq_append s1 s2) e))
  :qid |$Seq[Seq[Int]]_prog.seq_contains_over_append|)))
(assert (forall ((s Seq<Seq<Int>>) (e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Seq_contains (Seq_build s e1) e2) (or (= e1 e2) (Seq_contains s e2)))
  :pattern ((Seq_contains (Seq_build s e1) e2))
  :qid |$Seq[Seq[Int]]_prog.seq_contains_over_build|)))
(assert (forall ((s Seq<Seq<Int>>) (n Int)) (!
  (implies (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Seq<Int>>)))
  :pattern ((Seq_take s n))
  :qid |$Seq[Seq[Int]]_prog.seq_take_negative_length|)))
(assert (forall ((s Seq<Seq<Int>>) (n Int) (e Seq<Int>)) (!
  (=
    (Seq_contains (Seq_take s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (< i n) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_take s n) e))
  :qid |$Seq[Seq[Int]]_prog.seq_contains_over_take_index_exists|)))
(assert (forall ((s Seq<Seq<Int>>) (n Int)) (!
  (implies (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  :qid |$Seq[Seq[Int]]_prog.seq_drop_negative_length|)))
(assert (forall ((s Seq<Seq<Int>>) (n Int) (e Seq<Int>)) (!
  (=
    (Seq_contains (Seq_drop s n) e)
    (exists ((i Int)) (!
      (and
        (<= 0 i)
        (and (<= n i) (and (< i (Seq_length s)) (= (Seq_index s i) e))))
      :pattern ((Seq_index s i))
      )))
  :pattern ((Seq_contains (Seq_drop s n) e))
  :qid |$Seq[Seq[Int]]_prog.seq_contains_over_drop_index_exists|)))
(assert (forall ((s1 Seq<Seq<Int>>) (s2 Seq<Seq<Int>>)) (!
  (=
    (Seq_equal s1 s2)
    (and
      (= (Seq_length s1) (Seq_length s2))
      (forall ((i Int)) (!
        (implies
          (and (<= 0 i) (< i (Seq_length s1)))
          (= (Seq_index s1 i) (Seq_index s2 i)))
        :pattern ((Seq_index s1 i))
        :pattern ((Seq_index s2 i))
        ))))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Seq[Int]]_prog.extensional_seq_equality|)))
(assert (forall ((s1 Seq<Seq<Int>>) (s2 Seq<Seq<Int>>)) (!
  (implies (Seq_equal s1 s2) (= s1 s2))
  :pattern ((Seq_equal s1 s2))
  :qid |$Seq[Seq[Int]]_prog.seq_equality_identity|)))
(assert (forall ((s1 Seq<Seq<Int>>) (s2 Seq<Seq<Int>>) (n Int)) (!
  (=
    (Seq_sameuntil s1 s2 n)
    (forall ((i Int)) (!
      (implies (and (<= 0 i) (< i n)) (= (Seq_index s1 i) (Seq_index s2 i)))
      :pattern ((Seq_index s1 i))
      :pattern ((Seq_index s2 i))
      )))
  :pattern ((Seq_sameuntil s1 s2 n))
  :qid |$Seq[Seq[Int]]_prog.extensional_seq_equality_prefix|)))
(assert (forall ((s Seq<Seq<Int>>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_take s n)) n)
      (= (Seq_length (Seq_take s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_take s n)))
  :qid |$Seq[Seq[Int]]_prog.seq_length_over_take|)))
(assert (forall ((s Seq<Seq<Int>>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< i (Seq_length s))))
    (= (Seq_index (Seq_take s n) i) (Seq_index s i)))
  :pattern ((Seq_index (Seq_take s n) i))
  :pattern ((Seq_index s i) (Seq_take s n))
  :qid |$Seq[Seq[Int]]_prog.seq_index_over_take|)))
(assert (forall ((s Seq<Seq<Int>>) (n Int)) (!
  (implies
    (<= 0 n)
    (ite
      (<= n (Seq_length s))
      (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n))
      (= (Seq_length (Seq_drop s n)) 0)))
  :pattern ((Seq_length (Seq_drop s n)))
  :qid |$Seq[Seq[Int]]_prog.seq_length_over_drop|)))
(assert (forall ((s Seq<Seq<Int>>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= 0 i) (< i (- (Seq_length s) n))))
    (= (Seq_index (Seq_drop s n) i) (Seq_index s (+ i n))))
  :pattern ((Seq_index (Seq_drop s n) i))
  :qid |$Seq[Seq[Int]]_prog.seq_index_over_drop_1|)))
(assert (forall ((s Seq<Seq<Int>>) (n Int) (i Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_index (Seq_drop s n) (- i n)) (Seq_index s i)))
  :pattern ((Seq_index s i) (Seq_drop s n))
  :qid |$Seq[Seq[Int]]_prog.seq_index_over_drop_2|)))
(assert (forall ((s Seq<Seq<Int>>) (i Int) (e Seq<Int>) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_take (Seq_update s i e) n) (Seq_update (Seq_take s n) i e)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Seq[Int]]_prog.seq_take_over_update_1|)))
(assert (forall ((s Seq<Seq<Int>>) (i Int) (e Seq<Int>) (n Int)) (!
  (implies
    (and (<= n i) (< i (Seq_length s)))
    (= (Seq_take (Seq_update s i e) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_update s i e) n))
  :qid |$Seq[Seq[Int]]_prog.seq_take_over_update_2|)))
(assert (forall ((s Seq<Seq<Int>>) (i Int) (e Seq<Int>) (n Int)) (!
  (implies
    (and (<= 0 n) (and (<= n i) (< i (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_update (Seq_drop s n) (- i n) e)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Seq[Int]]_prog.seq_drop_over_update_1|)))
(assert (forall ((s Seq<Seq<Int>>) (i Int) (e Seq<Int>) (n Int)) (!
  (implies
    (and (<= 0 i) (and (< i n) (< n (Seq_length s))))
    (= (Seq_drop (Seq_update s i e) n) (Seq_drop s n)))
  :pattern ((Seq_drop (Seq_update s i e) n))
  :qid |$Seq[Seq[Int]]_prog.seq_drop_over_update_2|)))
(assert (forall ((s Seq<Seq<Int>>) (e Seq<Int>) (n Int)) (!
  (implies
    (and (<= 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_build s e) n) (Seq_build (Seq_drop s n) e)))
  :pattern ((Seq_drop (Seq_build s e) n))
  :qid |$Seq[Seq[Int]]_prog.seq_drop_over_build|)))
(assert (forall ((s Set<Seq<Seq<Int>>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Seq[Int]]]_prog.card_non_negative|)))
(assert (forall ((e Seq<Seq<Int>>)) (!
  (not (Set_in e (as Set_empty  Set<Seq<Seq<Int>>>)))
  :pattern ((Set_in e (as Set_empty  Set<Seq<Seq<Int>>>)))
  :qid |$Set[Seq[Seq[Int]]]_prog.in_empty_set|)))
(assert (forall ((s Set<Seq<Seq<Int>>>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Seq<Seq<Int>>>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Seq<Seq<Int>>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Seq[Int]]]_prog.empty_set_cardinality|)))
(assert (forall ((e Seq<Seq<Int>>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Seq[Seq[Int]]]_prog.in_singleton_set|)))
(assert (forall ((e1 Seq<Seq<Int>>) (e2 Seq<Seq<Int>>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Seq[Seq[Int]]]_prog.in_singleton_set_equality|)))
(assert (forall ((e Seq<Seq<Int>>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Seq[Seq[Int]]]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Seq<Seq<Int>>>) (e Seq<Seq<Int>>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Seq[Seq[Int]]]_prog.in_unionone_same|)))
(assert (forall ((s Set<Seq<Seq<Int>>>) (e1 Seq<Seq<Int>>) (e2 Seq<Seq<Int>>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Seq[Seq[Int]]]_prog.in_unionone_other|)))
(assert (forall ((s Set<Seq<Seq<Int>>>) (e1 Seq<Seq<Int>>) (e2 Seq<Seq<Int>>)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Seq[Seq[Int]]]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Seq<Seq<Int>>>) (e Seq<Seq<Int>>)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Seq[Int]]]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Seq<Seq<Int>>>) (e Seq<Seq<Int>>)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Seq[Int]]]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Seq<Seq<Int>>>) (s2 Set<Seq<Seq<Int>>>) (e Seq<Seq<Int>>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Seq[Seq[Int]]]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Seq<Seq<Int>>>) (s2 Set<Seq<Seq<Int>>>) (e Seq<Seq<Int>>)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Seq[Seq[Int]]]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Seq<Seq<Int>>>) (s2 Set<Seq<Seq<Int>>>) (e Seq<Seq<Int>>)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Seq[Seq[Int]]]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Seq<Seq<Int>>>) (s2 Set<Seq<Seq<Int>>>) (e Seq<Seq<Int>>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Seq[Int]]]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Seq<Seq<Int>>>) (s2 Set<Seq<Seq<Int>>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Seq[Seq[Int]]]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Seq<Int>>>) (s2 Set<Seq<Seq<Int>>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Seq[Seq[Int]]]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Seq<Int>>>) (s2 Set<Seq<Seq<Int>>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Seq[Seq[Int]]]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Seq<Int>>>) (s2 Set<Seq<Seq<Int>>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Seq[Seq[Int]]]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Seq<Int>>>) (s2 Set<Seq<Seq<Int>>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Seq[Seq[Int]]]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Seq<Seq<Int>>>) (s2 Set<Seq<Seq<Int>>>) (e Seq<Seq<Int>>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Seq[Seq[Int]]]_prog.in_difference|)))
(assert (forall ((s1 Set<Seq<Seq<Int>>>) (s2 Set<Seq<Seq<Int>>>) (e Seq<Seq<Int>>)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Seq[Int]]]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Seq<Seq<Int>>>) (s2 Set<Seq<Seq<Int>>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Seq<Seq<Int>>)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Seq[Seq[Int]]]_prog.subset_definition|)))
(assert (forall ((s1 Set<Seq<Seq<Int>>>) (s2 Set<Seq<Seq<Int>>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Seq<Seq<Int>>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Seq[Int]]]_prog.equality_definition|)))
(assert (forall ((s1 Set<Seq<Seq<Int>>>) (s2 Set<Seq<Seq<Int>>>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Seq[Int]]]_prog.native_equality|)))
(assert (forall ((s1 Set<Seq<Seq<Int>>>) (s2 Set<Seq<Seq<Int>>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Seq<Seq<Int>>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Seq[Seq[Int]]]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Seq<Seq<Int>>>) (s2 Set<Seq<Seq<Int>>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Seq[Seq[Int]]]_prog.cardinality_difference|)))
(assert (forall ((s Set<Seq<Int>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Int]]_prog.card_non_negative|)))
(assert (forall ((e Seq<Int>)) (!
  (not (Set_in e (as Set_empty  Set<Seq<Int>>)))
  :pattern ((Set_in e (as Set_empty  Set<Seq<Int>>)))
  :qid |$Set[Seq[Int]]_prog.in_empty_set|)))
(assert (forall ((s Set<Seq<Int>>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Seq<Int>>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Seq<Int>)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Seq[Int]]_prog.empty_set_cardinality|)))
(assert (forall ((e Seq<Int>)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Seq[Int]]_prog.in_singleton_set|)))
(assert (forall ((e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Seq[Int]]_prog.in_singleton_set_equality|)))
(assert (forall ((e Seq<Int>)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Seq[Int]]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Seq[Int]]_prog.in_unionone_same|)))
(assert (forall ((s Set<Seq<Int>>) (e1 Seq<Int>) (e2 Seq<Int>)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Seq[Int]]_prog.in_unionone_other|)))
(assert (forall ((s Set<Seq<Int>>) (e1 Seq<Int>) (e2 Seq<Int>)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Seq[Int]]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Int]]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Seq[Int]]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Seq[Int]]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Seq[Int]]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Seq[Int]]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Int]]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Seq[Int]]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Seq[Int]]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Seq[Int]]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Seq[Int]]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Seq[Int]]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Seq[Int]]_prog.in_difference|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>) (e Seq<Int>)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Seq[Int]]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Seq<Int>)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Seq[Int]]_prog.subset_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Seq<Int>)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Int]]_prog.equality_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Seq[Int]]_prog.native_equality|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Seq<Int>)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Seq[Int]]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Seq<Int>>) (s2 Set<Seq<Int>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Seq[Int]]_prog.cardinality_difference|)))
(assert (forall ((s Set<Bool>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.card_non_negative|)))
(assert (forall ((e Bool)) (!
  (not (Set_in e (as Set_empty  Set<Bool>)))
  :pattern ((Set_in e (as Set_empty  Set<Bool>)))
  :qid |$Set[Bool]_prog.in_empty_set|)))
(assert (forall ((s Set<Bool>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Bool>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Bool)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Bool]_prog.empty_set_cardinality|)))
(assert (forall ((e Bool)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Bool]_prog.in_singleton_set|)))
(assert (forall ((e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Bool]_prog.in_singleton_set_equality|)))
(assert (forall ((e Bool)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Bool]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Bool]_prog.in_unionone_same|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Bool]_prog.in_unionone_other|)))
(assert (forall ((s Set<Bool>) (e1 Bool) (e2 Bool)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Bool]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Bool>) (e Bool)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Bool]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Bool]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Bool]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Bool]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Bool]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>) (e Bool)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Bool]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Bool)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Bool]_prog.subset_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Bool)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.equality_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Bool]_prog.native_equality|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Bool)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Bool]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Bool>) (s2 Set<Bool>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Bool]_prog.cardinality_difference|)))
(assert (forall ((s Set<Int>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Int]_prog.card_non_negative|)))
(assert (forall ((e Int)) (!
  (not (Set_in e (as Set_empty  Set<Int>)))
  :pattern ((Set_in e (as Set_empty  Set<Int>)))
  :qid |$Set[Int]_prog.in_empty_set|)))
(assert (forall ((s Set<Int>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<Int>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e Int)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Int]_prog.empty_set_cardinality|)))
(assert (forall ((e Int)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Int]_prog.in_singleton_set|)))
(assert (forall ((e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Int]_prog.in_singleton_set_equality|)))
(assert (forall ((e Int)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Int]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Int]_prog.in_unionone_same|)))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Int]_prog.in_unionone_other|)))
(assert (forall ((s Set<Int>) (e1 Int) (e2 Int)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Int]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Int]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<Int>) (e Int)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Int]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Int]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Int]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Int]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Int]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Int]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Int]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Int]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Int]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Int]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Int]_prog.in_difference|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>) (e Int)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Int]_prog.not_in_difference|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e Int)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Int]_prog.subset_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e Int)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Int]_prog.equality_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Int]_prog.native_equality|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e Int)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Int]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<Int>) (s2 Set<Int>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Int]_prog.cardinality_difference|)))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.card_non_negative|)))
(assert (forall ((e $Ref)) (!
  (not (Set_in e (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in e (as Set_empty  Set<$Ref>)))
  :qid |$Set[Ref]_prog.in_empty_set|)))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Ref)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Ref]_prog.empty_set_cardinality|)))
(assert (forall ((e $Ref)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Ref]_prog.in_singleton_set|)))
(assert (forall ((e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Ref]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Ref)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Ref]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Ref]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Ref]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Ref>) (e1 $Ref) (e2 $Ref)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Ref]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Ref>) (e $Ref)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Ref]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Ref]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Ref]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Ref]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Ref]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>) (e $Ref)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Ref]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Ref)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Ref]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Ref)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Ref]_prog.native_equality|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Ref)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Ref]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Ref>) (s2 Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Ref]_prog.cardinality_difference|)))
(assert (forall ((s Set<frac>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[frac]_prog.card_non_negative|)))
(assert (forall ((e frac)) (!
  (not (Set_in e (as Set_empty  Set<frac>)))
  :pattern ((Set_in e (as Set_empty  Set<frac>)))
  :qid |$Set[frac]_prog.in_empty_set|)))
(assert (forall ((s Set<frac>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<frac>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e frac)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[frac]_prog.empty_set_cardinality|)))
(assert (forall ((e frac)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[frac]_prog.in_singleton_set|)))
(assert (forall ((e1 frac) (e2 frac)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[frac]_prog.in_singleton_set_equality|)))
(assert (forall ((e frac)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[frac]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<frac>) (e frac)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[frac]_prog.in_unionone_same|)))
(assert (forall ((s Set<frac>) (e1 frac) (e2 frac)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[frac]_prog.in_unionone_other|)))
(assert (forall ((s Set<frac>) (e1 frac) (e2 frac)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[frac]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<frac>) (e frac)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[frac]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<frac>) (e frac)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[frac]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<frac>) (s2 Set<frac>) (e frac)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[frac]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<frac>) (s2 Set<frac>) (e frac)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[frac]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<frac>) (s2 Set<frac>) (e frac)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[frac]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<frac>) (s2 Set<frac>) (e frac)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[frac]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<frac>) (s2 Set<frac>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[frac]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<frac>) (s2 Set<frac>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[frac]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<frac>) (s2 Set<frac>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[frac]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<frac>) (s2 Set<frac>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[frac]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<frac>) (s2 Set<frac>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[frac]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<frac>) (s2 Set<frac>) (e frac)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[frac]_prog.in_difference|)))
(assert (forall ((s1 Set<frac>) (s2 Set<frac>) (e frac)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[frac]_prog.not_in_difference|)))
(assert (forall ((s1 Set<frac>) (s2 Set<frac>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e frac)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[frac]_prog.subset_definition|)))
(assert (forall ((s1 Set<frac>) (s2 Set<frac>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e frac)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[frac]_prog.equality_definition|)))
(assert (forall ((s1 Set<frac>) (s2 Set<frac>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[frac]_prog.native_equality|)))
(assert (forall ((s1 Set<frac>) (s2 Set<frac>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e frac)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[frac]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<frac>) (s2 Set<frac>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[frac]_prog.cardinality_difference|)))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.card_non_negative|)))
(assert (forall ((e $Snap)) (!
  (not (Set_in e (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in e (as Set_empty  Set<$Snap>)))
  :qid |$Set[Snap]_prog.in_empty_set|)))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (= (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (implies
      (not (= (Set_card s) 0))
      (exists ((e $Snap)) (!
        (Set_in e s)
        :pattern ((Set_in e s))
        ))))
  :pattern ((Set_card s))
  :qid |$Set[Snap]_prog.empty_set_cardinality|)))
(assert (forall ((e $Snap)) (!
  (Set_in e (Set_singleton e))
  :pattern ((Set_singleton e))
  :qid |$Set[Snap]_prog.in_singleton_set|)))
(assert (forall ((e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_singleton e2)) (= e1 e2))
  :pattern ((Set_in e1 (Set_singleton e2)))
  :qid |$Set[Snap]_prog.in_singleton_set_equality|)))
(assert (forall ((e $Snap)) (!
  (= (Set_card (Set_singleton e)) 1)
  :pattern ((Set_card (Set_singleton e)))
  :qid |$Set[Snap]_prog.singleton_set_cardinality|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (Set_in e (Set_unionone s e))
  :pattern ((Set_unionone s e))
  :qid |$Set[Snap]_prog.in_unionone_same|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (= (Set_in e1 (Set_unionone s e2)) (or (= e1 e2) (Set_in e1 s)))
  :pattern ((Set_in e1 (Set_unionone s e2)))
  :qid |$Set[Snap]_prog.in_unionone_other|)))
(assert (forall ((s Set<$Snap>) (e1 $Snap) (e2 $Snap)) (!
  (implies (Set_in e1 s) (Set_in e1 (Set_unionone s e2)))
  :pattern ((Set_in e1 s) (Set_unionone s e2))
  :qid |$Set[Snap]_prog.invariance_in_unionone|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s) (= (Set_card (Set_unionone s e)) (Set_card s)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_invariant|)))
(assert (forall ((s Set<$Snap>) (e $Snap)) (!
  (implies
    (not (Set_in e s))
    (= (Set_card (Set_unionone s e)) (+ (Set_card s) 1)))
  :pattern ((Set_card (Set_unionone s e)))
  :qid |$Set[Snap]_prog.unionone_cardinality_changed|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_union s1 s2)) (or (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.in_union_in_one|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s1) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s1) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_left_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (Set_in e (Set_union s1 s2)))
  :pattern ((Set_in e s2) (Set_union s1 s2))
  :qid |$Set[Snap]_prog.in_right_in_union|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_intersection s1 s2)) (and (Set_in e s1) (Set_in e s2)))
  :pattern ((Set_in e (Set_intersection s1 s2)))
  :pattern ((Set_intersection s1 s2) (Set_in e s1))
  :pattern ((Set_intersection s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.in_intersection_in_both|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union s1 (Set_union s1 s2)) (Set_union s1 s2))
  :pattern ((Set_union s1 (Set_union s1 s2)))
  :qid |$Set[Snap]_prog.union_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_union (Set_union s1 s2) s2) (Set_union s1 s2))
  :pattern ((Set_union (Set_union s1 s2) s2))
  :qid |$Set[Snap]_prog.union_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection s1 (Set_intersection s1 s2)) (Set_intersection s1 s2))
  :pattern ((Set_intersection s1 (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.intersection_left_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection s1 s2) s2) (Set_intersection s1 s2))
  :pattern ((Set_intersection (Set_intersection s1 s2) s2))
  :qid |$Set[Snap]_prog.intersection_right_idempotency|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union s1 s2)) (Set_card (Set_intersection s1 s2)))
    (+ (Set_card s1) (Set_card s2)))
  :pattern ((Set_card (Set_union s1 s2)))
  :pattern ((Set_card (Set_intersection s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_sums|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (= (Set_in e (Set_difference s1 s2)) (and (Set_in e s1) (not (Set_in e s2))))
  :pattern ((Set_in e (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>) (e $Snap)) (!
  (implies (Set_in e s2) (not (Set_in e (Set_difference s1 s2))))
  :pattern ((Set_difference s1 s2) (Set_in e s2))
  :qid |$Set[Snap]_prog.not_in_difference|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_subset s1 s2)
    (forall ((e $Snap)) (!
      (implies (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_subset s1 s2))
  :qid |$Set[Snap]_prog.subset_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_equal s1 s2)
    (forall ((e $Snap)) (!
      (= (Set_in e s1) (Set_in e s2))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.equality_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (implies (Set_equal s1 s2) (= s1 s2))
  :pattern ((Set_equal s1 s2))
  :qid |$Set[Snap]_prog.native_equality|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (=
    (Set_disjoint s1 s2)
    (forall ((e $Snap)) (!
      (or (not (Set_in e s1)) (not (Set_in e s2)))
      :pattern ((Set_in e s1))
      :pattern ((Set_in e s2))
      )))
  :pattern ((Set_disjoint s1 s2))
  :qid |$Set[Snap]_prog.disjointness_definition|)))
(assert (forall ((s1 Set<$Snap>) (s2 Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference s1 s2)) (Set_card (Set_difference s2 s1)))
        (Set_card (Set_intersection s1 s2)))
      (Set_card (Set_union s1 s2)))
    (=
      (Set_card (Set_difference s1 s2))
      (- (Set_card s1) (Set_card (Set_intersection s1 s2)))))
  :pattern ((Set_card (Set_difference s1 s2)))
  :qid |$Set[Snap]_prog.cardinality_difference|)))
(assert (forall ((a zfrac) (b zfrac)) (!
  (= (= (zfrac_val<Perm> a) (zfrac_val<Perm> b)) (= a b))
  :pattern ((zfrac_val<Perm> a) (zfrac_val<Perm> b))
  :qid |prog.zfrac_eq|)))
(assert (forall ((a zfrac)) (!
  (and (<= $Perm.No (zfrac_val<Perm> a)) (<= (zfrac_val<Perm> a) $Perm.Write))
  :pattern ((zfrac_val<Perm> a))
  :qid |prog.zfrac_bound|)))
(assert (forall ((a frac) (b frac)) (!
  (= (= (frac_val<Perm> a) (frac_val<Perm> b)) (= a b))
  :pattern ((frac_val<Perm> a) (frac_val<Perm> b))
  :qid |prog.frac_eq|)))
(assert (forall ((a frac)) (!
  (and (< $Perm.No (frac_val<Perm> a)) (<= (frac_val<Perm> a) $Perm.Write))
  :pattern ((frac_val<Perm> a))
  :qid |prog.frac_bound|)))
(assert (forall ((p Process)) (!
  (= (p_merge<Process> (as p_empty<Process>  Process) p) p)
  :pattern ((p_merge<Process> (as p_empty<Process>  Process) p))
  :qid |prog.empty_1L|)))
(assert (forall ((p Process)) (!
  (= (p_seq<Process> (as p_empty<Process>  Process) p) p)
  :pattern ((p_seq<Process> (as p_empty<Process>  Process) p))
  :qid |prog.empty_2L|)))
(assert (forall ((p Process)) (!
  (= (p_seq<Process> p (as p_empty<Process>  Process)) p)
  :pattern ((p_seq<Process> p (as p_empty<Process>  Process)))
  :qid |prog.empty_2R|)))
(assert (forall ((p1 Process) (p2 Process)) (!
  (p_is_choice<Bool> (p_choice<Process> p1 p2) p1)
  :pattern ((p_is_choice<Bool> (p_choice<Process> p1 p2) p1))
  :qid |prog.choice_L|)))
(assert (forall ((p1 Process) (p2 Process)) (!
  (p_is_choice<Bool> (p_choice<Process> p1 p2) p2)
  :pattern ((p_is_choice<Bool> (p_choice<Process> p1 p2) p2))
  :qid |prog.choice_R|)))
(assert (forall ((p1 Process) (p2 Process) (p3 Process)) (!
  (=
    (p_seq<Process> (p_choice<Process> p1 p2) p3)
    (p_choice<Process> (p_seq<Process> p1 p3) (p_seq<Process> p2 p3)))
  :pattern ((p_seq<Process> (p_choice<Process> p1 p2) p3))
  :qid |prog.choice_dist|)))
(assert (forall ((p1 Process) (p2 Process) (p3 Process)) (!
  (=
    (p_seq<Process> (p_seq<Process> p1 p2) p3)
    (p_seq<Process> p1 (p_seq<Process> p2 p3)))
  :pattern ((p_seq<Process> (p_seq<Process> p1 p2) p3))
  :qid |prog.seq_assoc|)))
(assert (forall ((p Process) (rank Int) (msg Int)) (!
  (=
    (p_seq<Process> p (p_method_Future_Send__Integer__Integer<Process> rank msg))
    (p_seq<Process> p (p_seq<Process> (p_method_Future_Send__Integer__Integer<Process> rank msg) (as p_empty<Process>  Process))))
  :pattern ((p_seq<Process> p (p_method_Future_Send__Integer__Integer<Process> rank msg)))
  :qid |prog.method_Future_Send__Integer__Integer_def_2|)))
(assert (forall ((p Process) (rank Int) (msg Int)) (!
  (=
    (p_seq<Process> p (p_method_Future_Recv__Integer__Integer<Process> rank msg))
    (p_seq<Process> p (p_seq<Process> (p_method_Future_Recv__Integer__Integer<Process> rank msg) (as p_empty<Process>  Process))))
  :pattern ((p_seq<Process> p (p_method_Future_Recv__Integer__Integer<Process> rank msg)))
  :qid |prog.method_Future_Recv__Integer__Integer_def_2|)))
(assert (forall ((p Process) (rank Int) (v Int)) (!
  (=
    (p_seq<Process> p (p_method_Future_Done__Integer__Integer<Process> rank v))
    (p_seq<Process> p (p_seq<Process> (p_method_Future_Done__Integer__Integer<Process> rank v) (as p_empty<Process>  Process))))
  :pattern ((p_seq<Process> p (p_method_Future_Done__Integer__Integer<Process> rank v)))
  :qid |prog.method_Future_Done__Integer__Integer_def_2|)))
(assert (forall ((rank Int) (size Int) (v Int) (w Int) (max Int) (n Int)) (!
  (=
    (ite
      (< 0 w)
      (p_choice<Process> (p_seq<Process> (p_method_Future_Recv__Integer__Integer<Process> (mod
        (- rank 1)
        size) w) (p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer<Process> rank size v w max n)) (p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer<Process> rank size v (-
        w
        1) max n))
      (p_seq<Process> (p_method_Future_Recv__Integer__Integer<Process> (mod
        (- rank 1)
        size) w) (p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer<Process> rank size v w max n)))
    (p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer<Process> rank size v w max n))
  :pattern ((p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer<Process> rank size v w max n))
  :qid |prog.method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer_def_1|)))
(assert (forall ((p Process) (rank Int) (size Int) (v Int) (w Int) (max Int) (n Int)) (!
  (=
    (p_seq<Process> p (p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer<Process> rank size v w max n))
    (p_seq<Process> p (p_seq<Process> (p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer<Process> rank size v w max n) (as p_empty<Process>  Process))))
  :pattern ((p_seq<Process> p (p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer<Process> rank size v w max n)))
  :qid |prog.method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer_def_2|)))
(assert (forall ((rank Int) (size Int) (v Int) (w Int) (max Int) (n Int)) (!
  (=
    (p_method_Future_Elect__Integer__Integer__Integer__Integer__Integer<Process> rank size (ite
      (<= v w)
      w
      v) max (+ n 1))
    (p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer<Process> rank size v w max n))
  :pattern ((p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer<Process> rank size v w max n))
  :qid |prog.method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer_def_1|)))
(assert (forall ((p Process) (rank Int) (size Int) (v Int) (w Int) (max Int) (n Int)) (!
  (=
    (p_seq<Process> p (p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer<Process> rank size v w max n))
    (p_seq<Process> p (p_seq<Process> (p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer<Process> rank size v w max n) (as p_empty<Process>  Process))))
  :pattern ((p_seq<Process> p (p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer<Process> rank size v w max n)))
  :qid |prog.method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer_def_2|)))
(assert (forall ((rank Int) (size Int) (v Int) (max Int) (n Int)) (!
  (=
    (ite
      (< n size)
      (p_seq<Process> (p_method_Future_Send__Integer__Integer<Process> (mod
        (+ rank 1)
        size) v) (p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer<Process> rank size v (-
        max
        1) max n))
      (p_method_Future_Done__Integer__Integer<Process> rank v))
    (p_method_Future_Elect__Integer__Integer__Integer__Integer__Integer<Process> rank size v max n))
  :pattern ((p_method_Future_Elect__Integer__Integer__Integer__Integer__Integer<Process> rank size v max n))
  :qid |prog.method_Future_Elect__Integer__Integer__Integer__Integer__Integer_def_1|)))
(assert (forall ((p Process) (rank Int) (size Int) (v Int) (max Int) (n Int)) (!
  (=
    (p_seq<Process> p (p_method_Future_Elect__Integer__Integer__Integer__Integer__Integer<Process> rank size v max n))
    (p_seq<Process> p (p_seq<Process> (p_method_Future_Elect__Integer__Integer__Integer__Integer__Integer<Process> rank size v max n) (as p_empty<Process>  Process))))
  :pattern ((p_seq<Process> p (p_method_Future_Elect__Integer__Integer__Integer__Integer__Integer<Process> rank size v max n)))
  :qid |prog.method_Future_Elect__Integer__Integer__Integer__Integer__Integer_def_2|)))
(assert (forall ((rank Int) (size Int) (xs Seq<Int>) (max Int)) (!
  (=
    (ite
      (< rank size)
      (p_merge<Process> (p_method_Future_Elect__Integer__Integer__Integer__Integer__Integer<Process> rank size (Seq_index
        xs
        rank) max 0) (p_method_Future_Spawn__Integer__Integer__Sequence$Integer$__Integer<Process> (+
        rank
        1) size xs max))
      (as p_empty<Process>  Process))
    (p_method_Future_Spawn__Integer__Integer__Sequence$Integer$__Integer<Process> rank size xs max))
  :pattern ((p_method_Future_Spawn__Integer__Integer__Sequence$Integer$__Integer<Process> rank size xs max))
  :qid |prog.method_Future_Spawn__Integer__Integer__Sequence$Integer$__Integer_def_1|)))
(assert (forall ((p Process) (rank Int) (size Int) (xs Seq<Int>) (max Int)) (!
  (=
    (p_seq<Process> p (p_method_Future_Spawn__Integer__Integer__Sequence$Integer$__Integer<Process> rank size xs max))
    (p_seq<Process> p (p_seq<Process> (p_method_Future_Spawn__Integer__Integer__Sequence$Integer$__Integer<Process> rank size xs max) (as p_empty<Process>  Process))))
  :pattern ((p_seq<Process> p (p_method_Future_Spawn__Integer__Integer__Sequence$Integer$__Integer<Process> rank size xs max)))
  :qid |prog.method_Future_Spawn__Integer__Integer__Sequence$Integer$__Integer_def_2|)))
(assert (forall ((size Int) (xs Seq<Int>) (max Int)) (!
  (=
    (p_method_Future_Spawn__Integer__Integer__Sequence$Integer$__Integer<Process> 0 size xs max)
    (p_method_Future_Start__Integer__Sequence$Integer$__Integer<Process> size xs max))
  :pattern ((p_method_Future_Start__Integer__Sequence$Integer$__Integer<Process> size xs max))
  :qid |prog.method_Future_Start__Integer__Sequence$Integer$__Integer_def_1|)))
(assert (forall ((p Process) (size Int) (xs Seq<Int>) (max Int)) (!
  (=
    (p_seq<Process> p (p_method_Future_Start__Integer__Sequence$Integer$__Integer<Process> size xs max))
    (p_seq<Process> p (p_seq<Process> (p_method_Future_Start__Integer__Sequence$Integer$__Integer<Process> size xs max) (as p_empty<Process>  Process))))
  :pattern ((p_seq<Process> p (p_method_Future_Start__Integer__Sequence$Integer$__Integer<Process> size xs max)))
  :qid |prog.method_Future_Start__Integer__Sequence$Integer$__Integer_def_2|)))
; /field_value_functions_axioms.smt2 [channel_hist_value: Seq[Seq[Int]]]
(assert (forall ((vs $FVF<Seq<Seq<Int>>>) (ws $FVF<Seq<Seq<Int>>>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_channel_hist_value vs) ($FVF.domain_channel_hist_value ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_channel_hist_value vs))
            (= ($FVF.lookup_channel_hist_value vs x) ($FVF.lookup_channel_hist_value ws x)))
          :pattern (($FVF.lookup_channel_hist_value vs x) ($FVF.lookup_channel_hist_value ws x))
          :qid |qp.$FVF<Seq<Seq<Int>>>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Seq<Seq<Int>>>To$Snap vs)
              ($SortWrappers.$FVF<Seq<Seq<Int>>>To$Snap ws)
              )
    :qid |qp.$FVF<Seq<Seq<Int>>>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_channel_hist_value pm r))
    :pattern ($FVF.perm_channel_hist_value pm r))))
(assert (forall ((r $Ref) (f Seq<Seq<Int>>)) (!
    (= ($FVF.loc_channel_hist_value f r) true)
    :pattern ($FVF.loc_channel_hist_value f r))))
; /field_value_functions_axioms.smt2 [field_Program_f: Ref]
(assert (forall ((vs $FVF<$Ref>) (ws $FVF<$Ref>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_field_Program_f vs) ($FVF.domain_field_Program_f ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_field_Program_f vs))
            (= ($FVF.lookup_field_Program_f vs x) ($FVF.lookup_field_Program_f ws x)))
          :pattern (($FVF.lookup_field_Program_f vs x) ($FVF.lookup_field_Program_f ws x))
          :qid |qp.$FVF<$Ref>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<$Ref>To$Snap vs)
              ($SortWrappers.$FVF<$Ref>To$Snap ws)
              )
    :qid |qp.$FVF<$Ref>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_field_Program_f pm r))
    :pattern ($FVF.perm_field_Program_f pm r))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_field_Program_f f r) true)
    :pattern ($FVF.loc_field_Program_f f r))))
; /field_value_functions_axioms.smt2 [channel_hist_act: Seq[Seq[Int]]]
(assert (forall ((vs $FVF<Seq<Seq<Int>>>) (ws $FVF<Seq<Seq<Int>>>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_channel_hist_act vs) ($FVF.domain_channel_hist_act ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_channel_hist_act vs))
            (= ($FVF.lookup_channel_hist_act vs x) ($FVF.lookup_channel_hist_act ws x)))
          :pattern (($FVF.lookup_channel_hist_act vs x) ($FVF.lookup_channel_hist_act ws x))
          :qid |qp.$FVF<Seq<Seq<Int>>>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Seq<Seq<Int>>>To$Snap vs)
              ($SortWrappers.$FVF<Seq<Seq<Int>>>To$Snap ws)
              )
    :qid |qp.$FVF<Seq<Seq<Int>>>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_channel_hist_act pm r))
    :pattern ($FVF.perm_channel_hist_act pm r))))
(assert (forall ((r $Ref) (f Seq<Seq<Int>>)) (!
    (= ($FVF.loc_channel_hist_act f r) true)
    :pattern ($FVF.loc_channel_hist_act f r))))
; /field_value_functions_axioms.smt2 [results_hist_value: Seq[Int]]
(assert (forall ((vs $FVF<Seq<Int>>) (ws $FVF<Seq<Int>>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_results_hist_value vs) ($FVF.domain_results_hist_value ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_results_hist_value vs))
            (= ($FVF.lookup_results_hist_value vs x) ($FVF.lookup_results_hist_value ws x)))
          :pattern (($FVF.lookup_results_hist_value vs x) ($FVF.lookup_results_hist_value ws x))
          :qid |qp.$FVF<Seq<Int>>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap vs)
              ($SortWrappers.$FVF<Seq<Int>>To$Snap ws)
              )
    :qid |qp.$FVF<Seq<Int>>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_results_hist_value pm r))
    :pattern ($FVF.perm_results_hist_value pm r))))
(assert (forall ((r $Ref) (f Seq<Int>)) (!
    (= ($FVF.loc_results_hist_value f r) true)
    :pattern ($FVF.loc_results_hist_value f r))))
; /field_value_functions_axioms.smt2 [results_hist_act: Seq[Int]]
(assert (forall ((vs $FVF<Seq<Int>>) (ws $FVF<Seq<Int>>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_results_hist_act vs) ($FVF.domain_results_hist_act ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_results_hist_act vs))
            (= ($FVF.lookup_results_hist_act vs x) ($FVF.lookup_results_hist_act ws x)))
          :pattern (($FVF.lookup_results_hist_act vs x) ($FVF.lookup_results_hist_act ws x))
          :qid |qp.$FVF<Seq<Int>>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap vs)
              ($SortWrappers.$FVF<Seq<Int>>To$Snap ws)
              )
    :qid |qp.$FVF<Seq<Int>>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_results_hist_act pm r))
    :pattern ($FVF.perm_results_hist_act pm r))))
(assert (forall ((r $Ref) (f Seq<Int>)) (!
    (= ($FVF.loc_results_hist_act f r) true)
    :pattern ($FVF.loc_results_hist_act f r))))
; /field_value_functions_axioms.smt2 [results_hist_init: Seq[Int]]
(assert (forall ((vs $FVF<Seq<Int>>) (ws $FVF<Seq<Int>>)) (!
    (implies
      (and
        (Set_equal ($FVF.domain_results_hist_init vs) ($FVF.domain_results_hist_init ws))
        (forall ((x $Ref)) (!
          (implies
            (Set_in x ($FVF.domain_results_hist_init vs))
            (= ($FVF.lookup_results_hist_init vs x) ($FVF.lookup_results_hist_init ws x)))
          :pattern (($FVF.lookup_results_hist_init vs x) ($FVF.lookup_results_hist_init ws x))
          :qid |qp.$FVF<Seq<Int>>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Seq<Int>>To$Snap vs)
              ($SortWrappers.$FVF<Seq<Int>>To$Snap ws)
              )
    :qid |qp.$FVF<Seq<Int>>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_results_hist_init pm r))
    :pattern ($FVF.perm_results_hist_init pm r))))
(assert (forall ((r $Ref) (f Seq<Int>)) (!
    (= ($FVF.loc_results_hist_init f r) true)
    :pattern ($FVF.loc_results_hist_init f r))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(assert (forall ((s@$ $Snap) (xs@0@00 Seq<Int>) (i@1@00 Int) (v@2@00 Int)) (!
  (Seq_equal
    (method_Program_update__Sequence$Integer$__Integer__Integer%limited s@$ xs@0@00 i@1@00 v@2@00)
    (method_Program_update__Sequence$Integer$__Integer__Integer s@$ xs@0@00 i@1@00 v@2@00))
  :pattern ((method_Program_update__Sequence$Integer$__Integer__Integer s@$ xs@0@00 i@1@00 v@2@00))
  )))
(assert (forall ((s@$ $Snap) (xs@0@00 Seq<Int>) (i@1@00 Int) (v@2@00 Int)) (!
  (method_Program_update__Sequence$Integer$__Integer__Integer%stateless xs@0@00 i@1@00 v@2@00)
  :pattern ((method_Program_update__Sequence$Integer$__Integer__Integer%limited s@$ xs@0@00 i@1@00 v@2@00))
  )))
(assert (forall ((s@$ $Snap) (xs@0@00 Seq<Int>) (i@1@00 Int) (v@2@00 Int)) (!
  (let ((result@3@00 (method_Program_update__Sequence$Integer$__Integer__Integer%limited s@$ xs@0@00 i@1@00 v@2@00))) (implies
    (and (<= 0 i@1@00) (< i@1@00 (Seq_length xs@0@00)))
    (and
      (= (Seq_length result@3@00) (Seq_length xs@0@00))
      (= (Seq_index result@3@00 i@1@00) v@2@00)
      (forall ((j Int)) (!
        (implies
          (and (<= 0 j) (and (< j (Seq_length xs@0@00)) (not (= j i@1@00))))
          (= (Seq_index result@3@00 j) (Seq_index xs@0@00 j)))
        :pattern ((Seq_index result@3@00 j))
        :pattern ((Seq_index xs@0@00 j))
        )))))
  :pattern ((method_Program_update__Sequence$Integer$__Integer__Integer%limited s@$ xs@0@00 i@1@00 v@2@00))
  )))
(assert (forall ((s@$ $Snap) (xs@0@00 Seq<Int>) (i@1@00 Int) (v@2@00 Int)) (!
  (implies
    (and (<= 0 i@1@00) (< i@1@00 (Seq_length xs@0@00)))
    (Seq_equal
      (method_Program_update__Sequence$Integer$__Integer__Integer s@$ xs@0@00 i@1@00 v@2@00)
      (ite
        (< 0 i@1@00)
        (Seq_append
          (Seq_singleton (Seq_index xs@0@00 0))
          (method_Program_update__Sequence$Integer$__Integer__Integer%limited ($Snap.combine
            $Snap.unit
            $Snap.unit) (Seq_drop xs@0@00 1) (- i@1@00 1) v@2@00))
        (Seq_append (Seq_singleton v@2@00) (Seq_drop xs@0@00 1)))))
  :pattern ((method_Program_update__Sequence$Integer$__Integer__Integer s@$ xs@0@00 i@1@00 v@2@00))
  )))
(assert (forall ((s@$ $Snap) (x@4@00 $Perm)) (!
  (= (new_frac%limited s@$ x@4@00) (new_frac s@$ x@4@00))
  :pattern ((new_frac s@$ x@4@00))
  )))
(assert (forall ((s@$ $Snap) (x@4@00 $Perm)) (!
  (new_frac%stateless x@4@00)
  :pattern ((new_frac%limited s@$ x@4@00))
  )))
(assert (forall ((s@$ $Snap) (x@4@00 $Perm)) (!
  (let ((result@5@00 (new_frac%limited s@$ x@4@00))) (implies
    (and (< $Perm.No x@4@00) (<= x@4@00 $Perm.Write))
    (= (frac_val<Perm> result@5@00) x@4@00)))
  :pattern ((new_frac%limited s@$ x@4@00))
  )))
(assert (forall ((s@$ $Snap) (diz@6@00 $Ref) (xs@7@00 Seq<Seq<Int>>) (i@8@00 Int) (val@9@00 Int)) (!
  (Seq_equal
    (method_Program_push__Sequence$Sequence$Integer$$__Integer__Integer%limited s@$ diz@6@00 xs@7@00 i@8@00 val@9@00)
    (method_Program_push__Sequence$Sequence$Integer$$__Integer__Integer s@$ diz@6@00 xs@7@00 i@8@00 val@9@00))
  :pattern ((method_Program_push__Sequence$Sequence$Integer$$__Integer__Integer s@$ diz@6@00 xs@7@00 i@8@00 val@9@00))
  )))
(assert (forall ((s@$ $Snap) (diz@6@00 $Ref) (xs@7@00 Seq<Seq<Int>>) (i@8@00 Int) (val@9@00 Int)) (!
  (method_Program_push__Sequence$Sequence$Integer$$__Integer__Integer%stateless diz@6@00 xs@7@00 i@8@00 val@9@00)
  :pattern ((method_Program_push__Sequence$Sequence$Integer$$__Integer__Integer%limited s@$ diz@6@00 xs@7@00 i@8@00 val@9@00))
  )))
(assert (forall ((s@$ $Snap) (diz@6@00 $Ref) (xs@7@00 Seq<Seq<Int>>) (i@8@00 Int) (val@9@00 Int)) (!
  (let ((result@10@00 (method_Program_push__Sequence$Sequence$Integer$$__Integer__Integer%limited s@$ diz@6@00 xs@7@00 i@8@00 val@9@00))) (implies
    (and
      (not (= diz@6@00 $Ref.null))
      (and (<= 0 i@8@00) (< i@8@00 (Seq_length xs@7@00))))
    (and
      (= (Seq_length result@10@00) (Seq_length xs@7@00))
      (Seq_equal
        (Seq_index result@10@00 i@8@00)
        (Seq_append (Seq_index xs@7@00 i@8@00) (Seq_singleton val@9@00)))
      (forall ((j Int)) (!
        (implies
          (and (<= 0 j) (and (< j (Seq_length xs@7@00)) (not (= j i@8@00))))
          (Seq_equal (Seq_index result@10@00 j) (Seq_index xs@7@00 j)))
        :pattern ((Seq_index result@10@00 j))
        :pattern ((Seq_index xs@7@00 j))
        )))))
  :pattern ((method_Program_push__Sequence$Sequence$Integer$$__Integer__Integer%limited s@$ diz@6@00 xs@7@00 i@8@00 val@9@00))
  )))
(assert (forall ((s@$ $Snap) (diz@6@00 $Ref) (xs@7@00 Seq<Seq<Int>>) (i@8@00 Int) (val@9@00 Int)) (!
  (implies
    (and
      (not (= diz@6@00 $Ref.null))
      (and (<= 0 i@8@00) (< i@8@00 (Seq_length xs@7@00))))
    (Seq_equal
      (method_Program_push__Sequence$Sequence$Integer$$__Integer__Integer s@$ diz@6@00 xs@7@00 i@8@00 val@9@00)
      (ite
        (< 0 i@8@00)
        (Seq_append
          (Seq_singleton (Seq_index xs@7@00 0))
          (method_Program_push__Sequence$Sequence$Integer$$__Integer__Integer%limited ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) diz@6@00 (Seq_drop xs@7@00 1) (-
            i@8@00
            1) val@9@00))
        (Seq_append
          (Seq_singleton (Seq_append
            (Seq_index xs@7@00 0)
            (Seq_singleton val@9@00)))
          (Seq_drop xs@7@00 1)))))
  :pattern ((method_Program_push__Sequence$Sequence$Integer$$__Integer__Integer s@$ diz@6@00 xs@7@00 i@8@00 val@9@00))
  )))
(assert (forall ((s@$ $Snap) (xs@11@00 Seq<Int>) (i@12@00 Int) (j@13@00 Int)) (!
  (=
    (method_Program_maxint__Sequence$Integer$__Integer__Integer%limited s@$ xs@11@00 i@12@00 j@13@00)
    (method_Program_maxint__Sequence$Integer$__Integer__Integer s@$ xs@11@00 i@12@00 j@13@00))
  :pattern ((method_Program_maxint__Sequence$Integer$__Integer__Integer s@$ xs@11@00 i@12@00 j@13@00))
  )))
(assert (forall ((s@$ $Snap) (xs@11@00 Seq<Int>) (i@12@00 Int) (j@13@00 Int)) (!
  (method_Program_maxint__Sequence$Integer$__Integer__Integer%stateless xs@11@00 i@12@00 j@13@00)
  :pattern ((method_Program_maxint__Sequence$Integer$__Integer__Integer%limited s@$ xs@11@00 i@12@00 j@13@00))
  )))
(assert (forall ((s@$ $Snap) (xs@11@00 Seq<Int>) (i@12@00 Int) (j@13@00 Int)) (!
  (let ((result@14@00 (method_Program_maxint__Sequence$Integer$__Integer__Integer%limited s@$ xs@11@00 i@12@00 j@13@00))) (implies
    (and
      (and (<= 0 i@12@00) (<= i@12@00 (Seq_length xs@11@00)))
      (and (<= 0 j@13@00) (< j@13@00 (Seq_length xs@11@00)))
      (forall ((l Int)) (!
        (implies
          (and (<= 0 l) (< l i@12@00))
          (<= (Seq_index xs@11@00 l) (Seq_index xs@11@00 j@13@00)))
        :pattern ((Seq_index xs@11@00 l))
        )))
    (and
      (and (<= 0 result@14@00) (< result@14@00 (Seq_length xs@11@00)))
      (<= (Seq_index xs@11@00 j@13@00) (Seq_index xs@11@00 result@14@00))
      (forall ((l Int)) (!
        (implies
          (and (<= i@12@00 l) (< l (Seq_length xs@11@00)))
          (<= (Seq_index xs@11@00 l) (Seq_index xs@11@00 result@14@00)))
        :pattern ((Seq_index xs@11@00 l))
        )))))
  :pattern ((method_Program_maxint__Sequence$Integer$__Integer__Integer%limited s@$ xs@11@00 i@12@00 j@13@00))
  )))
(assert (forall ((s@$ $Snap) (xs@11@00 Seq<Int>) (i@12@00 Int) (j@13@00 Int)) (!
  (implies
    (and
      (and (<= 0 i@12@00) (<= i@12@00 (Seq_length xs@11@00)))
      (and (<= 0 j@13@00) (< j@13@00 (Seq_length xs@11@00)))
      (forall ((l Int)) (!
        (implies
          (and (<= 0 l) (< l i@12@00))
          (<= (Seq_index xs@11@00 l) (Seq_index xs@11@00 j@13@00)))
        :pattern ((Seq_index xs@11@00 l))
        )))
    (=
      (method_Program_maxint__Sequence$Integer$__Integer__Integer s@$ xs@11@00 i@12@00 j@13@00)
      (ite
        (< i@12@00 (Seq_length xs@11@00))
        (ite
          (<= (Seq_index xs@11@00 j@13@00) (Seq_index xs@11@00 i@12@00))
          (method_Program_maxint__Sequence$Integer$__Integer__Integer%limited ($Snap.combine
            $Snap.unit
            ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) xs@11@00 (+
            i@12@00
            1) i@12@00)
          (method_Program_maxint__Sequence$Integer$__Integer__Integer%limited ($Snap.combine
            $Snap.unit
            ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) xs@11@00 (+
            i@12@00
            1) j@13@00))
        j@13@00)))
  :pattern ((method_Program_maxint__Sequence$Integer$__Integer__Integer s@$ xs@11@00 i@12@00 j@13@00))
  )))
(assert (forall ((s@$ $Snap) (x@15@00 $Perm)) (!
  (= (new_zfrac%limited s@$ x@15@00) (new_zfrac s@$ x@15@00))
  :pattern ((new_zfrac s@$ x@15@00))
  )))
(assert (forall ((s@$ $Snap) (x@15@00 $Perm)) (!
  (new_zfrac%stateless x@15@00)
  :pattern ((new_zfrac%limited s@$ x@15@00))
  )))
(assert (forall ((s@$ $Snap) (x@15@00 $Perm)) (!
  (let ((result@16@00 (new_zfrac%limited s@$ x@15@00))) (implies
    (and (<= $Perm.No x@15@00) (<= x@15@00 $Perm.Write))
    (= (zfrac_val<Perm> result@16@00) x@15@00)))
  :pattern ((new_zfrac%limited s@$ x@15@00))
  )))
(assert (forall ((s@$ $Snap) (diz@17@00 $Ref) (xs@18@00 Seq<Seq<Int>>) (i@19@00 Int)) (!
  (Seq_equal
    (method_Program_pop__Sequence$Sequence$Integer$$__Integer%limited s@$ diz@17@00 xs@18@00 i@19@00)
    (method_Program_pop__Sequence$Sequence$Integer$$__Integer s@$ diz@17@00 xs@18@00 i@19@00))
  :pattern ((method_Program_pop__Sequence$Sequence$Integer$$__Integer s@$ diz@17@00 xs@18@00 i@19@00))
  )))
(assert (forall ((s@$ $Snap) (diz@17@00 $Ref) (xs@18@00 Seq<Seq<Int>>) (i@19@00 Int)) (!
  (method_Program_pop__Sequence$Sequence$Integer$$__Integer%stateless diz@17@00 xs@18@00 i@19@00)
  :pattern ((method_Program_pop__Sequence$Sequence$Integer$$__Integer%limited s@$ diz@17@00 xs@18@00 i@19@00))
  )))
(assert (forall ((s@$ $Snap) (diz@17@00 $Ref) (xs@18@00 Seq<Seq<Int>>) (i@19@00 Int)) (!
  (let ((result@20@00 (method_Program_pop__Sequence$Sequence$Integer$$__Integer%limited s@$ diz@17@00 xs@18@00 i@19@00))) (implies
    (and
      (not (= diz@17@00 $Ref.null))
      (and (<= 0 i@19@00) (< i@19@00 (Seq_length xs@18@00))))
    (and
      (= (Seq_length result@20@00) (Seq_length xs@18@00))
      (Seq_equal
        (Seq_index result@20@00 i@19@00)
        (Seq_drop (Seq_index xs@18@00 i@19@00) 1))
      (forall ((j Int)) (!
        (implies
          (and (<= 0 j) (and (< j (Seq_length xs@18@00)) (not (= j i@19@00))))
          (Seq_equal (Seq_index result@20@00 j) (Seq_index xs@18@00 j)))
        :pattern ((Seq_index result@20@00 j))
        :pattern ((Seq_index xs@18@00 j))
        )))))
  :pattern ((method_Program_pop__Sequence$Sequence$Integer$$__Integer%limited s@$ diz@17@00 xs@18@00 i@19@00))
  )))
(assert (forall ((s@$ $Snap) (diz@17@00 $Ref) (xs@18@00 Seq<Seq<Int>>) (i@19@00 Int)) (!
  (implies
    (and
      (not (= diz@17@00 $Ref.null))
      (and (<= 0 i@19@00) (< i@19@00 (Seq_length xs@18@00))))
    (Seq_equal
      (method_Program_pop__Sequence$Sequence$Integer$$__Integer s@$ diz@17@00 xs@18@00 i@19@00)
      (ite
        (< 0 i@19@00)
        (Seq_append
          (Seq_singleton (Seq_index xs@18@00 0))
          (method_Program_pop__Sequence$Sequence$Integer$$__Integer%limited ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) diz@17@00 (Seq_drop
            xs@18@00
            1) (- i@19@00 1)))
        (Seq_append
          (Seq_singleton (Seq_drop (Seq_index xs@18@00 0) 1))
          (Seq_drop xs@18@00 1)))))
  :pattern ((method_Program_pop__Sequence$Sequence$Integer$$__Integer s@$ diz@17@00 xs@18@00 i@19@00))
  )))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- method_Future_Send__Integer__Integer_begin ----------
(declare-const diz@0@01 $Ref)
(declare-const current_thread_id@1@01 Int)
(declare-const fr@2@01 frac)
(declare-const proc@3@01 Process)
(declare-const rank@4@01 Int)
(declare-const msg@5@01 Int)
(declare-const diz@6@01 $Ref)
(declare-const current_thread_id@7@01 Int)
(declare-const fr@8@01 frac)
(declare-const proc@9@01 Process)
(declare-const rank@10@01 Int)
(declare-const msg@11@01 Int)
(push) ; 1
(declare-const $t@12@01 $Snap)
(assert (= $t@12@01 ($Snap.combine ($Snap.first $t@12@01) ($Snap.second $t@12@01))))
(assert (= ($Snap.first $t@12@01) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@6@01 $Ref.null)))
(assert (=
  ($Snap.second $t@12@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@12@01))
    ($Snap.second ($Snap.second $t@12@01)))))
(assert (= ($Snap.first ($Snap.second $t@12@01)) $Snap.unit))
; [eval] 0 <= current_thread_id
(assert (<= 0 current_thread_id@7@01))
(assert (=
  ($Snap.second ($Snap.second $t@12@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@12@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@12@01))) $Snap.unit))
; [eval] frac_val(fr) != none
; [eval] frac_val(fr)
(assert (not (= (frac_val<Perm> fr@8@01) $Perm.No)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@12@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@12@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
; [eval] p_seq(p_method_Future_Send__Integer__Integer(rank, msg), proc)
; [eval] p_method_Future_Send__Integer__Integer(rank, msg)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))
  $Snap.unit))
; [eval] write != none
(assert (not (= $Perm.Write $Perm.No)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))
  $Snap.unit))
; [eval] 0 <= rank
(assert (<= 0 rank@10@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))
  $Snap.unit))
; [eval] rank < |diz.channel_hist_value|
; [eval] |diz.channel_hist_value|
(assert (<
  rank@10@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@13@01 $Snap)
(assert (= $t@13@01 ($Snap.combine ($Snap.first $t@13@01) ($Snap.second $t@13@01))))
(assert (= ($Snap.first $t@13@01) $Snap.unit))
; [eval] frac_val(fr) != none
; [eval] frac_val(fr)
(assert (=
  ($Snap.second $t@13@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@13@01))
    ($Snap.second ($Snap.second $t@13@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@13@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@13@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@13@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@13@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@13@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@01)))))))
  $Snap.unit))
; [eval] diz.channel_hist_value == diz.channel_hist_act
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@13@01)))))
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@13@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@13@01)))))))
  $Snap.unit))
; [eval] diz.channel_hist_value == old(diz.channel_hist_value)
; [eval] old(diz.channel_hist_value)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@13@01)))))
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@12@01)))))))))
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- method_Future_Send__Integer__Integer_commit ----------
(declare-const diz@14@01 $Ref)
(declare-const current_thread_id@15@01 Int)
(declare-const fr@16@01 frac)
(declare-const proc@17@01 Process)
(declare-const rank@18@01 Int)
(declare-const msg@19@01 Int)
(declare-const diz@20@01 $Ref)
(declare-const current_thread_id@21@01 Int)
(declare-const fr@22@01 frac)
(declare-const proc@23@01 Process)
(declare-const rank@24@01 Int)
(declare-const msg@25@01 Int)
(push) ; 1
(declare-const $t@26@01 $Snap)
(assert (= $t@26@01 ($Snap.combine ($Snap.first $t@26@01) ($Snap.second $t@26@01))))
(assert (= ($Snap.first $t@26@01) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@20@01 $Ref.null)))
(assert (=
  ($Snap.second $t@26@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@26@01))
    ($Snap.second ($Snap.second $t@26@01)))))
(assert (= ($Snap.first ($Snap.second $t@26@01)) $Snap.unit))
; [eval] 0 <= current_thread_id
(assert (<= 0 current_thread_id@21@01))
(assert (=
  ($Snap.second ($Snap.second $t@26@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@26@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@26@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@26@01))) $Snap.unit))
; [eval] frac_val(fr) != none
; [eval] frac_val(fr)
(assert (not (= (frac_val<Perm> fr@22@01) $Perm.No)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@26@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@26@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01)))))
  $Snap.unit))
; [eval] write != none
(assert (not (= $Perm.Write $Perm.No)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01))))))))))
  $Snap.unit))
; [eval] 0 <= rank
(assert (<= 0 rank@24@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01)))))))))))
  $Snap.unit))
; [eval] rank < |diz.channel_hist_value|
; [eval] |diz.channel_hist_value|
(assert (<
  rank@24@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01))))))))))))
  $Snap.unit))
; [eval] |diz.channel_hist_value| == |diz.channel_hist_act|
; [eval] |diz.channel_hist_value|
; [eval] |diz.channel_hist_act|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01)))))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01)))))))))))))
  $Snap.unit))
; [eval] diz.channel_hist_value[rank] == diz.channel_hist_act[rank] ++ Seq(msg)
; [eval] diz.channel_hist_value[rank]
(set-option :timeout 0)
(push) ; 2
(assert (not (>= rank@24@01 0)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; [eval] diz.channel_hist_act[rank] ++ Seq(msg)
; [eval] diz.channel_hist_act[rank]
(push) ; 2
(assert (not (>= rank@24@01 0)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(push) ; 2
(assert (not (<
  rank@24@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01)))))))))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; [eval] Seq(msg)
(assert (= (Seq_length (Seq_singleton msg@25@01)) 1))
(assert (Seq_equal
  (Seq_index
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01))))))))
    rank@24@01)
  (Seq_append
    (Seq_index
      ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01)))))))
      rank@24@01)
    (Seq_singleton msg@25@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01)))))))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.channel_hist_value[i] } { diz.channel_hist_act[i] } 0 <= i && (i < |diz.channel_hist_value| && i != rank) ==> diz.channel_hist_value[i] == diz.channel_hist_act[i])
(declare-const i@27@01 Int)
(push) ; 2
; [eval] 0 <= i && (i < |diz.channel_hist_value| && i != rank) ==> diz.channel_hist_value[i] == diz.channel_hist_act[i]
; [eval] 0 <= i && (i < |diz.channel_hist_value| && i != rank)
; [eval] 0 <= i
(push) ; 3
; [then-branch: 0 | 0 <= i@27@01 | live]
; [else-branch: 0 | !(0 <= i@27@01) | live]
(push) ; 4
; [then-branch: 0 | 0 <= i@27@01]
(assert (<= 0 i@27@01))
; [eval] i < |diz.channel_hist_value|
; [eval] |diz.channel_hist_value|
(push) ; 5
; [then-branch: 1 | i@27@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@26@01)))))))| | live]
; [else-branch: 1 | !(i@27@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@26@01)))))))|) | live]
(push) ; 6
; [then-branch: 1 | i@27@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@26@01)))))))|]
(assert (<
  i@27@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01)))))))))))
; [eval] i != rank
(pop) ; 6
(push) ; 6
; [else-branch: 1 | !(i@27@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@26@01)))))))|)]
(assert (not
  (<
    i@27@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01))))))))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 0 | !(0 <= i@27@01)]
(assert (not (<= 0 i@27@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
; [then-branch: 2 | i@27@01 != rank@24@01 && i@27@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@26@01)))))))| && 0 <= i@27@01 | live]
; [else-branch: 2 | !(i@27@01 != rank@24@01 && i@27@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@26@01)))))))| && 0 <= i@27@01) | live]
(push) ; 4
; [then-branch: 2 | i@27@01 != rank@24@01 && i@27@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@26@01)))))))| && 0 <= i@27@01]
(assert (and
  (and
    (not (= i@27@01 rank@24@01))
    (<
      i@27@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01)))))))))))
  (<= 0 i@27@01)))
; [eval] diz.channel_hist_value[i] == diz.channel_hist_act[i]
; [eval] diz.channel_hist_value[i]
(push) ; 5
(assert (not (>= i@27@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] diz.channel_hist_act[i]
(push) ; 5
(assert (not (>= i@27@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<
  i@27@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01)))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 2 | !(i@27@01 != rank@24@01 && i@27@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@26@01)))))))| && 0 <= i@27@01)]
(assert (not
  (and
    (and
      (not (= i@27@01 rank@24@01))
      (<
        i@27@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01)))))))))))
    (<= 0 i@27@01))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (implies
  (and
    (and
      (not (= i@27@01 rank@24@01))
      (<
        i@27@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01)))))))))))
    (<= 0 i@27@01))
  (and
    (not (= i@27@01 rank@24@01))
    (<
      i@27@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01))))))))))
    (<= 0 i@27@01))))
; Joined path conditions
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@27@01 Int)) (!
  (implies
    (and
      (and
        (not (= i@27@01 rank@24@01))
        (<
          i@27@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01)))))))))))
      (<= 0 i@27@01))
    (and
      (not (= i@27@01 rank@24@01))
      (<
        i@27@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01))))))))))
      (<= 0 i@27@01)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01))))))))
    i@27@01))
  :qid |prog.l307-aux|)))
(assert (forall ((i@27@01 Int)) (!
  (implies
    (and
      (and
        (not (= i@27@01 rank@24@01))
        (<
          i@27@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01)))))))))))
      (<= 0 i@27@01))
    (and
      (not (= i@27@01 rank@24@01))
      (<
        i@27@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01))))))))))
      (<= 0 i@27@01)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01)))))))
    i@27@01))
  :qid |prog.l307-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@27@01 Int)) (!
  (implies
    (and
      (and
        (not (= i@27@01 rank@24@01))
        (<
          i@27@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01)))))))))))
      (<= 0 i@27@01))
    (Seq_equal
      (Seq_index
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01))))))))
        i@27@01)
      (Seq_index
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01)))))))
        i@27@01)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01))))))))
    i@27@01))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01)))))))
    i@27@01))
  :qid |prog.l307|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@28@01 $Snap)
(assert (= $t@28@01 ($Snap.combine ($Snap.first $t@28@01) ($Snap.second $t@28@01))))
(assert (= ($Snap.first $t@28@01) $Snap.unit))
; [eval] frac_val(fr) != none
; [eval] frac_val(fr)
(assert (=
  ($Snap.second $t@28@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@28@01))
    ($Snap.second ($Snap.second $t@28@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@28@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@28@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@28@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@28@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@28@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@28@01))))
  $Snap.unit))
; [eval] diz.channel_hist_value == old(diz.channel_hist_value)
; [eval] old(diz.channel_hist_value)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@28@01))))
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@26@01))))))))))
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- method_Future_Recv__Integer__Integer_begin ----------
(declare-const diz@29@01 $Ref)
(declare-const current_thread_id@30@01 Int)
(declare-const fr@31@01 frac)
(declare-const proc@32@01 Process)
(declare-const rank@33@01 Int)
(declare-const msg@34@01 Int)
(declare-const diz@35@01 $Ref)
(declare-const current_thread_id@36@01 Int)
(declare-const fr@37@01 frac)
(declare-const proc@38@01 Process)
(declare-const rank@39@01 Int)
(declare-const msg@40@01 Int)
(push) ; 1
(declare-const $t@41@01 $Snap)
(assert (= $t@41@01 ($Snap.combine ($Snap.first $t@41@01) ($Snap.second $t@41@01))))
(assert (= ($Snap.first $t@41@01) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@35@01 $Ref.null)))
(assert (=
  ($Snap.second $t@41@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@41@01))
    ($Snap.second ($Snap.second $t@41@01)))))
(assert (= ($Snap.first ($Snap.second $t@41@01)) $Snap.unit))
; [eval] 0 <= current_thread_id
(assert (<= 0 current_thread_id@36@01))
(assert (=
  ($Snap.second ($Snap.second $t@41@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@41@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@41@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@41@01))) $Snap.unit))
; [eval] frac_val(fr) != none
; [eval] frac_val(fr)
(assert (not (= (frac_val<Perm> fr@37@01) $Perm.No)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@41@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@41@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@41@01)))))))
; [eval] p_seq(p_method_Future_Recv__Integer__Integer(rank, msg), proc)
; [eval] p_method_Future_Recv__Integer__Integer(rank, msg)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@41@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@41@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@41@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@41@01)))))
  $Snap.unit))
; [eval] write != none
(assert (not (= $Perm.Write $Perm.No)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@41@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@41@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@41@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@41@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@41@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@41@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@41@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@41@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@41@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@41@01))))))))
  $Snap.unit))
; [eval] 0 <= rank
(assert (<= 0 rank@39@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@41@01))))))))
  $Snap.unit))
; [eval] rank < |diz.channel_hist_value|
; [eval] |diz.channel_hist_value|
(assert (<
  rank@39@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@41@01))))))))))
; State saturation: after contract
(check-sat)
; unknown
(push) ; 2
(declare-const $t@42@01 $Snap)
(assert (= $t@42@01 ($Snap.combine ($Snap.first $t@42@01) ($Snap.second $t@42@01))))
(assert (= ($Snap.first $t@42@01) $Snap.unit))
; [eval] frac_val(fr) != none
; [eval] frac_val(fr)
(assert (=
  ($Snap.second $t@42@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@42@01))
    ($Snap.second ($Snap.second $t@42@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@42@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@42@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@42@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@42@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@42@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@01)))))))
  $Snap.unit))
; [eval] diz.channel_hist_value == diz.channel_hist_act
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@42@01)))))
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@42@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@42@01)))))))
  $Snap.unit))
; [eval] diz.channel_hist_value == old(diz.channel_hist_value)
; [eval] old(diz.channel_hist_value)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@42@01)))))
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@41@01)))))))))
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- method_Future_Recv__Integer__Integer_commit ----------
(declare-const diz@43@01 $Ref)
(declare-const current_thread_id@44@01 Int)
(declare-const fr@45@01 frac)
(declare-const proc@46@01 Process)
(declare-const rank@47@01 Int)
(declare-const msg@48@01 Int)
(declare-const diz@49@01 $Ref)
(declare-const current_thread_id@50@01 Int)
(declare-const fr@51@01 frac)
(declare-const proc@52@01 Process)
(declare-const rank@53@01 Int)
(declare-const msg@54@01 Int)
(push) ; 1
(declare-const $t@55@01 $Snap)
(assert (= $t@55@01 ($Snap.combine ($Snap.first $t@55@01) ($Snap.second $t@55@01))))
(assert (= ($Snap.first $t@55@01) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@49@01 $Ref.null)))
(assert (=
  ($Snap.second $t@55@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@55@01))
    ($Snap.second ($Snap.second $t@55@01)))))
(assert (= ($Snap.first ($Snap.second $t@55@01)) $Snap.unit))
; [eval] 0 <= current_thread_id
(assert (<= 0 current_thread_id@50@01))
(assert (=
  ($Snap.second ($Snap.second $t@55@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@55@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@55@01))) $Snap.unit))
; [eval] frac_val(fr) != none
; [eval] frac_val(fr)
(assert (not (= (frac_val<Perm> fr@51@01) $Perm.No)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@55@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@55@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))
  $Snap.unit))
; [eval] write != none
(assert (not (= $Perm.Write $Perm.No)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
  $Snap.unit))
; [eval] 0 <= rank
(assert (<= 0 rank@53@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))
  $Snap.unit))
; [eval] rank < |diz.channel_hist_value|
; [eval] |diz.channel_hist_value|
(assert (<
  rank@53@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))
  $Snap.unit))
; [eval] |diz.channel_hist_value| == |diz.channel_hist_act|
; [eval] |diz.channel_hist_value|
; [eval] |diz.channel_hist_act|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))
  $Snap.unit))
; [eval] Seq(msg) ++ diz.channel_hist_value[rank] == diz.channel_hist_act[rank]
; [eval] Seq(msg) ++ diz.channel_hist_value[rank]
; [eval] Seq(msg)
(assert (= (Seq_length (Seq_singleton msg@54@01)) 1))
; [eval] diz.channel_hist_value[rank]
(set-option :timeout 0)
(push) ; 2
(assert (not (>= rank@53@01 0)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; [eval] diz.channel_hist_act[rank]
(push) ; 2
(assert (not (>= rank@53@01 0)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(push) ; 2
(assert (not (<
  rank@53@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  (Seq_append
    (Seq_singleton msg@54@01)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))
      rank@53@01))
  (Seq_index
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    rank@53@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.channel_hist_value[i] } { diz.channel_hist_act[i] } 0 <= i && (i < |diz.channel_hist_value| && i != rank) ==> diz.channel_hist_value[i] == diz.channel_hist_act[i])
(declare-const i@56@01 Int)
(push) ; 2
; [eval] 0 <= i && (i < |diz.channel_hist_value| && i != rank) ==> diz.channel_hist_value[i] == diz.channel_hist_act[i]
; [eval] 0 <= i && (i < |diz.channel_hist_value| && i != rank)
; [eval] 0 <= i
(push) ; 3
; [then-branch: 3 | 0 <= i@56@01 | live]
; [else-branch: 3 | !(0 <= i@56@01) | live]
(push) ; 4
; [then-branch: 3 | 0 <= i@56@01]
(assert (<= 0 i@56@01))
; [eval] i < |diz.channel_hist_value|
; [eval] |diz.channel_hist_value|
(push) ; 5
; [then-branch: 4 | i@56@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@55@01)))))))| | live]
; [else-branch: 4 | !(i@56@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@55@01)))))))|) | live]
(push) ; 6
; [then-branch: 4 | i@56@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@55@01)))))))|]
(assert (<
  i@56@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))
; [eval] i != rank
(pop) ; 6
(push) ; 6
; [else-branch: 4 | !(i@56@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@55@01)))))))|)]
(assert (not
  (<
    i@56@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 3 | !(0 <= i@56@01)]
(assert (not (<= 0 i@56@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
; [then-branch: 5 | i@56@01 != rank@53@01 && i@56@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@55@01)))))))| && 0 <= i@56@01 | live]
; [else-branch: 5 | !(i@56@01 != rank@53@01 && i@56@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@55@01)))))))| && 0 <= i@56@01) | live]
(push) ; 4
; [then-branch: 5 | i@56@01 != rank@53@01 && i@56@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@55@01)))))))| && 0 <= i@56@01]
(assert (and
  (and
    (not (= i@56@01 rank@53@01))
    (<
      i@56@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))
  (<= 0 i@56@01)))
; [eval] diz.channel_hist_value[i] == diz.channel_hist_act[i]
; [eval] diz.channel_hist_value[i]
(push) ; 5
(assert (not (>= i@56@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] diz.channel_hist_act[i]
(push) ; 5
(assert (not (>= i@56@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<
  i@56@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 5 | !(i@56@01 != rank@53@01 && i@56@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@55@01)))))))| && 0 <= i@56@01)]
(assert (not
  (and
    (and
      (not (= i@56@01 rank@53@01))
      (<
        i@56@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))
    (<= 0 i@56@01))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (implies
  (and
    (and
      (not (= i@56@01 rank@53@01))
      (<
        i@56@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))
    (<= 0 i@56@01))
  (and
    (not (= i@56@01 rank@53@01))
    (<
      i@56@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
    (<= 0 i@56@01))))
; Joined path conditions
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@56@01 Int)) (!
  (implies
    (and
      (and
        (not (= i@56@01 rank@53@01))
        (<
          i@56@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))
      (<= 0 i@56@01))
    (and
      (not (= i@56@01 rank@53@01))
      (<
        i@56@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
      (<= 0 i@56@01)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))
    i@56@01))
  :qid |prog.l351-aux|)))
(assert (forall ((i@56@01 Int)) (!
  (implies
    (and
      (and
        (not (= i@56@01 rank@53@01))
        (<
          i@56@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))
      (<= 0 i@56@01))
    (and
      (not (= i@56@01 rank@53@01))
      (<
        i@56@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
      (<= 0 i@56@01)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    i@56@01))
  :qid |prog.l351-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@56@01 Int)) (!
  (implies
    (and
      (and
        (not (= i@56@01 rank@53@01))
        (<
          i@56@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))))))
      (<= 0 i@56@01))
    (Seq_equal
      (Seq_index
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))
        i@56@01)
      (Seq_index
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
        i@56@01)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))
    i@56@01))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01)))))))
    i@56@01))
  :qid |prog.l351|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@57@01 $Snap)
(assert (= $t@57@01 ($Snap.combine ($Snap.first $t@57@01) ($Snap.second $t@57@01))))
(assert (= ($Snap.first $t@57@01) $Snap.unit))
; [eval] frac_val(fr) != none
; [eval] frac_val(fr)
(assert (=
  ($Snap.second $t@57@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@57@01))
    ($Snap.second ($Snap.second $t@57@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@57@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@57@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@57@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@57@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@57@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@57@01))))
  $Snap.unit))
; [eval] diz.channel_hist_value == old(diz.channel_hist_value)
; [eval] old(diz.channel_hist_value)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@57@01))))
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@55@01))))))))))
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- method_Future_Done__Integer__Integer_begin ----------
(declare-const diz@58@01 $Ref)
(declare-const current_thread_id@59@01 Int)
(declare-const fr@60@01 frac)
(declare-const proc@61@01 Process)
(declare-const rank@62@01 Int)
(declare-const v@63@01 Int)
(declare-const diz@64@01 $Ref)
(declare-const current_thread_id@65@01 Int)
(declare-const fr@66@01 frac)
(declare-const proc@67@01 Process)
(declare-const rank@68@01 Int)
(declare-const v@69@01 Int)
(push) ; 1
(declare-const $t@70@01 $Snap)
(assert (= $t@70@01 ($Snap.combine ($Snap.first $t@70@01) ($Snap.second $t@70@01))))
(assert (= ($Snap.first $t@70@01) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@64@01 $Ref.null)))
(assert (=
  ($Snap.second $t@70@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@70@01))
    ($Snap.second ($Snap.second $t@70@01)))))
(assert (= ($Snap.first ($Snap.second $t@70@01)) $Snap.unit))
; [eval] 0 <= current_thread_id
(assert (<= 0 current_thread_id@65@01))
(assert (=
  ($Snap.second ($Snap.second $t@70@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@70@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@70@01))) $Snap.unit))
; [eval] frac_val(fr) != none
; [eval] frac_val(fr)
(assert (not (= (frac_val<Perm> fr@66@01) $Perm.No)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@70@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))
; [eval] p_seq(p_method_Future_Done__Integer__Integer(rank, v), proc)
; [eval] p_method_Future_Done__Integer__Integer(rank, v)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))
  $Snap.unit))
; [eval] write != none
(assert (not (= $Perm.Write $Perm.No)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))
  $Snap.unit))
; [eval] 0 <= rank
(assert (<= 0 rank@68@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))
  $Snap.unit))
; [eval] rank < |diz.results_hist_value|
; [eval] |diz.results_hist_value|
(assert (<
  rank@68@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))
; State saturation: after contract
(check-sat)
; unknown
(push) ; 2
(declare-const $t@71@01 $Snap)
(assert (= $t@71@01 ($Snap.combine ($Snap.first $t@71@01) ($Snap.second $t@71@01))))
(assert (= ($Snap.first $t@71@01) $Snap.unit))
; [eval] frac_val(fr) != none
; [eval] frac_val(fr)
(assert (=
  ($Snap.second $t@71@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@71@01))
    ($Snap.second ($Snap.second $t@71@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@71@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@71@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@71@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@71@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@01)))))))
  $Snap.unit))
; [eval] diz.results_hist_value == diz.results_hist_act
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@01)))))
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@71@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@71@01)))))))
  $Snap.unit))
; [eval] diz.results_hist_value == old(diz.results_hist_value)
; [eval] old(diz.results_hist_value)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@71@01)))))
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- method_Future_Done__Integer__Integer_commit ----------
(declare-const diz@72@01 $Ref)
(declare-const current_thread_id@73@01 Int)
(declare-const fr@74@01 frac)
(declare-const proc@75@01 Process)
(declare-const rank@76@01 Int)
(declare-const v@77@01 Int)
(declare-const diz@78@01 $Ref)
(declare-const current_thread_id@79@01 Int)
(declare-const fr@80@01 frac)
(declare-const proc@81@01 Process)
(declare-const rank@82@01 Int)
(declare-const v@83@01 Int)
(push) ; 1
(declare-const $t@84@01 $Snap)
(assert (= $t@84@01 ($Snap.combine ($Snap.first $t@84@01) ($Snap.second $t@84@01))))
(assert (= ($Snap.first $t@84@01) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@78@01 $Ref.null)))
(assert (=
  ($Snap.second $t@84@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@84@01))
    ($Snap.second ($Snap.second $t@84@01)))))
(assert (= ($Snap.first ($Snap.second $t@84@01)) $Snap.unit))
; [eval] 0 <= current_thread_id
(assert (<= 0 current_thread_id@79@01))
(assert (=
  ($Snap.second ($Snap.second $t@84@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@84@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@84@01))) $Snap.unit))
; [eval] frac_val(fr) != none
; [eval] frac_val(fr)
(assert (not (= (frac_val<Perm> fr@80@01) $Perm.No)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@84@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@84@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))
  $Snap.unit))
; [eval] write != none
(assert (not (= $Perm.Write $Perm.No)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))
  $Snap.unit))
; [eval] 0 <= rank
(assert (<= 0 rank@82@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))
  $Snap.unit))
; [eval] rank < |diz.results_hist_value|
; [eval] |diz.results_hist_value|
(assert (<
  rank@82@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))
  $Snap.unit))
; [eval] |diz.results_hist_value| == |diz.results_hist_act|
; [eval] |diz.results_hist_value|
; [eval] |diz.results_hist_act|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))
  $Snap.unit))
; [eval] diz.results_hist_value[rank] == v
; [eval] diz.results_hist_value[rank]
(set-option :timeout 0)
(push) ; 2
(assert (not (>= rank@82@01 0)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))
    rank@82@01)
  v@83@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.results_hist_value[i] } { diz.results_hist_act[i] } 0 <= i && (i < |diz.results_hist_value| && i != rank) ==> diz.results_hist_value[i] == diz.results_hist_act[i])
(declare-const i@85@01 Int)
(push) ; 2
; [eval] 0 <= i && (i < |diz.results_hist_value| && i != rank) ==> diz.results_hist_value[i] == diz.results_hist_act[i]
; [eval] 0 <= i && (i < |diz.results_hist_value| && i != rank)
; [eval] 0 <= i
(push) ; 3
; [then-branch: 6 | 0 <= i@85@01 | live]
; [else-branch: 6 | !(0 <= i@85@01) | live]
(push) ; 4
; [then-branch: 6 | 0 <= i@85@01]
(assert (<= 0 i@85@01))
; [eval] i < |diz.results_hist_value|
; [eval] |diz.results_hist_value|
(push) ; 5
; [then-branch: 7 | i@85@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@84@01)))))))| | live]
; [else-branch: 7 | !(i@85@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@84@01)))))))|) | live]
(push) ; 6
; [then-branch: 7 | i@85@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@84@01)))))))|]
(assert (<
  i@85@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))
; [eval] i != rank
(pop) ; 6
(push) ; 6
; [else-branch: 7 | !(i@85@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@84@01)))))))|)]
(assert (not
  (<
    i@85@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 6 | !(0 <= i@85@01)]
(assert (not (<= 0 i@85@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
; [then-branch: 8 | i@85@01 != rank@82@01 && i@85@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@84@01)))))))| && 0 <= i@85@01 | live]
; [else-branch: 8 | !(i@85@01 != rank@82@01 && i@85@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@84@01)))))))| && 0 <= i@85@01) | live]
(push) ; 4
; [then-branch: 8 | i@85@01 != rank@82@01 && i@85@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@84@01)))))))| && 0 <= i@85@01]
(assert (and
  (and
    (not (= i@85@01 rank@82@01))
    (<
      i@85@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))
  (<= 0 i@85@01)))
; [eval] diz.results_hist_value[i] == diz.results_hist_act[i]
; [eval] diz.results_hist_value[i]
(push) ; 5
(assert (not (>= i@85@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] diz.results_hist_act[i]
(push) ; 5
(assert (not (>= i@85@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<
  i@85@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 8 | !(i@85@01 != rank@82@01 && i@85@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@84@01)))))))| && 0 <= i@85@01)]
(assert (not
  (and
    (and
      (not (= i@85@01 rank@82@01))
      (<
        i@85@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))
    (<= 0 i@85@01))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (implies
  (and
    (and
      (not (= i@85@01 rank@82@01))
      (<
        i@85@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))
    (<= 0 i@85@01))
  (and
    (not (= i@85@01 rank@82@01))
    (<
      i@85@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))
    (<= 0 i@85@01))))
; Joined path conditions
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@85@01 Int)) (!
  (implies
    (and
      (and
        (not (= i@85@01 rank@82@01))
        (<
          i@85@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))
      (<= 0 i@85@01))
    (and
      (not (= i@85@01 rank@82@01))
      (<
        i@85@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))
      (<= 0 i@85@01)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))
    i@85@01))
  :qid |prog.l395-aux|)))
(assert (forall ((i@85@01 Int)) (!
  (implies
    (and
      (and
        (not (= i@85@01 rank@82@01))
        (<
          i@85@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))
      (<= 0 i@85@01))
    (and
      (not (= i@85@01 rank@82@01))
      (<
        i@85@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))
      (<= 0 i@85@01)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))
    i@85@01))
  :qid |prog.l395-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@85@01 Int)) (!
  (implies
    (and
      (and
        (not (= i@85@01 rank@82@01))
        (<
          i@85@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))))))
      (<= 0 i@85@01))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))
        i@85@01)
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))
        i@85@01)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))
    i@85@01))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01)))))))
    i@85@01))
  :qid |prog.l395|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@86@01 $Snap)
(assert (= $t@86@01 ($Snap.combine ($Snap.first $t@86@01) ($Snap.second $t@86@01))))
(assert (= ($Snap.first $t@86@01) $Snap.unit))
; [eval] frac_val(fr) != none
; [eval] frac_val(fr)
(assert (=
  ($Snap.second $t@86@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@86@01))
    ($Snap.second ($Snap.second $t@86@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@86@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@86@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@86@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@86@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))
  $Snap.unit))
; [eval] diz.results_hist_value == old(diz.results_hist_value)
; [eval] old(diz.results_hist_value)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@86@01))))
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@84@01))))))))))
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- constructor_Future_Future ----------
(declare-const current_thread_id@87@01 Int)
(declare-const sys__result@88@01 $Ref)
(declare-const current_thread_id@89@01 Int)
(declare-const sys__result@90@01 $Ref)
(push) ; 1
(declare-const $t@91@01 $Snap)
(assert (= $t@91@01 $Snap.unit))
; [eval] 0 <= current_thread_id
(assert (<= 0 current_thread_id@89@01))
; State saturation: after contract
(check-sat)
; unknown
(push) ; 2
(declare-const $t@92@01 $Snap)
(assert (= $t@92@01 ($Snap.combine ($Snap.first $t@92@01) ($Snap.second $t@92@01))))
(assert (= ($Snap.first $t@92@01) $Snap.unit))
; [eval] sys__result != null
(assert (not (= sys__result@90@01 $Ref.null)))
(assert (=
  ($Snap.second $t@92@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@92@01))
    ($Snap.second ($Snap.second $t@92@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@92@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@92@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@92@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@92@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@92@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))
  $Snap.unit))
; [eval] sys__result.channel_hist_value == Seq[Seq[Int]]()
; [eval] Seq[Seq[Int]]()
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second $t@92@01)))
  (as Seq_empty  Seq<Seq<Int>>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01))))))))
  $Snap.unit))
; [eval] sys__result.results_hist_value == Seq[Int]()
; [eval] Seq[Int]()
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@92@01)))))))
  (as Seq_empty  Seq<Int>)))
(pop) ; 2
(push) ; 2
; [exec]
; var diz__1: Ref
(declare-const diz__1@93@01 $Ref)
; [exec]
; var __flatten_1__2: Seq[Seq[Int]]
(declare-const __flatten_1__2@94@01 Seq<Seq<Int>>)
; [exec]
; var __flatten_3__3: Seq[Int]
(declare-const __flatten_3__3@95@01 Seq<Int>)
; [exec]
; var __flatten_61__4: Seq[Seq[Int]]
(declare-const __flatten_61__4@96@01 Seq<Seq<Int>>)
; [exec]
; var __flatten_63__5: Seq[Int]
(declare-const __flatten_63__5@97@01 Seq<Int>)
; [exec]
; diz__1 := new(channel_hist_value, channel_hist_init, channel_hist_act, channel_hist_write, channel_hist_free, channel_hist_hist, channel_hist_action, results_hist_value, results_hist_init, results_hist_act, results_hist_write, results_hist_free, results_hist_hist, results_hist_action)
(declare-const diz__1@98@01 $Ref)
(assert (not (= diz__1@98@01 $Ref.null)))
(declare-const channel_hist_value@99@01 Seq<Seq<Int>>)
(declare-const channel_hist_init@100@01 Seq<Seq<Int>>)
(declare-const channel_hist_act@101@01 Seq<Seq<Int>>)
(declare-const channel_hist_write@102@01 Seq<Seq<Int>>)
(declare-const channel_hist_free@103@01 Seq<Seq<Int>>)
(declare-const channel_hist_hist@104@01 Seq<Seq<Int>>)
(declare-const channel_hist_action@105@01 Seq<Seq<Int>>)
(declare-const results_hist_value@106@01 Seq<Int>)
(declare-const results_hist_init@107@01 Seq<Int>)
(declare-const results_hist_act@108@01 Seq<Int>)
(declare-const results_hist_write@109@01 Seq<Int>)
(declare-const results_hist_free@110@01 Seq<Int>)
(declare-const results_hist_hist@111@01 Seq<Int>)
(declare-const results_hist_action@112@01 Seq<Int>)
(assert (not (= diz__1@98@01 diz__1@93@01)))
(assert (not (= diz__1@98@01 sys__result@90@01)))
; [exec]
; __flatten_61__4 := Seq[Seq[Int]]()
; [eval] Seq[Seq[Int]]()
; [exec]
; __flatten_1__2 := __flatten_61__4
; [exec]
; hist_set_channel(diz__1, current_thread_id, __flatten_1__2)
; [eval] diz != null
; [eval] 0 <= current_thread_id
(declare-const $t@113@01 $Snap)
(assert (= $t@113@01 ($Snap.combine ($Snap.first $t@113@01) ($Snap.second $t@113@01))))
(assert (=
  ($Snap.second $t@113@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@113@01))
    ($Snap.second ($Snap.second $t@113@01)))))
(assert (= ($Snap.first ($Snap.second $t@113@01)) $Snap.unit))
; [eval] diz.channel_hist_value == value
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@113@01))
  (as Seq_empty  Seq<Seq<Int>>)))
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __flatten_63__5 := Seq[Int]()
; [eval] Seq[Int]()
; [exec]
; __flatten_3__3 := __flatten_63__5
; [exec]
; hist_set_results(diz__1, current_thread_id, __flatten_3__3)
; [eval] diz != null
; [eval] 0 <= current_thread_id
(declare-const $t@114@01 $Snap)
(assert (= $t@114@01 ($Snap.combine ($Snap.first $t@114@01) ($Snap.second $t@114@01))))
(assert (=
  ($Snap.second $t@114@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@114@01))
    ($Snap.second ($Snap.second $t@114@01)))))
(assert (= ($Snap.first ($Snap.second $t@114@01)) $Snap.unit))
; [eval] diz.results_hist_value == value
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first $t@114@01))
  (as Seq_empty  Seq<Int>)))
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; label method_end_constructor_Future_Future_0
; [exec]
; sys__result := diz__1
; [exec]
; assert sys__result != null && (acc(sys__result.channel_hist_value, write) && (acc(sys__result.channel_hist_write, write) && (acc(sys__result.channel_hist_free, write) && (sys__result.channel_hist_value == Seq[Seq[Int]]() && (acc(sys__result.results_hist_value, write) && (acc(sys__result.results_hist_write, write) && (acc(sys__result.results_hist_free, write) && sys__result.results_hist_value == Seq[Int]())))))))
; [eval] sys__result != null
; [eval] sys__result.channel_hist_value == Seq[Seq[Int]]()
; [eval] Seq[Seq[Int]]()
; [eval] sys__result.results_hist_value == Seq[Int]()
; [eval] Seq[Int]()
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- hist_set_channel ----------
(declare-const diz@115@01 $Ref)
(declare-const current_thread_id@116@01 Int)
(declare-const value@117@01 Seq<Seq<Int>>)
(declare-const diz@118@01 $Ref)
(declare-const current_thread_id@119@01 Int)
(declare-const value@120@01 Seq<Seq<Int>>)
(push) ; 1
(declare-const $t@121@01 $Snap)
(assert (= $t@121@01 ($Snap.combine ($Snap.first $t@121@01) ($Snap.second $t@121@01))))
(assert (= ($Snap.first $t@121@01) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@118@01 $Ref.null)))
(assert (=
  ($Snap.second $t@121@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@121@01))
    ($Snap.second ($Snap.second $t@121@01)))))
(assert (= ($Snap.first ($Snap.second $t@121@01)) $Snap.unit))
; [eval] 0 <= current_thread_id
(assert (<= 0 current_thread_id@119@01))
(assert (=
  ($Snap.second ($Snap.second $t@121@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@121@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@121@01))))))
; State saturation: after contract
(check-sat)
; unknown
(push) ; 2
(declare-const $t@122@01 $Snap)
(assert (= $t@122@01 ($Snap.combine ($Snap.first $t@122@01) ($Snap.second $t@122@01))))
(assert (=
  ($Snap.second $t@122@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@122@01))
    ($Snap.second ($Snap.second $t@122@01)))))
(assert (= ($Snap.first ($Snap.second $t@122@01)) $Snap.unit))
; [eval] diz.channel_hist_value == value
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@122@01))
  value@120@01))
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- hist_set_results ----------
(declare-const diz@123@01 $Ref)
(declare-const current_thread_id@124@01 Int)
(declare-const value@125@01 Seq<Int>)
(declare-const diz@126@01 $Ref)
(declare-const current_thread_id@127@01 Int)
(declare-const value@128@01 Seq<Int>)
(push) ; 1
(declare-const $t@129@01 $Snap)
(assert (= $t@129@01 ($Snap.combine ($Snap.first $t@129@01) ($Snap.second $t@129@01))))
(assert (= ($Snap.first $t@129@01) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@126@01 $Ref.null)))
(assert (=
  ($Snap.second $t@129@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@129@01))
    ($Snap.second ($Snap.second $t@129@01)))))
(assert (= ($Snap.first ($Snap.second $t@129@01)) $Snap.unit))
; [eval] 0 <= current_thread_id
(assert (<= 0 current_thread_id@127@01))
(assert (=
  ($Snap.second ($Snap.second $t@129@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@129@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@129@01))))))
; State saturation: after contract
(check-sat)
; unknown
(push) ; 2
(declare-const $t@130@01 $Snap)
(assert (= $t@130@01 ($Snap.combine ($Snap.first $t@130@01) ($Snap.second $t@130@01))))
(assert (=
  ($Snap.second $t@130@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@130@01))
    ($Snap.second ($Snap.second $t@130@01)))))
(assert (= ($Snap.first ($Snap.second $t@130@01)) $Snap.unit))
; [eval] diz.results_hist_value == value
(assert (Seq_equal ($SortWrappers.$SnapToSeq<Int> ($Snap.first $t@130@01)) value@128@01))
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- end_future ----------
(declare-const diz@131@01 $Ref)
(declare-const current_thread_id@132@01 Int)
(declare-const diz@133@01 $Ref)
(declare-const current_thread_id@134@01 Int)
(push) ; 1
(declare-const $t@135@01 $Snap)
(assert (= $t@135@01 ($Snap.combine ($Snap.first $t@135@01) ($Snap.second $t@135@01))))
(assert (= ($Snap.first $t@135@01) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@133@01 $Ref.null)))
(assert (=
  ($Snap.second $t@135@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@135@01))
    ($Snap.second ($Snap.second $t@135@01)))))
(assert (= ($Snap.first ($Snap.second $t@135@01)) $Snap.unit))
; [eval] 0 <= current_thread_id
(assert (<= 0 current_thread_id@134@01))
(assert (=
  ($Snap.second ($Snap.second $t@135@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@135@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@135@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@135@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))))))
; [eval] new_frac(write)
(push) ; 2
; [eval] 0 / 1 < x
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 1 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (< $Perm.No $Perm.Write)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (< $Perm.No $Perm.Write))
; [eval] x <= 1 / 1
(push) ; 3
(assert (not (not (= 1 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(pop) ; 2
; Joined path conditions
(assert (< $Perm.No $Perm.Write))
; [eval] p_empty()
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@136@01 $Snap)
(assert (= $t@136@01 ($Snap.combine ($Snap.first $t@136@01) ($Snap.second $t@136@01))))
(assert (=
  ($Snap.second $t@136@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@136@01))
    ($Snap.second ($Snap.second $t@136@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@136@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@136@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@136@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@136@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@136@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@136@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@136@01))))
  $Snap.unit))
; [eval] diz.channel_hist_value == old(diz.channel_hist_value)
; [eval] old(diz.channel_hist_value)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@136@01))
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@135@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@136@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@136@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@136@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@136@01)))))
  $Snap.unit))
; [eval] diz.channel_hist_value == old(diz.channel_hist_init)
; [eval] old(diz.channel_hist_init)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@136@01))
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@136@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@136@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@136@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@136@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@136@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@136@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@136@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@136@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@136@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@136@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@136@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@136@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@136@01)))))))))
  $Snap.unit))
; [eval] diz.results_hist_value == old(diz.results_hist_value)
; [eval] old(diz.results_hist_value)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@136@01)))))))
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@136@01)))))))))
  $Snap.unit))
; [eval] diz.results_hist_value == old(diz.results_hist_init)
; [eval] old(diz.results_hist_init)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@136@01)))))))
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@135@01)))))))))))
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- split ----------
(declare-const diz@137@01 $Ref)
(declare-const current_thread_id@138@01 Int)
(declare-const frac1@139@01 frac)
(declare-const proc1@140@01 Process)
(declare-const frac2@141@01 frac)
(declare-const proc2@142@01 Process)
(declare-const diz@143@01 $Ref)
(declare-const current_thread_id@144@01 Int)
(declare-const frac1@145@01 frac)
(declare-const proc1@146@01 Process)
(declare-const frac2@147@01 frac)
(declare-const proc2@148@01 Process)
(push) ; 1
(declare-const $t@149@01 $Snap)
(assert (= $t@149@01 ($Snap.combine ($Snap.first $t@149@01) ($Snap.second $t@149@01))))
(assert (= ($Snap.first $t@149@01) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@143@01 $Ref.null)))
(assert (=
  ($Snap.second $t@149@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@149@01))
    ($Snap.second ($Snap.second $t@149@01)))))
(assert (= ($Snap.first ($Snap.second $t@149@01)) $Snap.unit))
; [eval] 0 <= current_thread_id
(assert (<= 0 current_thread_id@144@01))
(assert (=
  ($Snap.second ($Snap.second $t@149@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@149@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@149@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@149@01))) $Snap.unit))
; [eval] frac_val(frac1) + frac_val(frac2) <= write
; [eval] frac_val(frac1) + frac_val(frac2)
; [eval] frac_val(frac1)
; [eval] frac_val(frac2)
(assert (<= (+ (frac_val<Perm> frac1@145@01) (frac_val<Perm> frac2@147@01)) $Perm.Write))
; [eval] new_frac(frac_val(frac1) + frac_val(frac2))
; [eval] frac_val(frac1) + frac_val(frac2)
; [eval] frac_val(frac1)
; [eval] frac_val(frac2)
(push) ; 2
; [eval] 0 / 1 < x
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 1 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (< $Perm.No (+ (frac_val<Perm> frac1@145@01) (frac_val<Perm> frac2@147@01)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (< $Perm.No (+ (frac_val<Perm> frac1@145@01) (frac_val<Perm> frac2@147@01))))
; [eval] x <= 1 / 1
(push) ; 3
(assert (not (not (= 1 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(pop) ; 2
; Joined path conditions
(assert (< $Perm.No (+ (frac_val<Perm> frac1@145@01) (frac_val<Perm> frac2@147@01))))
; [eval] p_merge(proc1, proc2)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@150@01 $Snap)
(assert (= $t@150@01 ($Snap.combine ($Snap.first $t@150@01) ($Snap.second $t@150@01))))
(set-option :timeout 10)
(push) ; 3
(assert (not (and (= frac1@145@01 frac2@147@01) (= proc1@146@01 proc2@148@01))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- merge ----------
(declare-const diz@151@01 $Ref)
(declare-const current_thread_id@152@01 Int)
(declare-const frac1@153@01 frac)
(declare-const proc1@154@01 Process)
(declare-const frac2@155@01 frac)
(declare-const proc2@156@01 Process)
(declare-const diz@157@01 $Ref)
(declare-const current_thread_id@158@01 Int)
(declare-const frac1@159@01 frac)
(declare-const proc1@160@01 Process)
(declare-const frac2@161@01 frac)
(declare-const proc2@162@01 Process)
(push) ; 1
(declare-const $t@163@01 $Snap)
(assert (= $t@163@01 ($Snap.combine ($Snap.first $t@163@01) ($Snap.second $t@163@01))))
(assert (= ($Snap.first $t@163@01) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@157@01 $Ref.null)))
(assert (=
  ($Snap.second $t@163@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@163@01))
    ($Snap.second ($Snap.second $t@163@01)))))
(assert (= ($Snap.first ($Snap.second $t@163@01)) $Snap.unit))
; [eval] 0 <= current_thread_id
(assert (<= 0 current_thread_id@158@01))
(assert (=
  ($Snap.second ($Snap.second $t@163@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@163@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@163@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@163@01))) $Snap.unit))
; [eval] frac_val(frac1) + frac_val(frac2) <= write
; [eval] frac_val(frac1) + frac_val(frac2)
; [eval] frac_val(frac1)
; [eval] frac_val(frac2)
(assert (<= (+ (frac_val<Perm> frac1@159@01) (frac_val<Perm> frac2@161@01)) $Perm.Write))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@163@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@163@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@163@01)))))))
(push) ; 2
(assert (not (and (= frac1@159@01 frac2@161@01) (= proc1@160@01 proc2@162@01))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
; [eval] new_frac(frac_val(frac1) + frac_val(frac2))
; [eval] frac_val(frac1) + frac_val(frac2)
; [eval] frac_val(frac1)
; [eval] frac_val(frac2)
(push) ; 3
; [eval] 0 / 1 < x
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 1 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (< $Perm.No (+ (frac_val<Perm> frac1@159@01) (frac_val<Perm> frac2@161@01)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (< $Perm.No (+ (frac_val<Perm> frac1@159@01) (frac_val<Perm> frac2@161@01))))
; [eval] x <= 1 / 1
(push) ; 4
(assert (not (not (= 1 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
; Joined path conditions
(assert (< $Perm.No (+ (frac_val<Perm> frac1@159@01) (frac_val<Perm> frac2@161@01))))
; [eval] p_merge(proc1, proc2)
(declare-const $t@164@01 $Snap)
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- begin_future_1 ----------
(declare-const diz@165@01 $Ref)
(declare-const current_thread_id@166@01 Int)
(declare-const size@167@01 Int)
(declare-const xs@168@01 Seq<Int>)
(declare-const max@169@01 Int)
(declare-const diz@170@01 $Ref)
(declare-const current_thread_id@171@01 Int)
(declare-const size@172@01 Int)
(declare-const xs@173@01 Seq<Int>)
(declare-const max@174@01 Int)
(push) ; 1
(declare-const $t@175@01 $Snap)
(assert (= $t@175@01 ($Snap.combine ($Snap.first $t@175@01) ($Snap.second $t@175@01))))
(assert (= ($Snap.first $t@175@01) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@170@01 $Ref.null)))
(assert (=
  ($Snap.second $t@175@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@175@01))
    ($Snap.second ($Snap.second $t@175@01)))))
(assert (= ($Snap.first ($Snap.second $t@175@01)) $Snap.unit))
; [eval] 0 <= current_thread_id
(assert (<= 0 current_thread_id@171@01))
(assert (=
  ($Snap.second ($Snap.second $t@175@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@175@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@175@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@175@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))
  $Snap.unit))
; [eval] 0 < size
(assert (< 0 size@172@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))
  $Snap.unit))
; [eval] |diz.channel_hist_value| == size
; [eval] |diz.channel_hist_value|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@175@01)))))
  size@172@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))
  $Snap.unit))
; [eval] |diz.results_hist_value| == size
; [eval] |diz.results_hist_value|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))
  size@172@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))
  $Snap.unit))
; [eval] |xs| == size
; [eval] |xs|
(assert (= (Seq_length xs@173@01) size@172@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))
  $Snap.unit))
; [eval] (forall i: Int, j: Int :: { xs[j],xs[i] } 0 <= i && (i < |xs| && (0 <= j && (j < |xs| && i != j))) ==> xs[i] != xs[j])
(declare-const i@176@01 Int)
(declare-const j@177@01 Int)
(push) ; 2
; [eval] 0 <= i && (i < |xs| && (0 <= j && (j < |xs| && i != j))) ==> xs[i] != xs[j]
; [eval] 0 <= i && (i < |xs| && (0 <= j && (j < |xs| && i != j)))
; [eval] 0 <= i
(push) ; 3
; [then-branch: 9 | 0 <= i@176@01 | live]
; [else-branch: 9 | !(0 <= i@176@01) | live]
(push) ; 4
; [then-branch: 9 | 0 <= i@176@01]
(assert (<= 0 i@176@01))
; [eval] i < |xs|
; [eval] |xs|
(push) ; 5
; [then-branch: 10 | i@176@01 < |xs@173@01| | live]
; [else-branch: 10 | !(i@176@01 < |xs@173@01|) | live]
(push) ; 6
; [then-branch: 10 | i@176@01 < |xs@173@01|]
(assert (< i@176@01 (Seq_length xs@173@01)))
; [eval] 0 <= j
(push) ; 7
; [then-branch: 11 | 0 <= j@177@01 | live]
; [else-branch: 11 | !(0 <= j@177@01) | live]
(push) ; 8
; [then-branch: 11 | 0 <= j@177@01]
(assert (<= 0 j@177@01))
; [eval] j < |xs|
; [eval] |xs|
(push) ; 9
; [then-branch: 12 | j@177@01 < |xs@173@01| | live]
; [else-branch: 12 | !(j@177@01 < |xs@173@01|) | live]
(push) ; 10
; [then-branch: 12 | j@177@01 < |xs@173@01|]
(assert (< j@177@01 (Seq_length xs@173@01)))
; [eval] i != j
(pop) ; 10
(push) ; 10
; [else-branch: 12 | !(j@177@01 < |xs@173@01|)]
(assert (not (< j@177@01 (Seq_length xs@173@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 11 | !(0 <= j@177@01)]
(assert (not (<= 0 j@177@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 10 | !(i@176@01 < |xs@173@01|)]
(assert (not (< i@176@01 (Seq_length xs@173@01))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 9 | !(0 <= i@176@01)]
(assert (not (<= 0 i@176@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
; [then-branch: 13 | i@176@01 != j@177@01 && j@177@01 < |xs@173@01| && 0 <= j@177@01 && i@176@01 < |xs@173@01| && 0 <= i@176@01 | live]
; [else-branch: 13 | !(i@176@01 != j@177@01 && j@177@01 < |xs@173@01| && 0 <= j@177@01 && i@176@01 < |xs@173@01| && 0 <= i@176@01) | live]
(push) ; 4
; [then-branch: 13 | i@176@01 != j@177@01 && j@177@01 < |xs@173@01| && 0 <= j@177@01 && i@176@01 < |xs@173@01| && 0 <= i@176@01]
(assert (and
  (and
    (and
      (and (not (= i@176@01 j@177@01)) (< j@177@01 (Seq_length xs@173@01)))
      (<= 0 j@177@01))
    (< i@176@01 (Seq_length xs@173@01)))
  (<= 0 i@176@01)))
; [eval] xs[i] != xs[j]
; [eval] xs[i]
(push) ; 5
(assert (not (>= i@176@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] xs[j]
(push) ; 5
(assert (not (>= j@177@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 13 | !(i@176@01 != j@177@01 && j@177@01 < |xs@173@01| && 0 <= j@177@01 && i@176@01 < |xs@173@01| && 0 <= i@176@01)]
(assert (not
  (and
    (and
      (and
        (and (not (= i@176@01 j@177@01)) (< j@177@01 (Seq_length xs@173@01)))
        (<= 0 j@177@01))
      (< i@176@01 (Seq_length xs@173@01)))
    (<= 0 i@176@01))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (implies
  (and
    (and
      (and
        (and (not (= i@176@01 j@177@01)) (< j@177@01 (Seq_length xs@173@01)))
        (<= 0 j@177@01))
      (< i@176@01 (Seq_length xs@173@01)))
    (<= 0 i@176@01))
  (and
    (not (= i@176@01 j@177@01))
    (< j@177@01 (Seq_length xs@173@01))
    (<= 0 j@177@01)
    (< i@176@01 (Seq_length xs@173@01))
    (<= 0 i@176@01))))
; Joined path conditions
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@176@01 Int) (j@177@01 Int)) (!
  (implies
    (and
      (and
        (and
          (and (not (= i@176@01 j@177@01)) (< j@177@01 (Seq_length xs@173@01)))
          (<= 0 j@177@01))
        (< i@176@01 (Seq_length xs@173@01)))
      (<= 0 i@176@01))
    (and
      (not (= i@176@01 j@177@01))
      (< j@177@01 (Seq_length xs@173@01))
      (<= 0 j@177@01)
      (< i@176@01 (Seq_length xs@173@01))
      (<= 0 i@176@01)))
  :pattern ((Seq_index xs@173@01 j@177@01) (Seq_index xs@173@01 i@176@01))
  :qid |prog.l517-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@176@01 Int) (j@177@01 Int)) (!
  (implies
    (and
      (and
        (and
          (and (not (= i@176@01 j@177@01)) (< j@177@01 (Seq_length xs@173@01)))
          (<= 0 j@177@01))
        (< i@176@01 (Seq_length xs@173@01)))
      (<= 0 i@176@01))
    (not (= (Seq_index xs@173@01 i@176@01) (Seq_index xs@173@01 j@177@01))))
  :pattern ((Seq_index xs@173@01 j@177@01) (Seq_index xs@173@01 i@176@01))
  :qid |prog.l517|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { xs[i] } 0 <= i && i < |xs| ==> 0 <= xs[i] && xs[i] < max)
(declare-const i@178@01 Int)
(push) ; 2
; [eval] 0 <= i && i < |xs| ==> 0 <= xs[i] && xs[i] < max
; [eval] 0 <= i && i < |xs|
; [eval] 0 <= i
(push) ; 3
; [then-branch: 14 | 0 <= i@178@01 | live]
; [else-branch: 14 | !(0 <= i@178@01) | live]
(push) ; 4
; [then-branch: 14 | 0 <= i@178@01]
(assert (<= 0 i@178@01))
; [eval] i < |xs|
; [eval] |xs|
(pop) ; 4
(push) ; 4
; [else-branch: 14 | !(0 <= i@178@01)]
(assert (not (<= 0 i@178@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
; [then-branch: 15 | i@178@01 < |xs@173@01| && 0 <= i@178@01 | live]
; [else-branch: 15 | !(i@178@01 < |xs@173@01| && 0 <= i@178@01) | live]
(push) ; 4
; [then-branch: 15 | i@178@01 < |xs@173@01| && 0 <= i@178@01]
(assert (and (< i@178@01 (Seq_length xs@173@01)) (<= 0 i@178@01)))
; [eval] 0 <= xs[i] && xs[i] < max
; [eval] 0 <= xs[i]
; [eval] xs[i]
(push) ; 5
(assert (not (>= i@178@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch: 16 | 0 <= xs@173@01[i@178@01] | live]
; [else-branch: 16 | !(0 <= xs@173@01[i@178@01]) | live]
(push) ; 6
; [then-branch: 16 | 0 <= xs@173@01[i@178@01]]
(assert (<= 0 (Seq_index xs@173@01 i@178@01)))
; [eval] xs[i] < max
; [eval] xs[i]
(push) ; 7
(assert (not (>= i@178@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 16 | !(0 <= xs@173@01[i@178@01])]
(assert (not (<= 0 (Seq_index xs@173@01 i@178@01))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 15 | !(i@178@01 < |xs@173@01| && 0 <= i@178@01)]
(assert (not (and (< i@178@01 (Seq_length xs@173@01)) (<= 0 i@178@01))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@178@01 Int)) (!
  (implies
    (and (< i@178@01 (Seq_length xs@173@01)) (<= 0 i@178@01))
    (and
      (< (Seq_index xs@173@01 i@178@01) max@174@01)
      (<= 0 (Seq_index xs@173@01 i@178@01))))
  :pattern ((Seq_index xs@173@01 i@178@01))
  :qid |prog.l518|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@179@01 $Snap)
(assert (= $t@179@01 ($Snap.combine ($Snap.first $t@179@01) ($Snap.second $t@179@01))))
(assert (=
  ($Snap.second $t@179@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@179@01))
    ($Snap.second ($Snap.second $t@179@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@179@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@179@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@179@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@179@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@179@01))))
  $Snap.unit))
; [eval] diz.channel_hist_value == old(diz.channel_hist_value)
; [eval] old(diz.channel_hist_value)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@179@01))
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@175@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@01))))))))
  $Snap.unit))
; [eval] diz.results_hist_value == old(diz.results_hist_value)
; [eval] old(diz.results_hist_value)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@01))))))
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@01)))))))))
  $Snap.unit))
; [eval] 0 < size
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@01))))))))))
  $Snap.unit))
; [eval] |diz.channel_hist_init| == size
; [eval] |diz.channel_hist_init|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@179@01)))))
  size@172@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@01)))))))))))
  $Snap.unit))
; [eval] |diz.results_hist_init| == size
; [eval] |diz.results_hist_init|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@01)))))))))
  size@172@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@01))))))))))))
  $Snap.unit))
; [eval] |xs| == size
; [eval] |xs|
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@01)))))))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.results_hist_init[i] } 0 <= i && i < |diz.results_hist_init| ==> diz.results_hist_init[i] == diz.results_hist_init[method_Program_maxint__Sequence$Integer$__Integer__Integer(xs, 0, 0)])
(declare-const i@180@01 Int)
(push) ; 3
; [eval] 0 <= i && i < |diz.results_hist_init| ==> diz.results_hist_init[i] == diz.results_hist_init[method_Program_maxint__Sequence$Integer$__Integer__Integer(xs, 0, 0)]
; [eval] 0 <= i && i < |diz.results_hist_init|
; [eval] 0 <= i
(push) ; 4
; [then-branch: 17 | 0 <= i@180@01 | live]
; [else-branch: 17 | !(0 <= i@180@01) | live]
(push) ; 5
; [then-branch: 17 | 0 <= i@180@01]
(assert (<= 0 i@180@01))
; [eval] i < |diz.results_hist_init|
; [eval] |diz.results_hist_init|
(pop) ; 5
(push) ; 5
; [else-branch: 17 | !(0 <= i@180@01)]
(assert (not (<= 0 i@180@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 18 | i@180@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@179@01)))))))| && 0 <= i@180@01 | live]
; [else-branch: 18 | !(i@180@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@179@01)))))))| && 0 <= i@180@01) | live]
(push) ; 5
; [then-branch: 18 | i@180@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@179@01)))))))| && 0 <= i@180@01]
(assert (and
  (<
    i@180@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@01))))))))))
  (<= 0 i@180@01)))
; [eval] diz.results_hist_init[i] == diz.results_hist_init[method_Program_maxint__Sequence$Integer$__Integer__Integer(xs, 0, 0)]
; [eval] diz.results_hist_init[i]
(set-option :timeout 0)
(push) ; 6
(assert (not (>= i@180@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] diz.results_hist_init[method_Program_maxint__Sequence$Integer$__Integer__Integer(xs, 0, 0)]
; [eval] method_Program_maxint__Sequence$Integer$__Integer__Integer(xs, 0, 0)
(push) ; 6
; [eval] 0 <= i
; [eval] i <= |xs|
; [eval] |xs|
(push) ; 7
(assert (not (<= 0 (Seq_length xs@173@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 (Seq_length xs@173@01)))
; [eval] 0 <= j
; [eval] j < |xs|
; [eval] |xs|
(push) ; 7
(assert (not (< 0 (Seq_length xs@173@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (< 0 (Seq_length xs@173@01)))
; [eval] (forall l: Int :: 0 <= l && l < i ==> xs[l] <= xs[j])
(declare-const l@181@01 Int)
(push) ; 7
; [eval] 0 <= l && l < i ==> xs[l] <= xs[j]
; [eval] 0 <= l && l < i
; [eval] 0 <= l
(push) ; 8
; [then-branch: 19 | 0 <= l@181@01 | live]
; [else-branch: 19 | !(0 <= l@181@01) | live]
(push) ; 9
; [then-branch: 19 | 0 <= l@181@01]
(assert (<= 0 l@181@01))
; [eval] l < i
(pop) ; 9
(push) ; 9
; [else-branch: 19 | !(0 <= l@181@01)]
(assert (not (<= 0 l@181@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
; [then-branch: 20 | l@181@01 < 0 && 0 <= l@181@01 | live]
; [else-branch: 20 | !(l@181@01 < 0 && 0 <= l@181@01) | live]
(push) ; 9
; [then-branch: 20 | l@181@01 < 0 && 0 <= l@181@01]
(assert (and (< l@181@01 0) (<= 0 l@181@01)))
; [eval] xs[l] <= xs[j]
; [eval] xs[l]
(push) ; 10
(assert (not (>= l@181@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (< l@181@01 (Seq_length xs@173@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] xs[j]
(pop) ; 9
(push) ; 9
; [else-branch: 20 | !(l@181@01 < 0 && 0 <= l@181@01)]
(assert (not (and (< l@181@01 0) (<= 0 l@181@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 7
(assert (not (forall ((l@181@01 Int)) (!
  (implies
    (and (< l@181@01 0) (<= 0 l@181@01))
    (<= (Seq_index xs@173@01 l@181@01) (Seq_index xs@173@01 0)))
  
  :qid |prog.l217|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (forall ((l@181@01 Int)) (!
  (implies
    (and (< l@181@01 0) (<= 0 l@181@01))
    (<= (Seq_index xs@173@01 l@181@01) (Seq_index xs@173@01 0)))
  
  :qid |prog.l217|)))
(pop) ; 6
; Joined path conditions
(assert (and
  (<= 0 (Seq_length xs@173@01))
  (< 0 (Seq_length xs@173@01))
  (forall ((l@181@01 Int)) (!
    (implies
      (and (< l@181@01 0) (<= 0 l@181@01))
      (<= (Seq_index xs@173@01 l@181@01) (Seq_index xs@173@01 0)))
    
    :qid |prog.l217|))))
(push) ; 6
(assert (not (>=
  (method_Program_maxint__Sequence$Integer$__Integer__Integer ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) xs@173@01 0 0)
  0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (<
  (method_Program_maxint__Sequence$Integer$__Integer__Integer ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) xs@173@01 0 0)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@01))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 18 | !(i@180@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@179@01)))))))| && 0 <= i@180@01)]
(assert (not
  (and
    (<
      i@180@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@01))))))))))
    (<= 0 i@180@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (implies
  (and
    (<
      i@180@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@01))))))))))
    (<= 0 i@180@01))
  (and
    (<
      i@180@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@01))))))))))
    (<= 0 i@180@01)
    (<= 0 (Seq_length xs@173@01))
    (< 0 (Seq_length xs@173@01))
    (forall ((l@181@01 Int)) (!
      (implies
        (and (< l@181@01 0) (<= 0 l@181@01))
        (<= (Seq_index xs@173@01 l@181@01) (Seq_index xs@173@01 0)))
      
      :qid |prog.l217|)))))
; Joined path conditions
; [eval] diz.results_hist_init[i]
(push) ; 4
(assert (not (>= i@180@01 0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@180@01 Int)) (!
  (implies
    (and
      (<
        i@180@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@01))))))))))
      (<= 0 i@180@01))
    (and
      (<
        i@180@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@01))))))))))
      (<= 0 i@180@01)
      (<= 0 (Seq_length xs@173@01))
      (< 0 (Seq_length xs@173@01))
      (forall ((l@181@01 Int)) (!
        (implies
          (and (< l@181@01 0) (<= 0 l@181@01))
          (<= (Seq_index xs@173@01 l@181@01) (Seq_index xs@173@01 0)))
        
        :qid |prog.l217|))))
  :pattern ()
  :qid |prog.l531-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((l@181@01 Int)) (!
  (implies
    (and (< l@181@01 0) (<= 0 l@181@01))
    (<= (Seq_index xs@173@01 l@181@01) (Seq_index xs@173@01 0)))
  
  :qid |prog.l217|)))
(assert (forall ((i@180@01 Int)) (!
  (implies
    (and
      (<
        i@180@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@01))))))))))
      (<= 0 i@180@01))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@01))))))))
        i@180@01)
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@179@01))))))))
        (method_Program_maxint__Sequence$Integer$__Integer__Integer ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) xs@173@01 0 0))))
  :pattern ()
  :qid |prog.l531|)))
; [eval] new_frac(write)
(push) ; 3
; [eval] 0 / 1 < x
(push) ; 4
(assert (not (not (= 1 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (< $Perm.No $Perm.Write)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (< $Perm.No $Perm.Write))
; [eval] x <= 1 / 1
(push) ; 4
(assert (not (not (= 1 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
; Joined path conditions
(assert (< $Perm.No $Perm.Write))
; [eval] p_method_Future_Start__Integer__Sequence$Integer$__Integer(size, xs, max)
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- constructor_Program_Program__Future__Integer__Integer ----------
(declare-const current_thread_id@182@01 Int)
(declare-const globals@183@01 $Ref)
(declare-const f@184@01 $Ref)
(declare-const size@185@01 Int)
(declare-const max@186@01 Int)
(declare-const sys__result@187@01 $Ref)
(declare-const current_thread_id@188@01 Int)
(declare-const globals@189@01 $Ref)
(declare-const f@190@01 $Ref)
(declare-const size@191@01 Int)
(declare-const max@192@01 Int)
(declare-const sys__result@193@01 $Ref)
(push) ; 1
(declare-const $t@194@01 $Snap)
(assert (= $t@194@01 ($Snap.combine ($Snap.first $t@194@01) ($Snap.second $t@194@01))))
(assert (= ($Snap.first $t@194@01) $Snap.unit))
; [eval] 0 <= current_thread_id
(assert (<= 0 current_thread_id@188@01))
(assert (=
  ($Snap.second $t@194@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@194@01))
    ($Snap.second ($Snap.second $t@194@01)))))
(assert (= ($Snap.first ($Snap.second $t@194@01)) $Snap.unit))
; [eval] 0 < max
(assert (< 0 max@192@01))
(assert (=
  ($Snap.second ($Snap.second $t@194@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@194@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@194@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@194@01))) $Snap.unit))
; [eval] f != null
(assert (not (= f@190@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@194@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01))))))))
  $Snap.unit))
; [eval] |f.results_hist_value| == |f.channel_hist_value|
; [eval] |f.results_hist_value|
; [eval] |f.channel_hist_value|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01))))))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))))))
  $Snap.unit))
; [eval] |f.channel_hist_value| == size
; [eval] |f.channel_hist_value|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01))))))
  size@191@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))))))
  $Snap.unit))
; [eval] (forall i: Int, j: Int :: { f.channel_hist_value[i][j] } 0 <= i && (i < |f.channel_hist_value| && (0 <= j && j < |f.channel_hist_value[i]|)) ==> 0 <= f.channel_hist_value[i][j] && f.channel_hist_value[i][j] < max)
(declare-const i@195@01 Int)
(declare-const j@196@01 Int)
(push) ; 2
; [eval] 0 <= i && (i < |f.channel_hist_value| && (0 <= j && j < |f.channel_hist_value[i]|)) ==> 0 <= f.channel_hist_value[i][j] && f.channel_hist_value[i][j] < max
; [eval] 0 <= i && (i < |f.channel_hist_value| && (0 <= j && j < |f.channel_hist_value[i]|))
; [eval] 0 <= i
(push) ; 3
; [then-branch: 21 | 0 <= i@195@01 | live]
; [else-branch: 21 | !(0 <= i@195@01) | live]
(push) ; 4
; [then-branch: 21 | 0 <= i@195@01]
(assert (<= 0 i@195@01))
; [eval] i < |f.channel_hist_value|
; [eval] |f.channel_hist_value|
(push) ; 5
; [then-branch: 22 | i@195@01 < |First:(Second:(Second:(Second:($t@194@01))))| | live]
; [else-branch: 22 | !(i@195@01 < |First:(Second:(Second:(Second:($t@194@01))))|) | live]
(push) ; 6
; [then-branch: 22 | i@195@01 < |First:(Second:(Second:(Second:($t@194@01))))|]
(assert (<
  i@195@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01))))))))
; [eval] 0 <= j
(push) ; 7
; [then-branch: 23 | 0 <= j@196@01 | live]
; [else-branch: 23 | !(0 <= j@196@01) | live]
(push) ; 8
; [then-branch: 23 | 0 <= j@196@01]
(assert (<= 0 j@196@01))
; [eval] j < |f.channel_hist_value[i]|
; [eval] |f.channel_hist_value[i]|
; [eval] f.channel_hist_value[i]
(push) ; 9
(assert (not (>= i@195@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 23 | !(0 <= j@196@01)]
(assert (not (<= 0 j@196@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 22 | !(i@195@01 < |First:(Second:(Second:(Second:($t@194@01))))|)]
(assert (not
  (<
    i@195@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 21 | !(0 <= i@195@01)]
(assert (not (<= 0 i@195@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
; [then-branch: 24 | j@196@01 < |First:(Second:(Second:(Second:($t@194@01))))[i@195@01]| && 0 <= j@196@01 && i@195@01 < |First:(Second:(Second:(Second:($t@194@01))))| && 0 <= i@195@01 | live]
; [else-branch: 24 | !(j@196@01 < |First:(Second:(Second:(Second:($t@194@01))))[i@195@01]| && 0 <= j@196@01 && i@195@01 < |First:(Second:(Second:(Second:($t@194@01))))| && 0 <= i@195@01) | live]
(push) ; 4
; [then-branch: 24 | j@196@01 < |First:(Second:(Second:(Second:($t@194@01))))[i@195@01]| && 0 <= j@196@01 && i@195@01 < |First:(Second:(Second:(Second:($t@194@01))))| && 0 <= i@195@01]
(assert (and
  (and
    (and
      (<
        j@196@01
        (Seq_length
          (Seq_index
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))
            i@195@01)))
      (<= 0 j@196@01))
    (<
      i@195@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01))))))))
  (<= 0 i@195@01)))
; [eval] 0 <= f.channel_hist_value[i][j] && f.channel_hist_value[i][j] < max
; [eval] 0 <= f.channel_hist_value[i][j]
; [eval] f.channel_hist_value[i][j]
; [eval] f.channel_hist_value[i]
(push) ; 5
(assert (not (>= i@195@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (>= j@196@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch: 25 | 0 <= First:(Second:(Second:(Second:($t@194@01))))[i@195@01][j@196@01] | live]
; [else-branch: 25 | !(0 <= First:(Second:(Second:(Second:($t@194@01))))[i@195@01][j@196@01]) | live]
(push) ; 6
; [then-branch: 25 | 0 <= First:(Second:(Second:(Second:($t@194@01))))[i@195@01][j@196@01]]
(assert (<=
  0
  (Seq_index
    (Seq_index
      ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))
      i@195@01)
    j@196@01)))
; [eval] f.channel_hist_value[i][j] < max
; [eval] f.channel_hist_value[i][j]
; [eval] f.channel_hist_value[i]
(push) ; 7
(assert (not (>= i@195@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (>= j@196@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 25 | !(0 <= First:(Second:(Second:(Second:($t@194@01))))[i@195@01][j@196@01])]
(assert (not
  (<=
    0
    (Seq_index
      (Seq_index
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))
        i@195@01)
      j@196@01))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 24 | !(j@196@01 < |First:(Second:(Second:(Second:($t@194@01))))[i@195@01]| && 0 <= j@196@01 && i@195@01 < |First:(Second:(Second:(Second:($t@194@01))))| && 0 <= i@195@01)]
(assert (not
  (and
    (and
      (and
        (<
          j@196@01
          (Seq_length
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))
              i@195@01)))
        (<= 0 j@196@01))
      (<
        i@195@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01))))))))
    (<= 0 i@195@01))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (implies
  (and
    (and
      (and
        (<
          j@196@01
          (Seq_length
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))
              i@195@01)))
        (<= 0 j@196@01))
      (<
        i@195@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01))))))))
    (<= 0 i@195@01))
  (and
    (<
      j@196@01
      (Seq_length
        (Seq_index
          ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))
          i@195@01)))
    (<= 0 j@196@01)
    (<
      i@195@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))))
    (<= 0 i@195@01))))
; Joined path conditions
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@195@01 Int) (j@196@01 Int)) (!
  (implies
    (and
      (and
        (and
          (<
            j@196@01
            (Seq_length
              (Seq_index
                ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))
                i@195@01)))
          (<= 0 j@196@01))
        (<
          i@195@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01))))))))
      (<= 0 i@195@01))
    (and
      (<
        j@196@01
        (Seq_length
          (Seq_index
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))
            i@195@01)))
      (<= 0 j@196@01)
      (<
        i@195@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))))
      (<= 0 i@195@01)))
  :pattern ((Seq_index
    (Seq_index
      ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))
      i@195@01)
    j@196@01))
  :qid |prog.l547-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((i@195@01 Int) (j@196@01 Int)) (!
  (implies
    (and
      (and
        (and
          (<
            j@196@01
            (Seq_length
              (Seq_index
                ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))
                i@195@01)))
          (<= 0 j@196@01))
        (<
          i@195@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01))))))))
      (<= 0 i@195@01))
    (and
      (<
        (Seq_index
          (Seq_index
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))
            i@195@01)
          j@196@01)
        max@192@01)
      (<=
        0
        (Seq_index
          (Seq_index
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))
            i@195@01)
          j@196@01))))
  :pattern ((Seq_index
    (Seq_index
      ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))
      i@195@01)
    j@196@01))
  :qid |prog.l547|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@197@01 $Snap)
(assert (= $t@197@01 ($Snap.combine ($Snap.first $t@197@01) ($Snap.second $t@197@01))))
(assert (= ($Snap.first $t@197@01) $Snap.unit))
; [eval] sys__result != null
(assert (not (= sys__result@193@01 $Ref.null)))
(assert (=
  ($Snap.second $t@197@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@197@01))
    ($Snap.second ($Snap.second $t@197@01)))))
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second $t@197@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@197@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@197@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@197@01))) $Snap.unit))
; [eval] sys__result.field_Program_f == f
(assert (= ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@197@01))) f@190@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@197@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@197@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@197@01)))))))
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@197@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@197@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@197@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@197@01)))))
  $Snap.unit))
; [eval] sys__result.field_Program_size == size
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@197@01)))))
  size@191@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@197@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@197@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@197@01)))))))))
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@197@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@197@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@197@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@197@01)))))))
  $Snap.unit))
; [eval] sys__result.field_Program_maxvalue == max
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@197@01)))))))
  max@192@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@197@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@197@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@197@01)))))))))))
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@197@01))))))))
  $Snap.unit))
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@197@01))))))))))
(pop) ; 2
(push) ; 2
; [exec]
; var diz__6: Ref
(declare-const diz__6@198@01 $Ref)
; [exec]
; diz__6 := new(field_Program_initialised, field_Program_size, field_Program_maxvalue, field_Program_f)
(declare-const diz__6@199@01 $Ref)
(assert (not (= diz__6@199@01 $Ref.null)))
(declare-const field_Program_initialised@200@01 Bool)
(declare-const field_Program_size@201@01 Int)
(declare-const field_Program_maxvalue@202@01 Int)
(declare-const field_Program_f@203@01 $Ref)
(assert (not (= diz__6@199@01 f@190@01)))
(assert (not (= diz__6@199@01 diz__6@198@01)))
(assert (not (= diz__6@199@01 globals@189@01)))
(assert (not (= diz__6@199@01 sys__result@193@01)))
; [exec]
; diz__6.field_Program_f := f
; [exec]
; diz__6.field_Program_maxvalue := max
; [exec]
; diz__6.field_Program_size := size
; [exec]
; diz__6.field_Program_initialised := true
; [exec]
; fold acc(method_Program_lock_invariant(diz__6, globals), write)
; [eval] diz != null
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 3
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 3
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 3
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] 0 < diz.field_Program_maxvalue
(push) ; 3
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 26 | True | live]
; [else-branch: 26 | False | dead]
(push) ; 3
; [then-branch: 26 | True]
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 4
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_f != null
(push) ; 4
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 27 | True | live]
; [else-branch: 27 | False | dead]
(push) ; 4
; [then-branch: 27 | True]
; [eval] diz.field_Program_size == |diz.field_Program_f.channel_hist_value|
; [eval] |diz.field_Program_f.channel_hist_value|
(set-option :timeout 0)
(push) ; 5
(assert (not (=
  size@191@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  size@191@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01))))))))
(set-option :timeout 10)
(push) ; 5
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 28 | True | live]
; [else-branch: 28 | False | dead]
(push) ; 5
; [then-branch: 28 | True]
; [eval] diz.field_Program_size == |diz.field_Program_f.results_hist_value|
; [eval] |diz.field_Program_f.results_hist_value|
(set-option :timeout 0)
(push) ; 6
(assert (not (=
  size@191@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  size@191@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01))))))))))
; [eval] diz.field_Program_initialised ==> (forall i: Int, j: Int :: { diz.field_Program_f.channel_hist_value[i][j] } 0 <= i && (i < diz.field_Program_size && (0 <= j && j < |diz.field_Program_f.channel_hist_value[i]|)) ==> 0 <= diz.field_Program_f.channel_hist_value[i][j] && diz.field_Program_f.channel_hist_value[i][j] < diz.field_Program_maxvalue)
(push) ; 6
(set-option :timeout 10)
(push) ; 7
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 29 | True | live]
; [else-branch: 29 | False | dead]
(push) ; 7
; [then-branch: 29 | True]
; [eval] (forall i: Int, j: Int :: { diz.field_Program_f.channel_hist_value[i][j] } 0 <= i && (i < diz.field_Program_size && (0 <= j && j < |diz.field_Program_f.channel_hist_value[i]|)) ==> 0 <= diz.field_Program_f.channel_hist_value[i][j] && diz.field_Program_f.channel_hist_value[i][j] < diz.field_Program_maxvalue)
(declare-const i@204@01 Int)
(declare-const j@205@01 Int)
(push) ; 8
; [eval] 0 <= i && (i < diz.field_Program_size && (0 <= j && j < |diz.field_Program_f.channel_hist_value[i]|)) ==> 0 <= diz.field_Program_f.channel_hist_value[i][j] && diz.field_Program_f.channel_hist_value[i][j] < diz.field_Program_maxvalue
; [eval] 0 <= i && (i < diz.field_Program_size && (0 <= j && j < |diz.field_Program_f.channel_hist_value[i]|))
; [eval] 0 <= i
(push) ; 9
; [then-branch: 30 | 0 <= i@204@01 | live]
; [else-branch: 30 | !(0 <= i@204@01) | live]
(push) ; 10
; [then-branch: 30 | 0 <= i@204@01]
(assert (<= 0 i@204@01))
; [eval] i < diz.field_Program_size
(push) ; 11
; [then-branch: 31 | i@204@01 < size@191@01 | live]
; [else-branch: 31 | !(i@204@01 < size@191@01) | live]
(push) ; 12
; [then-branch: 31 | i@204@01 < size@191@01]
(assert (< i@204@01 size@191@01))
; [eval] 0 <= j
(push) ; 13
; [then-branch: 32 | 0 <= j@205@01 | live]
; [else-branch: 32 | !(0 <= j@205@01) | live]
(push) ; 14
; [then-branch: 32 | 0 <= j@205@01]
(assert (<= 0 j@205@01))
; [eval] j < |diz.field_Program_f.channel_hist_value[i]|
; [eval] |diz.field_Program_f.channel_hist_value[i]|
; [eval] diz.field_Program_f.channel_hist_value[i]
(set-option :timeout 0)
(push) ; 15
(assert (not (>= i@204@01 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
(assert (not (<
  i@204@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
(push) ; 14
; [else-branch: 32 | !(0 <= j@205@01)]
(assert (not (<= 0 j@205@01)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 31 | !(i@204@01 < size@191@01)]
(assert (not (< i@204@01 size@191@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 30 | !(0 <= i@204@01)]
(assert (not (<= 0 i@204@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 33 | j@205@01 < |First:(Second:(Second:(Second:($t@194@01))))[i@204@01]| && 0 <= j@205@01 && i@204@01 < size@191@01 && 0 <= i@204@01 | live]
; [else-branch: 33 | !(j@205@01 < |First:(Second:(Second:(Second:($t@194@01))))[i@204@01]| && 0 <= j@205@01 && i@204@01 < size@191@01 && 0 <= i@204@01) | live]
(push) ; 10
; [then-branch: 33 | j@205@01 < |First:(Second:(Second:(Second:($t@194@01))))[i@204@01]| && 0 <= j@205@01 && i@204@01 < size@191@01 && 0 <= i@204@01]
(assert (and
  (and
    (and
      (<
        j@205@01
        (Seq_length
          (Seq_index
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))
            i@204@01)))
      (<= 0 j@205@01))
    (< i@204@01 size@191@01))
  (<= 0 i@204@01)))
; [eval] 0 <= diz.field_Program_f.channel_hist_value[i][j] && diz.field_Program_f.channel_hist_value[i][j] < diz.field_Program_maxvalue
; [eval] 0 <= diz.field_Program_f.channel_hist_value[i][j]
; [eval] diz.field_Program_f.channel_hist_value[i][j]
; [eval] diz.field_Program_f.channel_hist_value[i]
(push) ; 11
(assert (not (>= i@204@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (<
  i@204@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>= j@205@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
; [then-branch: 34 | 0 <= First:(Second:(Second:(Second:($t@194@01))))[i@204@01][j@205@01] | live]
; [else-branch: 34 | !(0 <= First:(Second:(Second:(Second:($t@194@01))))[i@204@01][j@205@01]) | live]
(push) ; 12
; [then-branch: 34 | 0 <= First:(Second:(Second:(Second:($t@194@01))))[i@204@01][j@205@01]]
(assert (<=
  0
  (Seq_index
    (Seq_index
      ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))
      i@204@01)
    j@205@01)))
; [eval] diz.field_Program_f.channel_hist_value[i][j] < diz.field_Program_maxvalue
; [eval] diz.field_Program_f.channel_hist_value[i][j]
; [eval] diz.field_Program_f.channel_hist_value[i]
(push) ; 13
(assert (not (>= i@204@01 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (<
  i@204@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (>= j@205@01 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
(push) ; 12
; [else-branch: 34 | !(0 <= First:(Second:(Second:(Second:($t@194@01))))[i@204@01][j@205@01])]
(assert (not
  (<=
    0
    (Seq_index
      (Seq_index
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))
        i@204@01)
      j@205@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 33 | !(j@205@01 < |First:(Second:(Second:(Second:($t@194@01))))[i@204@01]| && 0 <= j@205@01 && i@204@01 < size@191@01 && 0 <= i@204@01)]
(assert (not
  (and
    (and
      (and
        (<
          j@205@01
          (Seq_length
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))
              i@204@01)))
        (<= 0 j@205@01))
      (< i@204@01 size@191@01))
    (<= 0 i@204@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (implies
  (and
    (and
      (and
        (<
          j@205@01
          (Seq_length
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))
              i@204@01)))
        (<= 0 j@205@01))
      (< i@204@01 size@191@01))
    (<= 0 i@204@01))
  (and
    (<
      j@205@01
      (Seq_length
        (Seq_index
          ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))
          i@204@01)))
    (<= 0 j@205@01)
    (< i@204@01 size@191@01)
    (<= 0 i@204@01))))
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@204@01 Int) (j@205@01 Int)) (!
  (implies
    (and
      (and
        (and
          (<
            j@205@01
            (Seq_length
              (Seq_index
                ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))
                i@204@01)))
          (<= 0 j@205@01))
        (< i@204@01 size@191@01))
      (<= 0 i@204@01))
    (and
      (<
        j@205@01
        (Seq_length
          (Seq_index
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))
            i@204@01)))
      (<= 0 j@205@01)
      (< i@204@01 size@191@01)
      (<= 0 i@204@01)))
  :pattern ((Seq_index
    (Seq_index
      ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))
      i@204@01)
    j@205@01))
  :qid |prog.l266-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (forall ((i@204@01 Int) (j@205@01 Int)) (!
  (implies
    (and
      (and
        (and
          (<
            j@205@01
            (Seq_length
              (Seq_index
                ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))
                i@204@01)))
          (<= 0 j@205@01))
        (< i@204@01 size@191@01))
      (<= 0 i@204@01))
    (and
      (<
        j@205@01
        (Seq_length
          (Seq_index
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))
            i@204@01)))
      (<= 0 j@205@01)
      (< i@204@01 size@191@01)
      (<= 0 i@204@01)))
  :pattern ((Seq_index
    (Seq_index
      ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))
      i@204@01)
    j@205@01))
  :qid |prog.l266-aux|)))
(push) ; 6
(assert (not (forall ((i@204@01 Int) (j@205@01 Int)) (!
  (implies
    (and
      (and
        (and
          (<
            j@205@01
            (Seq_length
              (Seq_index
                ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))
                i@204@01)))
          (<= 0 j@205@01))
        (< i@204@01 size@191@01))
      (<= 0 i@204@01))
    (and
      (<
        (Seq_index
          (Seq_index
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))
            i@204@01)
          j@205@01)
        max@192@01)
      (<=
        0
        (Seq_index
          (Seq_index
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))
            i@204@01)
          j@205@01))))
  :pattern ((Seq_index
    (Seq_index
      ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))
      i@204@01)
    j@205@01))
  :qid |prog.l266|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((i@204@01 Int) (j@205@01 Int)) (!
  (implies
    (and
      (and
        (and
          (<
            j@205@01
            (Seq_length
              (Seq_index
                ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))
                i@204@01)))
          (<= 0 j@205@01))
        (< i@204@01 size@191@01))
      (<= 0 i@204@01))
    (and
      (<
        (Seq_index
          (Seq_index
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))
            i@204@01)
          j@205@01)
        max@192@01)
      (<=
        0
        (Seq_index
          (Seq_index
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))
            i@204@01)
          j@205@01))))
  :pattern ((Seq_index
    (Seq_index
      ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))
      i@204@01)
    j@205@01))
  :qid |prog.l266|)))
(assert (method_Program_lock_invariant%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($SortWrappers.BoolTo$Snap true)
    ($Snap.combine
      ($SortWrappers.IntTo$Snap size@191@01)
      ($Snap.combine
        ($SortWrappers.IntTo$Snap max@192@01)
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.combine ($SortWrappers.$RefTo$Snap f@190@01) $Snap.unit)
            ($Snap.combine
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@194@01))))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))
                  $Snap.unit))
              ($Snap.combine
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01))))))
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@194@01)))))))
                    $Snap.unit))
                $Snap.unit)))))))) diz__6@199@01 globals@189@01))
; [exec]
; exhale acc(method_Program_lock_invariant(diz__6, globals), write)
; [exec]
; label method_end_constructor_Program_Program__Future__Integer__Integer_1
; [exec]
; sys__result := diz__6
; [exec]
; assert sys__result != null && (acc(sys__result.field_Program_f, 1 / 2) && (sys__result.field_Program_f == f && (acc(sys__result.field_Program_size, 1 / 2) && (sys__result.field_Program_size == size && (acc(sys__result.field_Program_maxvalue, 1 / 2) && (sys__result.field_Program_maxvalue == max && (acc(sys__result.field_Program_initialised, 1 / 2) && sys__result.field_Program_initialised)))))))
; [eval] sys__result != null
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] sys__result.field_Program_f == f
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] sys__result.field_Program_size == size
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] sys__result.field_Program_maxvalue == max
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale false
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- method_Program_lemma_sigmaRecv_choice__Future__Integer__Integer__Integer__Integer__Integer ----------
(declare-const diz@206@01 $Ref)
(declare-const current_thread_id@207@01 Int)
(declare-const globals@208@01 $Ref)
(declare-const f@209@01 $Ref)
(declare-const rank@210@01 Int)
(declare-const v@211@01 Int)
(declare-const w@212@01 Int)
(declare-const x@213@01 Int)
(declare-const n@214@01 Int)
(declare-const q@215@01 frac)
(declare-const diz@216@01 $Ref)
(declare-const current_thread_id@217@01 Int)
(declare-const globals@218@01 $Ref)
(declare-const f@219@01 $Ref)
(declare-const rank@220@01 Int)
(declare-const v@221@01 Int)
(declare-const w@222@01 Int)
(declare-const x@223@01 Int)
(declare-const n@224@01 Int)
(declare-const q@225@01 frac)
(push) ; 1
(declare-const $t@226@01 $Snap)
(assert (= $t@226@01 ($Snap.combine ($Snap.first $t@226@01) ($Snap.second $t@226@01))))
(assert (= ($Snap.first $t@226@01) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@216@01 $Ref.null)))
(assert (=
  ($Snap.second $t@226@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@226@01))
    ($Snap.second ($Snap.second $t@226@01)))))
(assert (= ($Snap.first ($Snap.second $t@226@01)) $Snap.unit))
; [eval] 0 <= current_thread_id
(assert (<= 0 current_thread_id@217@01))
(assert (=
  ($Snap.second ($Snap.second $t@226@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@226@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@226@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@226@01))) $Snap.unit))
; [eval] frac_val(q) != none
; [eval] frac_val(q)
(assert (not (= (frac_val<Perm> q@225@01) $Perm.No)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@226@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@226@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01)))))))
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01))))))))
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01))))))
  $Snap.unit))
; [eval] 0 <= diz.field_Program_size
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01)))))))
  $Snap.unit))
; [eval] f != null
(assert (not (= f@219@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01)))))))))))
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01))))))))))))
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01))))))))))
  $Snap.unit))
; [eval] 0 <= rank
(assert (<= 0 rank@220@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01)))))))))))
  $Snap.unit))
; [eval] rank < diz.field_Program_size
(assert (<
  rank@220@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01))))))))))))
  $Snap.unit))
; [eval] 0 <= x
(assert (<= 0 x@223@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01)))))))))))))
  $Snap.unit))
; [eval] x <= w
(assert (<= x@223@01 w@222@01))
; [eval] p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, w, diz.field_Program_maxvalue, n)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@227@01 $Snap)
(assert (= $t@227@01 ($Snap.combine ($Snap.first $t@227@01) ($Snap.second $t@227@01))))
(assert (= ($Snap.first $t@227@01) $Snap.unit))
; [eval] frac_val(q) != none
; [eval] frac_val(q)
(assert (=
  ($Snap.second $t@227@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@227@01))
    ($Snap.second ($Snap.second $t@227@01)))))
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second $t@227@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@227@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@227@01))))))
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@227@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@227@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@227@01))))
  $Snap.unit))
; [eval] 0 <= diz.field_Program_size
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@227@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@01)))))
  $Snap.unit))
; [eval] f != null
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@01)))))))))
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@01))))))))))
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@01))))))))
  $Snap.unit))
; [eval] 0 <= rank
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@01)))))))))
  $Snap.unit))
; [eval] rank < diz.field_Program_size
(assert (<
  rank@220@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@227@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@01))))))))))
  $Snap.unit))
; [eval] diz.field_Program_maxvalue == old(diz.field_Program_maxvalue)
; [eval] old(diz.field_Program_maxvalue)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@227@01)))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@226@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@01)))))))))))
  $Snap.unit))
; [eval] diz.field_Program_size == old(diz.field_Program_size)
; [eval] old(diz.field_Program_size)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@227@01))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@01))))))))))))
  $Snap.unit))
; [eval] f.channel_hist_value == old(f.channel_hist_value)
; [eval] old(f.channel_hist_value)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@227@01)))))))
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01)))))))))))
; [eval] p_seq(p_method_Future_Recv__Integer__Integer((rank - 1) % diz.field_Program_size, x), p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, x, diz.field_Program_maxvalue, n))
; [eval] p_method_Future_Recv__Integer__Integer((rank - 1) % diz.field_Program_size, x)
; [eval] (rank - 1) % diz.field_Program_size
; [eval] rank - 1
(push) ; 3
(assert (not (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@227@01))))
    0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, x, diz.field_Program_maxvalue, n)
(pop) ; 2
(push) ; 2
; [eval] x == w
(set-option :timeout 10)
(push) ; 3
(assert (not (not (= x@223@01 w@222@01))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (= x@223@01 w@222@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 35 | x@223@01 == w@222@01 | live]
; [else-branch: 35 | x@223@01 != w@222@01 | live]
(push) ; 3
; [then-branch: 35 | x@223@01 == w@222@01]
(assert (= x@223@01 w@222@01))
; [eval] 0 < x
(push) ; 4
(assert (not (not (< 0 x@223@01))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (< 0 x@223@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 36 | 0 < x@223@01 | live]
; [else-branch: 36 | !(0 < x@223@01) | live]
(push) ; 4
; [then-branch: 36 | 0 < x@223@01]
(assert (< 0 x@223@01))
; [exec]
; exhale acc(hist_idle(f, q, p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, w, diz.field_Program_maxvalue, n)), write)
; [eval] p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, w, diz.field_Program_maxvalue, n)
; [exec]
; assert p_is_choice(p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, w, diz.field_Program_maxvalue, n), p_seq(p_method_Future_Recv__Integer__Integer((rank - 1) % diz.field_Program_size, x), p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, w, diz.field_Program_maxvalue, n)))
; [eval] p_is_choice(p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, w, diz.field_Program_maxvalue, n), p_seq(p_method_Future_Recv__Integer__Integer((rank - 1) % diz.field_Program_size, x), p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, w, diz.field_Program_maxvalue, n)))
; [eval] p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, w, diz.field_Program_maxvalue, n)
; [eval] p_seq(p_method_Future_Recv__Integer__Integer((rank - 1) % diz.field_Program_size, x), p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, w, diz.field_Program_maxvalue, n))
; [eval] p_method_Future_Recv__Integer__Integer((rank - 1) % diz.field_Program_size, x)
; [eval] (rank - 1) % diz.field_Program_size
; [eval] rank - 1
(set-option :timeout 0)
(push) ; 5
(assert (not (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01))))))
    0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, w, diz.field_Program_maxvalue, n)
(push) ; 5
(assert (not (p_is_choice<Bool> (p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer<Process> rank@220@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01)))))) v@221@01 w@222@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@226@01))))) n@224@01) (p_seq<Process> (p_method_Future_Recv__Integer__Integer<Process> (mod
  (- rank@220@01 1)
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01))))))) x@223@01) (p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer<Process> rank@220@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01)))))) v@221@01 w@222@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@226@01))))) n@224@01)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (p_is_choice<Bool> (p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer<Process> rank@220@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01)))))) v@221@01 w@222@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@226@01))))) n@224@01) (p_seq<Process> (p_method_Future_Recv__Integer__Integer<Process> (mod
  (- rank@220@01 1)
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01))))))) x@223@01) (p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer<Process> rank@220@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01)))))) v@221@01 w@222@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@226@01))))) n@224@01))))
; [exec]
; inhale acc(hist_idle(f, q, p_seq(p_method_Future_Recv__Integer__Integer((rank - 1) % diz.field_Program_size, x), p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, w, diz.field_Program_maxvalue, n))), write)
; [eval] p_seq(p_method_Future_Recv__Integer__Integer((rank - 1) % diz.field_Program_size, x), p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, w, diz.field_Program_maxvalue, n))
; [eval] p_method_Future_Recv__Integer__Integer((rank - 1) % diz.field_Program_size, x)
; [eval] (rank - 1) % diz.field_Program_size
; [eval] rank - 1
(push) ; 5
(assert (not (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01))))))
    0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, w, diz.field_Program_maxvalue, n)
(declare-const $t@228@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label method_end_method_Program_lemma_sigmaRecv_choice__Future__Integer__Integer__Integer__Integer__Integer_2
; [eval] frac_val(q) != none
; [eval] frac_val(q)
(set-option :timeout 0)
(push) ; 5
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= diz.field_Program_size
; [eval] f != null
(push) ; 5
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= rank
; [eval] rank < diz.field_Program_size
; [eval] diz.field_Program_maxvalue == old(diz.field_Program_maxvalue)
; [eval] old(diz.field_Program_maxvalue)
; [eval] diz.field_Program_size == old(diz.field_Program_size)
; [eval] old(diz.field_Program_size)
; [eval] f.channel_hist_value == old(f.channel_hist_value)
; [eval] old(f.channel_hist_value)
; [eval] p_seq(p_method_Future_Recv__Integer__Integer((rank - 1) % diz.field_Program_size, x), p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, x, diz.field_Program_maxvalue, n))
; [eval] p_method_Future_Recv__Integer__Integer((rank - 1) % diz.field_Program_size, x)
; [eval] (rank - 1) % diz.field_Program_size
; [eval] rank - 1
(push) ; 5
(assert (not (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01))))))
    0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, x, diz.field_Program_maxvalue, n)
(set-option :timeout 10)
(push) ; 5
(assert (not (=
  (p_seq<Process> (p_method_Future_Recv__Integer__Integer<Process> (mod
    (- rank@220@01 1)
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01))))))) x@223@01) (p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer<Process> rank@220@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01)))))) v@221@01 w@222@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@226@01))))) n@224@01))
  (p_seq<Process> (p_method_Future_Recv__Integer__Integer<Process> (mod
    (- rank@220@01 1)
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01))))))) x@223@01) (p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer<Process> rank@220@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01)))))) v@221@01 x@223@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@226@01))))) n@224@01)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 36 | !(0 < x@223@01)]
(assert (not (< 0 x@223@01)))
(pop) ; 4
; [eval] !(0 < x)
; [eval] 0 < x
(push) ; 4
(assert (not (< 0 x@223@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (not (< 0 x@223@01))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 37 | !(0 < x@223@01) | live]
; [else-branch: 37 | 0 < x@223@01 | live]
(push) ; 4
; [then-branch: 37 | !(0 < x@223@01)]
(assert (not (< 0 x@223@01)))
; [exec]
; label method_end_method_Program_lemma_sigmaRecv_choice__Future__Integer__Integer__Integer__Integer__Integer_2
; [eval] frac_val(q) != none
; [eval] frac_val(q)
(set-option :timeout 0)
(push) ; 5
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= diz.field_Program_size
; [eval] f != null
(push) ; 5
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= rank
; [eval] rank < diz.field_Program_size
; [eval] diz.field_Program_maxvalue == old(diz.field_Program_maxvalue)
; [eval] old(diz.field_Program_maxvalue)
; [eval] diz.field_Program_size == old(diz.field_Program_size)
; [eval] old(diz.field_Program_size)
; [eval] f.channel_hist_value == old(f.channel_hist_value)
; [eval] old(f.channel_hist_value)
; [eval] p_seq(p_method_Future_Recv__Integer__Integer((rank - 1) % diz.field_Program_size, x), p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, x, diz.field_Program_maxvalue, n))
; [eval] p_method_Future_Recv__Integer__Integer((rank - 1) % diz.field_Program_size, x)
; [eval] (rank - 1) % diz.field_Program_size
; [eval] rank - 1
(push) ; 5
(assert (not (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01))))))
    0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, x, diz.field_Program_maxvalue, n)
(set-option :timeout 10)
(push) ; 5
(assert (not (=
  (p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer<Process> rank@220@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01)))))) v@221@01 w@222@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@226@01))))) n@224@01)
  (p_seq<Process> (p_method_Future_Recv__Integer__Integer<Process> (mod
    (- rank@220@01 1)
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01))))))) x@223@01) (p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer<Process> rank@220@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01)))))) v@221@01 x@223@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@226@01))))) n@224@01)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 37 | 0 < x@223@01]
(assert (< 0 x@223@01))
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 35 | x@223@01 != w@222@01]
(assert (not (= x@223@01 w@222@01)))
(pop) ; 3
; [eval] !(x == w)
; [eval] x == w
(push) ; 3
(assert (not (= x@223@01 w@222@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (not (= x@223@01 w@222@01))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 38 | x@223@01 != w@222@01 | live]
; [else-branch: 38 | x@223@01 == w@222@01 | live]
(push) ; 3
; [then-branch: 38 | x@223@01 != w@222@01]
(assert (not (= x@223@01 w@222@01)))
; [exec]
; exhale acc(hist_idle(f, q, p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, w, diz.field_Program_maxvalue, n)), write)
; [eval] p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, w, diz.field_Program_maxvalue, n)
; [exec]
; assert p_is_choice(p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, w, diz.field_Program_maxvalue, n), p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, w - 1, diz.field_Program_maxvalue, n))
; [eval] p_is_choice(p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, w, diz.field_Program_maxvalue, n), p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, w - 1, diz.field_Program_maxvalue, n))
; [eval] p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, w, diz.field_Program_maxvalue, n)
; [eval] p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, w - 1, diz.field_Program_maxvalue, n)
; [eval] w - 1
(set-option :timeout 0)
(push) ; 4
(assert (not (p_is_choice<Bool> (p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer<Process> rank@220@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01)))))) v@221@01 w@222@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@226@01))))) n@224@01) (p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer<Process> rank@220@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01)))))) v@221@01 (-
  w@222@01
  1) ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@226@01))))) n@224@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (p_is_choice<Bool> (p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer<Process> rank@220@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01)))))) v@221@01 w@222@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@226@01))))) n@224@01) (p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer<Process> rank@220@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01)))))) v@221@01 (-
  w@222@01
  1) ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@226@01))))) n@224@01)))
; [exec]
; inhale acc(hist_idle(f, q, p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, w - 1, diz.field_Program_maxvalue, n)), write)
; [eval] p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, w - 1, diz.field_Program_maxvalue, n)
; [eval] w - 1
(declare-const $t@229@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; method_Program_lemma_sigmaRecv_choice__Future__Integer__Integer__Integer__Integer__Integer(diz, current_thread_id, globals, f, rank, v, w - 1, x, n, q)
; [eval] w - 1
; [eval] diz != null
; [eval] 0 <= current_thread_id
; [eval] frac_val(q) != none
; [eval] frac_val(q)
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= diz.field_Program_size
; [eval] f != null
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= rank
; [eval] rank < diz.field_Program_size
; [eval] 0 <= x
; [eval] x <= w
(push) ; 4
(assert (not (<= x@223@01 (- w@222@01 1))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (<= x@223@01 (- w@222@01 1)))
; [eval] p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, w, diz.field_Program_maxvalue, n)
(declare-const $t@230@01 $Snap)
(assert (= $t@230@01 ($Snap.combine ($Snap.first $t@230@01) ($Snap.second $t@230@01))))
(assert (= ($Snap.first $t@230@01) $Snap.unit))
; [eval] frac_val(q) != none
; [eval] frac_val(q)
(assert (=
  ($Snap.second $t@230@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@230@01))
    ($Snap.second ($Snap.second $t@230@01)))))
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second $t@230@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@230@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@230@01))))))
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@230@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@230@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@230@01))))
  $Snap.unit))
; [eval] 0 <= diz.field_Program_size
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@230@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01)))))
  $Snap.unit))
; [eval] f != null
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01)))))))))
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01))))))))))
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01))))))))
  $Snap.unit))
; [eval] 0 <= rank
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01)))))))))
  $Snap.unit))
; [eval] rank < diz.field_Program_size
(assert (<
  rank@220@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@230@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01))))))))))
  $Snap.unit))
; [eval] diz.field_Program_maxvalue == old(diz.field_Program_maxvalue)
; [eval] old(diz.field_Program_maxvalue)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@230@01)))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@226@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01)))))))))))
  $Snap.unit))
; [eval] diz.field_Program_size == old(diz.field_Program_size)
; [eval] old(diz.field_Program_size)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@230@01))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01))))))))))))
  $Snap.unit))
; [eval] f.channel_hist_value == old(f.channel_hist_value)
; [eval] old(f.channel_hist_value)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@230@01)))))))
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@226@01)))))))))))
; [eval] p_seq(p_method_Future_Recv__Integer__Integer((rank - 1) % diz.field_Program_size, x), p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, x, diz.field_Program_maxvalue, n))
; [eval] p_method_Future_Recv__Integer__Integer((rank - 1) % diz.field_Program_size, x)
; [eval] (rank - 1) % diz.field_Program_size
; [eval] rank - 1
(push) ; 4
(assert (not (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@230@01))))
    0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, x, diz.field_Program_maxvalue, n)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; label method_end_method_Program_lemma_sigmaRecv_choice__Future__Integer__Integer__Integer__Integer__Integer_2
; [eval] frac_val(q) != none
; [eval] frac_val(q)
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= diz.field_Program_size
; [eval] f != null
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= rank
; [eval] rank < diz.field_Program_size
; [eval] diz.field_Program_maxvalue == old(diz.field_Program_maxvalue)
; [eval] old(diz.field_Program_maxvalue)
; [eval] diz.field_Program_size == old(diz.field_Program_size)
; [eval] old(diz.field_Program_size)
; [eval] f.channel_hist_value == old(f.channel_hist_value)
; [eval] old(f.channel_hist_value)
; [eval] p_seq(p_method_Future_Recv__Integer__Integer((rank - 1) % diz.field_Program_size, x), p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, x, diz.field_Program_maxvalue, n))
; [eval] p_method_Future_Recv__Integer__Integer((rank - 1) % diz.field_Program_size, x)
; [eval] (rank - 1) % diz.field_Program_size
; [eval] rank - 1
(push) ; 4
(assert (not (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@230@01))))
    0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, x, diz.field_Program_maxvalue, n)
(pop) ; 3
(push) ; 3
; [else-branch: 38 | x@223@01 == w@222@01]
(assert (= x@223@01 w@222@01))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- method_Program_lemma_fut_elect__Future__Integer__Integer__Integer__Integer__Integer ----------
(declare-const diz@231@01 $Ref)
(declare-const current_thread_id@232@01 Int)
(declare-const globals@233@01 $Ref)
(declare-const f@234@01 $Ref)
(declare-const rank@235@01 Int)
(declare-const size@236@01 Int)
(declare-const v@237@01 Int)
(declare-const maxvalue@238@01 Int)
(declare-const n@239@01 Int)
(declare-const q@240@01 frac)
(declare-const diz@241@01 $Ref)
(declare-const current_thread_id@242@01 Int)
(declare-const globals@243@01 $Ref)
(declare-const f@244@01 $Ref)
(declare-const rank@245@01 Int)
(declare-const size@246@01 Int)
(declare-const v@247@01 Int)
(declare-const maxvalue@248@01 Int)
(declare-const n@249@01 Int)
(declare-const q@250@01 frac)
(push) ; 1
(declare-const $t@251@01 $Snap)
(assert (= $t@251@01 ($Snap.combine ($Snap.first $t@251@01) ($Snap.second $t@251@01))))
(assert (= ($Snap.first $t@251@01) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@241@01 $Ref.null)))
(assert (=
  ($Snap.second $t@251@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@251@01))
    ($Snap.second ($Snap.second $t@251@01)))))
(assert (= ($Snap.first ($Snap.second $t@251@01)) $Snap.unit))
; [eval] 0 <= current_thread_id
(assert (<= 0 current_thread_id@242@01))
(assert (=
  ($Snap.second ($Snap.second $t@251@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@251@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@251@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@251@01))) $Snap.unit))
; [eval] frac_val(q) != none
; [eval] frac_val(q)
(assert (not (= (frac_val<Perm> q@250@01) $Perm.No)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@251@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@251@01))))
  $Snap.unit))
; [eval] n < size
(assert (< n@249@01 size@246@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@01)))))
  $Snap.unit))
; [eval] 0 <= rank
(assert (<= 0 rank@245@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@251@01))))))
  $Snap.unit))
; [eval] rank < size
(assert (< rank@245@01 size@246@01))
; [eval] p_method_Future_Elect__Integer__Integer__Integer__Integer__Integer(rank, size, v, maxvalue, n)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@252@01 $Snap)
(assert (= $t@252@01 ($Snap.combine ($Snap.first $t@252@01) ($Snap.second $t@252@01))))
(assert (= ($Snap.first $t@252@01) $Snap.unit))
; [eval] frac_val(q) != none
; [eval] frac_val(q)
; [eval] p_seq(p_method_Future_Send__Integer__Integer((rank + 1) % size, v), p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer(rank, size, v, maxvalue - 1, maxvalue, n))
; [eval] p_method_Future_Send__Integer__Integer((rank + 1) % size, v)
; [eval] (rank + 1) % size
; [eval] rank + 1
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= size@246@01 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer(rank, size, v, maxvalue - 1, maxvalue, n)
; [eval] maxvalue - 1
(pop) ; 2
(push) ; 2
; [exec]
; label method_end_method_Program_lemma_fut_elect__Future__Integer__Integer__Integer__Integer__Integer_3
; [eval] frac_val(q) != none
; [eval] frac_val(q)
; [eval] p_seq(p_method_Future_Send__Integer__Integer((rank + 1) % size, v), p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer(rank, size, v, maxvalue - 1, maxvalue, n))
; [eval] p_method_Future_Send__Integer__Integer((rank + 1) % size, v)
; [eval] (rank + 1) % size
; [eval] rank + 1
(push) ; 3
(assert (not (not (= size@246@01 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer(rank, size, v, maxvalue - 1, maxvalue, n)
; [eval] maxvalue - 1
(set-option :timeout 10)
(push) ; 3
(assert (not (=
  (p_method_Future_Elect__Integer__Integer__Integer__Integer__Integer<Process> rank@245@01 size@246@01 v@247@01 maxvalue@248@01 n@249@01)
  (p_seq<Process> (p_method_Future_Send__Integer__Integer<Process> (mod
    (+ rank@245@01 1)
    size@246@01) v@247@01) (p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer<Process> rank@245@01 size@246@01 v@247@01 (-
    maxvalue@248@01
    1) maxvalue@248@01 n@249@01)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(pop) ; 2
(pop) ; 1
; ---------- method_Program_mpi_send__Integer__Integer ----------
(declare-const diz@253@01 $Ref)
(declare-const current_thread_id@254@01 Int)
(declare-const globals@255@01 $Ref)
(declare-const rank@256@01 Int)
(declare-const msg@257@01 Int)
(declare-const q1@258@01 frac)
(declare-const q2@259@01 frac)
(declare-const P@260@01 Process)
(declare-const diz@261@01 $Ref)
(declare-const current_thread_id@262@01 Int)
(declare-const globals@263@01 $Ref)
(declare-const rank@264@01 Int)
(declare-const msg@265@01 Int)
(declare-const q1@266@01 frac)
(declare-const q2@267@01 frac)
(declare-const P@268@01 Process)
(push) ; 1
(declare-const $t@269@01 $Snap)
(assert (= $t@269@01 ($Snap.combine ($Snap.first $t@269@01) ($Snap.second $t@269@01))))
(assert (= ($Snap.first $t@269@01) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@261@01 $Ref.null)))
(assert (=
  ($Snap.second $t@269@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@269@01))
    ($Snap.second ($Snap.second $t@269@01)))))
(assert (= ($Snap.first ($Snap.second $t@269@01)) $Snap.unit))
; [eval] frac_val(q1) != none
; [eval] frac_val(q1)
(assert (not (= (frac_val<Perm> q1@266@01) $Perm.No)))
(assert (=
  ($Snap.second ($Snap.second $t@269@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@269@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@269@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@269@01))) $Snap.unit))
; [eval] frac_val(q2) != none
; [eval] frac_val(q2)
(assert (not (= (frac_val<Perm> q2@267@01) $Perm.No)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@269@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@269@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01)))))))
; [eval] frac_val(q1)
(assert (<= $Perm.No (frac_val<Perm> q1@266@01)))
(assert (<= (frac_val<Perm> q1@266@01) $Perm.Write))
(assert (implies (< $Perm.No (frac_val<Perm> q1@266@01)) (not (= diz@261@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01))))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01))))))
  $Snap.unit))
; [eval] 0 <= rank
(assert (<= 0 rank@264@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01)))))))
  $Snap.unit))
; [eval] rank < diz.field_Program_size
(push) ; 2
(assert (not (< $Perm.No (frac_val<Perm> q1@266@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (<
  rank@264@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@269@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01))))))))
  $Snap.unit))
; [eval] 0 <= msg
(assert (<= 0 msg@265@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01)))))))))
  $Snap.unit))
; [eval] msg < diz.field_Program_maxvalue
(push) ; 2
(assert (not (< $Perm.No (frac_val<Perm> q1@266@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (<
  msg@265@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01)))))))))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01)))))))))))
  $Snap.unit))
(push) ; 2
(assert (not (< $Perm.No (frac_val<Perm> q1@266@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01)))))))))))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01)))))))))))))
  $Snap.unit))
; [eval] diz.field_Program_f != null
(push) ; 2
(assert (not (< $Perm.No (frac_val<Perm> q1@266@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01)))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01))))))))))))))
  $Snap.unit))
; [eval] 0 <= current_thread_id
(assert (<= 0 current_thread_id@262@01))
(push) ; 2
(assert (not (< $Perm.No (frac_val<Perm> q1@266@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; [eval] p_seq(p_method_Future_Send__Integer__Integer(rank, msg), P)
; [eval] p_method_Future_Send__Integer__Integer(rank, msg)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@270@01 $Snap)
(assert (= $t@270@01 ($Snap.combine ($Snap.first $t@270@01) ($Snap.second $t@270@01))))
(assert (= ($Snap.first $t@270@01) $Snap.unit))
; [eval] frac_val(q1) != none
; [eval] frac_val(q1)
(assert (=
  ($Snap.second $t@270@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@270@01))
    ($Snap.second ($Snap.second $t@270@01)))))
(assert (= ($Snap.first ($Snap.second $t@270@01)) $Snap.unit))
; [eval] frac_val(q2) != none
; [eval] frac_val(q2)
(assert (=
  ($Snap.second ($Snap.second $t@270@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@270@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@270@01))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@270@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@270@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@01)))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@01)))))
  $Snap.unit))
; [eval] 0 <= rank
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@01))))))
  $Snap.unit))
; [eval] rank < diz.field_Program_size
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@266@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<
  rank@264@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@270@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@01)))))))
  $Snap.unit))
; [eval] 0 <= msg
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@01))))))))
  $Snap.unit))
; [eval] msg < diz.field_Program_maxvalue
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@266@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<
  msg@265@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@270@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@01))))))))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@01))))))))))
  $Snap.unit))
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@266@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@01))))))))))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@01))))))))))))
  $Snap.unit))
; [eval] diz.field_Program_f != null
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@266@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@01))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@01))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@266@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@01))))))))))))))
  $Snap.unit))
; [eval] diz.field_Program_size == old(diz.field_Program_size)
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@266@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_size)
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@266@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@270@01))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@269@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@01)))))))))))))))
  $Snap.unit))
; [eval] diz.field_Program_maxvalue == old(diz.field_Program_maxvalue)
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@266@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_maxvalue)
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@266@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@270@01)))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@01)))))))))))))))
  $Snap.unit))
; [eval] diz.field_Program_f == old(diz.field_Program_f)
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@266@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_f)
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@266@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@270@01))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01)))))))))))))))
(pop) ; 2
(push) ; 2
; [exec]
; var __flatten_7__7: Ref
(declare-const __flatten_7__7@271@01 $Ref)
; [exec]
; var __flatten_8__8: Seq[Seq[Int]]
(declare-const __flatten_8__8@272@01 Seq<Seq<Int>>)
; [exec]
; inhale acc(method_Program_lock_invariant(diz, globals), write)
(declare-const $t@273@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(method_Program_lock_invariant(diz, globals), write)
(assert (= $t@273@01 ($Snap.combine ($Snap.first $t@273@01) ($Snap.second $t@273@01))))
(assert (= ($Snap.first $t@273@01) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@273@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@273@01))
    ($Snap.second ($Snap.second $t@273@01)))))
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (< $Perm.No (frac_val<Perm> q1@266@01))
  (=
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@273@01)))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01))))))))))))))
(assert (<= $Perm.No (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))))
(assert (<= (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2))) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2))))
  (not (= diz@261@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@273@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@273@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@273@01))))))
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (< $Perm.No (frac_val<Perm> q1@266@01))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@273@01))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@269@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@273@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@273@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))))
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (< $Perm.No (frac_val<Perm> q1@266@01))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))
  $Snap.unit))
; [eval] 0 < diz.field_Program_maxvalue
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))))))
(push) ; 3
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@273@01))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(assert (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@273@01)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 39 | First:(Second:($t@273@01)) | live]
; [else-branch: 39 | !(First:(Second:($t@273@01))) | dead]
(push) ; 3
; [then-branch: 39 | First:(Second:($t@273@01))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@273@01))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01))))))))))
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (< $Perm.No (frac_val<Perm> q1@266@01))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01))))))))))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))))
  $Snap.unit))
; [eval] diz.field_Program_f != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01))))))))))
(push) ; 4
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@273@01))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 40 | First:(Second:($t@273@01)) | live]
; [else-branch: 40 | !(First:(Second:($t@273@01))) | dead]
(push) ; 4
; [then-branch: 40 | First:(Second:($t@273@01))]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01))))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))))))
  $Snap.unit))
; [eval] diz.field_Program_size == |diz.field_Program_f.channel_hist_value|
(push) ; 5
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] |diz.field_Program_f.channel_hist_value|
(push) ; 5
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@273@01))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))))))))
(push) ; 5
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@273@01))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 41 | First:(Second:($t@273@01)) | live]
; [else-branch: 41 | !(First:(Second:($t@273@01))) | dead]
(push) ; 5
; [then-branch: 41 | First:(Second:($t@273@01))]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01))))))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))))))))))
(push) ; 6
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01))))))))))
  $Snap.unit))
; [eval] diz.field_Program_size == |diz.field_Program_f.results_hist_value|
(push) ; 6
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] |diz.field_Program_f.results_hist_value|
(push) ; 6
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@273@01))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01))))))))
  $Snap.unit))
; [eval] diz.field_Program_initialised ==> (forall i: Int, j: Int :: { diz.field_Program_f.channel_hist_value[i][j] } 0 <= i && (i < diz.field_Program_size && (0 <= j && j < |diz.field_Program_f.channel_hist_value[i]|)) ==> 0 <= diz.field_Program_f.channel_hist_value[i][j] && diz.field_Program_f.channel_hist_value[i][j] < diz.field_Program_maxvalue)
(push) ; 6
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(push) ; 7
(assert (not (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@273@01))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 42 | First:(Second:($t@273@01)) | live]
; [else-branch: 42 | !(First:(Second:($t@273@01))) | dead]
(push) ; 7
; [then-branch: 42 | First:(Second:($t@273@01))]
; [eval] (forall i: Int, j: Int :: { diz.field_Program_f.channel_hist_value[i][j] } 0 <= i && (i < diz.field_Program_size && (0 <= j && j < |diz.field_Program_f.channel_hist_value[i]|)) ==> 0 <= diz.field_Program_f.channel_hist_value[i][j] && diz.field_Program_f.channel_hist_value[i][j] < diz.field_Program_maxvalue)
(declare-const i@274@01 Int)
(declare-const j@275@01 Int)
(push) ; 8
; [eval] 0 <= i && (i < diz.field_Program_size && (0 <= j && j < |diz.field_Program_f.channel_hist_value[i]|)) ==> 0 <= diz.field_Program_f.channel_hist_value[i][j] && diz.field_Program_f.channel_hist_value[i][j] < diz.field_Program_maxvalue
; [eval] 0 <= i && (i < diz.field_Program_size && (0 <= j && j < |diz.field_Program_f.channel_hist_value[i]|))
; [eval] 0 <= i
(push) ; 9
; [then-branch: 43 | 0 <= i@274@01 | live]
; [else-branch: 43 | !(0 <= i@274@01) | live]
(push) ; 10
; [then-branch: 43 | 0 <= i@274@01]
(assert (<= 0 i@274@01))
; [eval] i < diz.field_Program_size
(push) ; 11
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
; [then-branch: 44 | i@274@01 < First:(Second:(Second:($t@273@01))) | live]
; [else-branch: 44 | !(i@274@01 < First:(Second:(Second:($t@273@01)))) | live]
(push) ; 12
; [then-branch: 44 | i@274@01 < First:(Second:(Second:($t@273@01)))]
(assert (<
  i@274@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@273@01))))))
; [eval] 0 <= j
(push) ; 13
; [then-branch: 45 | 0 <= j@275@01 | live]
; [else-branch: 45 | !(0 <= j@275@01) | live]
(push) ; 14
; [then-branch: 45 | 0 <= j@275@01]
(assert (<= 0 j@275@01))
; [eval] j < |diz.field_Program_f.channel_hist_value[i]|
; [eval] |diz.field_Program_f.channel_hist_value[i]|
; [eval] diz.field_Program_f.channel_hist_value[i]
(push) ; 15
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(assert (not (>= i@274@01 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
(assert (not (<
  i@274@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
(push) ; 14
; [else-branch: 45 | !(0 <= j@275@01)]
(assert (not (<= 0 j@275@01)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 44 | !(i@274@01 < First:(Second:(Second:($t@273@01))))]
(assert (not
  (<
    i@274@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@273@01)))))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 43 | !(0 <= i@274@01)]
(assert (not (<= 0 i@274@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 46 | j@275@01 < |First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@273@01))))))))[i@274@01]| && 0 <= j@275@01 && i@274@01 < First:(Second:(Second:($t@273@01))) && 0 <= i@274@01 | live]
; [else-branch: 46 | !(j@275@01 < |First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@273@01))))))))[i@274@01]| && 0 <= j@275@01 && i@274@01 < First:(Second:(Second:($t@273@01))) && 0 <= i@274@01) | live]
(push) ; 10
; [then-branch: 46 | j@275@01 < |First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@273@01))))))))[i@274@01]| && 0 <= j@275@01 && i@274@01 < First:(Second:(Second:($t@273@01))) && 0 <= i@274@01]
(assert (and
  (and
    (and
      (<
        j@275@01
        (Seq_length
          (Seq_index
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))))))
            i@274@01)))
      (<= 0 j@275@01))
    (<
      i@274@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@273@01))))))
  (<= 0 i@274@01)))
; [eval] 0 <= diz.field_Program_f.channel_hist_value[i][j] && diz.field_Program_f.channel_hist_value[i][j] < diz.field_Program_maxvalue
; [eval] 0 <= diz.field_Program_f.channel_hist_value[i][j]
; [eval] diz.field_Program_f.channel_hist_value[i][j]
; [eval] diz.field_Program_f.channel_hist_value[i]
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i@274@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (<
  i@274@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>= j@275@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
; [then-branch: 47 | 0 <= First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@273@01))))))))[i@274@01][j@275@01] | live]
; [else-branch: 47 | !(0 <= First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@273@01))))))))[i@274@01][j@275@01]) | live]
(push) ; 12
; [then-branch: 47 | 0 <= First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@273@01))))))))[i@274@01][j@275@01]]
(assert (<=
  0
  (Seq_index
    (Seq_index
      ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))))))
      i@274@01)
    j@275@01)))
; [eval] diz.field_Program_f.channel_hist_value[i][j] < diz.field_Program_maxvalue
; [eval] diz.field_Program_f.channel_hist_value[i][j]
; [eval] diz.field_Program_f.channel_hist_value[i]
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(assert (not (>= i@274@01 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (<
  i@274@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (>= j@275@01 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
(push) ; 12
; [else-branch: 47 | !(0 <= First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@273@01))))))))[i@274@01][j@275@01])]
(assert (not
  (<=
    0
    (Seq_index
      (Seq_index
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))))))
        i@274@01)
      j@275@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 46 | !(j@275@01 < |First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@273@01))))))))[i@274@01]| && 0 <= j@275@01 && i@274@01 < First:(Second:(Second:($t@273@01))) && 0 <= i@274@01)]
(assert (not
  (and
    (and
      (and
        (<
          j@275@01
          (Seq_length
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))))))
              i@274@01)))
        (<= 0 j@275@01))
      (<
        i@274@01
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@273@01))))))
    (<= 0 i@274@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (implies
  (and
    (and
      (and
        (<
          j@275@01
          (Seq_length
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))))))
              i@274@01)))
        (<= 0 j@275@01))
      (<
        i@274@01
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@273@01))))))
    (<= 0 i@274@01))
  (and
    (<
      j@275@01
      (Seq_length
        (Seq_index
          ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))))))
          i@274@01)))
    (<= 0 j@275@01)
    (<
      i@274@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@273@01)))))
    (<= 0 i@274@01))))
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@274@01 Int) (j@275@01 Int)) (!
  (implies
    (and
      (and
        (and
          (<
            j@275@01
            (Seq_length
              (Seq_index
                ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))))))
                i@274@01)))
          (<= 0 j@275@01))
        (<
          i@274@01
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@273@01))))))
      (<= 0 i@274@01))
    (and
      (<
        j@275@01
        (Seq_length
          (Seq_index
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))))))
            i@274@01)))
      (<= 0 j@275@01)
      (<
        i@274@01
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@273@01)))))
      (<= 0 i@274@01)))
  :pattern ((Seq_index
    (Seq_index
      ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))))))
      i@274@01)
    j@275@01))
  :qid |prog.l266-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (implies
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@273@01)))
  (forall ((i@274@01 Int) (j@275@01 Int)) (!
    (implies
      (and
        (and
          (and
            (<
              j@275@01
              (Seq_length
                (Seq_index
                  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))))))
                  i@274@01)))
            (<= 0 j@275@01))
          (<
            i@274@01
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@273@01))))))
        (<= 0 i@274@01))
      (and
        (<
          j@275@01
          (Seq_length
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))))))
              i@274@01)))
        (<= 0 j@275@01)
        (<
          i@274@01
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@273@01)))))
        (<= 0 i@274@01)))
    :pattern ((Seq_index
      (Seq_index
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))))))
        i@274@01)
      j@275@01))
    :qid |prog.l266-aux|))))
(assert (implies
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@273@01)))
  (forall ((i@274@01 Int) (j@275@01 Int)) (!
    (implies
      (and
        (and
          (and
            (<
              j@275@01
              (Seq_length
                (Seq_index
                  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))))))
                  i@274@01)))
            (<= 0 j@275@01))
          (<
            i@274@01
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@273@01))))))
        (<= 0 i@274@01))
      (and
        (<
          (Seq_index
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))))))
              i@274@01)
            j@275@01)
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@273@01))))))
        (<=
          0
          (Seq_index
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))))))
              i@274@01)
            j@275@01))))
    :pattern ((Seq_index
      (Seq_index
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))))))
        i@274@01)
      j@275@01))
    :qid |prog.l266|))))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (method_Program_lock_invariant%trigger $t@273@01 diz@261@01 globals@263@01))
; [exec]
; inhale acc(method_Program_lock_held(diz, globals), write)
(declare-const $t@276@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; method_Future_Send__Integer__Integer_begin(diz.field_Program_f, current_thread_id, q2, P, rank, msg)
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] diz != null
; [eval] 0 <= current_thread_id
; [eval] frac_val(fr) != none
; [eval] frac_val(fr)
; [eval] p_seq(p_method_Future_Send__Integer__Integer(rank, msg), proc)
; [eval] p_method_Future_Send__Integer__Integer(rank, msg)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01)))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] write != none
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (not (= $Perm.Write $Perm.No)))
; [eval] 0 <= rank
; [eval] rank < |diz.channel_hist_value|
; [eval] |diz.channel_hist_value|
(push) ; 6
(assert (not (<
  rank@264@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (<
  rank@264@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01))))))))))))
(declare-const $t@277@01 $Snap)
(assert (= $t@277@01 ($Snap.combine ($Snap.first $t@277@01) ($Snap.second $t@277@01))))
(assert (= ($Snap.first $t@277@01) $Snap.unit))
; [eval] frac_val(fr) != none
; [eval] frac_val(fr)
(assert (=
  ($Snap.second $t@277@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@277@01))
    ($Snap.second ($Snap.second $t@277@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@277@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@277@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@277@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))))
  $Snap.unit))
; [eval] diz.channel_hist_value == diz.channel_hist_act
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@277@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))))
  $Snap.unit))
; [eval] diz.channel_hist_value == old(diz.channel_hist_value)
; [eval] old(diz.channel_hist_value)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; __flatten_7__7 := diz.field_Program_f
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const __flatten_7__7@278@01 $Ref)
(assert (=
  __flatten_7__7@278@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01))))))))))
; [exec]
; __flatten_8__8 := method_Program_push__Sequence$Sequence$Integer$$__Integer__Integer(diz, __flatten_7__7.channel_hist_value, rank, msg)
; [eval] method_Program_push__Sequence$Sequence$Integer$$__Integer__Integer(diz, __flatten_7__7.channel_hist_value, rank, msg)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01))))))))
  __flatten_7__7@278@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [eval] diz != null
; [eval] 0 <= i
; [eval] i < |xs|
; [eval] |xs|
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  rank@264@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01)))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<
  rank@264@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))))
(pop) ; 6
; Joined path conditions
(assert (<
  rank@264@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))))))
(declare-const __flatten_8__8@279@01 Seq<Seq<Int>>)
(assert (Seq_equal
  __flatten_8__8@279@01
  (method_Program_push__Sequence$Sequence$Integer$$__Integer__Integer ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) diz@261@01 ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@277@01))))) rank@264@01 msg@265@01)))
; [exec]
; hist_set_channel(diz.field_Program_f, current_thread_id, __flatten_8__8)
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] diz != null
; [eval] 0 <= current_thread_id
(declare-const $t@280@01 $Snap)
(assert (= $t@280@01 ($Snap.combine ($Snap.first $t@280@01) ($Snap.second $t@280@01))))
(assert (=
  ($Snap.second $t@280@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@280@01))
    ($Snap.second ($Snap.second $t@280@01)))))
(assert (= ($Snap.first ($Snap.second $t@280@01)) $Snap.unit))
; [eval] diz.channel_hist_value == value
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@280@01))
  __flatten_8__8@279@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; method_Future_Send__Integer__Integer_commit(diz.field_Program_f, current_thread_id, q2, P, rank, msg)
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] diz != null
; [eval] 0 <= current_thread_id
; [eval] frac_val(fr) != none
; [eval] frac_val(fr)
; [eval] write != none
; [eval] 0 <= rank
; [eval] rank < |diz.channel_hist_value|
; [eval] |diz.channel_hist_value|
(set-option :timeout 0)
(push) ; 6
(assert (not (<
  rank@264@01
  (Seq_length ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@280@01))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (<
  rank@264@01
  (Seq_length ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@280@01)))))
; [eval] |diz.channel_hist_value| == |diz.channel_hist_act|
; [eval] |diz.channel_hist_value|
; [eval] |diz.channel_hist_act|
(push) ; 6
(assert (not (=
  (Seq_length ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@280@01)))
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@277@01))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@280@01)))
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@277@01)))))))
; [eval] diz.channel_hist_value[rank] == diz.channel_hist_act[rank] ++ Seq(msg)
; [eval] diz.channel_hist_value[rank]
(push) ; 6
(assert (not (>= rank@264@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] diz.channel_hist_act[rank] ++ Seq(msg)
; [eval] diz.channel_hist_act[rank]
(push) ; 6
(assert (not (>= rank@264@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (<
  rank@264@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@277@01))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] Seq(msg)
(assert (= (Seq_length (Seq_singleton msg@265@01)) 1))
(push) ; 6
(assert (not (Seq_equal
  (Seq_index
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@280@01))
    rank@264@01)
  (Seq_append
    (Seq_index
      ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@277@01))))
      rank@264@01)
    (Seq_singleton msg@265@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  (Seq_index
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@280@01))
    rank@264@01)
  (Seq_append
    (Seq_index
      ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@277@01))))
      rank@264@01)
    (Seq_singleton msg@265@01))))
; [eval] (forall i: Int :: { diz.channel_hist_value[i] } { diz.channel_hist_act[i] } 0 <= i && (i < |diz.channel_hist_value| && i != rank) ==> diz.channel_hist_value[i] == diz.channel_hist_act[i])
(declare-const i@281@01 Int)
(push) ; 6
; [eval] 0 <= i && (i < |diz.channel_hist_value| && i != rank) ==> diz.channel_hist_value[i] == diz.channel_hist_act[i]
; [eval] 0 <= i && (i < |diz.channel_hist_value| && i != rank)
; [eval] 0 <= i
(push) ; 7
; [then-branch: 48 | 0 <= i@281@01 | live]
; [else-branch: 48 | !(0 <= i@281@01) | live]
(push) ; 8
; [then-branch: 48 | 0 <= i@281@01]
(assert (<= 0 i@281@01))
; [eval] i < |diz.channel_hist_value|
; [eval] |diz.channel_hist_value|
(push) ; 9
; [then-branch: 49 | i@281@01 < |First:($t@280@01)| | live]
; [else-branch: 49 | !(i@281@01 < |First:($t@280@01)|) | live]
(push) ; 10
; [then-branch: 49 | i@281@01 < |First:($t@280@01)|]
(assert (<
  i@281@01
  (Seq_length ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@280@01)))))
; [eval] i != rank
(pop) ; 10
(push) ; 10
; [else-branch: 49 | !(i@281@01 < |First:($t@280@01)|)]
(assert (not
  (<
    i@281@01
    (Seq_length ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@280@01))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 48 | !(0 <= i@281@01)]
(assert (not (<= 0 i@281@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 50 | i@281@01 != rank@264@01 && i@281@01 < |First:($t@280@01)| && 0 <= i@281@01 | live]
; [else-branch: 50 | !(i@281@01 != rank@264@01 && i@281@01 < |First:($t@280@01)| && 0 <= i@281@01) | live]
(push) ; 8
; [then-branch: 50 | i@281@01 != rank@264@01 && i@281@01 < |First:($t@280@01)| && 0 <= i@281@01]
(assert (and
  (and
    (not (= i@281@01 rank@264@01))
    (<
      i@281@01
      (Seq_length ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@280@01)))))
  (<= 0 i@281@01)))
; [eval] diz.channel_hist_value[i] == diz.channel_hist_act[i]
; [eval] diz.channel_hist_value[i]
(push) ; 9
(assert (not (>= i@281@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] diz.channel_hist_act[i]
(push) ; 9
(assert (not (>= i@281@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (<
  i@281@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@277@01))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 50 | !(i@281@01 != rank@264@01 && i@281@01 < |First:($t@280@01)| && 0 <= i@281@01)]
(assert (not
  (and
    (and
      (not (= i@281@01 rank@264@01))
      (<
        i@281@01
        (Seq_length ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@280@01)))))
    (<= 0 i@281@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (implies
  (and
    (and
      (not (= i@281@01 rank@264@01))
      (<
        i@281@01
        (Seq_length ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@280@01)))))
    (<= 0 i@281@01))
  (and
    (not (= i@281@01 rank@264@01))
    (<
      i@281@01
      (Seq_length ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@280@01))))
    (<= 0 i@281@01))))
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@281@01 Int)) (!
  (implies
    (and
      (and
        (not (= i@281@01 rank@264@01))
        (<
          i@281@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@280@01)))))
      (<= 0 i@281@01))
    (and
      (not (= i@281@01 rank@264@01))
      (<
        i@281@01
        (Seq_length ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@280@01))))
      (<= 0 i@281@01)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@280@01))
    i@281@01))
  :qid |prog.l307-aux|)))
(assert (forall ((i@281@01 Int)) (!
  (implies
    (and
      (and
        (not (= i@281@01 rank@264@01))
        (<
          i@281@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@280@01)))))
      (<= 0 i@281@01))
    (and
      (not (= i@281@01 rank@264@01))
      (<
        i@281@01
        (Seq_length ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@280@01))))
      (<= 0 i@281@01)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@277@01))))
    i@281@01))
  :qid |prog.l307-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 6
(assert (not (forall ((i@281@01 Int)) (!
  (implies
    (and
      (and
        (not (= i@281@01 rank@264@01))
        (<
          i@281@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@280@01)))))
      (<= 0 i@281@01))
    (Seq_equal
      (Seq_index
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@280@01))
        i@281@01)
      (Seq_index
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@277@01))))
        i@281@01)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@280@01))
    i@281@01))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@277@01))))
    i@281@01))
  :qid |prog.l307|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((i@281@01 Int)) (!
  (implies
    (and
      (and
        (not (= i@281@01 rank@264@01))
        (<
          i@281@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@280@01)))))
      (<= 0 i@281@01))
    (Seq_equal
      (Seq_index
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@280@01))
        i@281@01)
      (Seq_index
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@277@01))))
        i@281@01)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@280@01))
    i@281@01))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@277@01))))
    i@281@01))
  :qid |prog.l307|)))
(declare-const $t@282@01 $Snap)
(assert (= $t@282@01 ($Snap.combine ($Snap.first $t@282@01) ($Snap.second $t@282@01))))
(assert (= ($Snap.first $t@282@01) $Snap.unit))
; [eval] frac_val(fr) != none
; [eval] frac_val(fr)
(assert (=
  ($Snap.second $t@282@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@282@01))
    ($Snap.second ($Snap.second $t@282@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@282@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@282@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@282@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@282@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@282@01))))
  $Snap.unit))
; [eval] diz.channel_hist_value == old(diz.channel_hist_value)
; [eval] old(diz.channel_hist_value)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@282@01))))
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@280@01))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; exhale acc(method_Program_lock_held(diz, globals), write)
; [exec]
; fold acc(method_Program_lock_invariant(diz, globals), write)
; [eval] diz != null
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 6
(assert (not (=
  (-
    (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (-
    (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2))))))
(assert (<=
  (-
    (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2))))
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2)))))
  (not (= diz@261@01 $Ref.null))))
(set-option :timeout 0)
(push) ; 6
(assert (not (or
  (=
    (-
      (/ (to_real 1) (to_real 2))
      ($Perm.min
        (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    $Perm.No)
  (<
    (-
      (/ (to_real 1) (to_real 2))
      ($Perm.min
        (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 6
(assert (not (=
  (-
    (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(assert (not (or
  (=
    (-
      (/ (to_real 1) (to_real 2))
      ($Perm.min
        (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    $Perm.No)
  (<
    (-
      (/ (to_real 1) (to_real 2))
      ($Perm.min
        (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 6
(assert (not (=
  (-
    (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(assert (not (or
  (=
    (-
      (/ (to_real 1) (to_real 2))
      ($Perm.min
        (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    $Perm.No)
  (<
    (-
      (/ (to_real 1) (to_real 2))
      ($Perm.min
        (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] 0 < diz.field_Program_maxvalue
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@273@01))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 51 | First:(Second:($t@273@01)) | live]
; [else-branch: 51 | !(First:(Second:($t@273@01))) | dead]
(push) ; 6
; [then-branch: 51 | First:(Second:($t@273@01))]
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 7
(assert (not (=
  (-
    (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (or
  (=
    (-
      (/ (to_real 1) (to_real 2))
      ($Perm.min
        (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    $Perm.No)
  (<
    (-
      (/ (to_real 1) (to_real 2))
      ($Perm.min
        (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_f != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@273@01))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 52 | First:(Second:($t@273@01)) | live]
; [else-branch: 52 | !(First:(Second:($t@273@01))) | dead]
(push) ; 7
; [then-branch: 52 | First:(Second:($t@273@01))]
(push) ; 8
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_size == |diz.field_Program_f.channel_hist_value|
(push) ; 8
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] |diz.field_Program_f.channel_hist_value|
(push) ; 8
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@273@01))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@282@01))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@273@01))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@282@01)))))))
(set-option :timeout 10)
(push) ; 8
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@273@01))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 53 | First:(Second:($t@273@01)) | live]
; [else-branch: 53 | !(First:(Second:($t@273@01))) | dead]
(push) ; 8
; [then-branch: 53 | First:(Second:($t@273@01))]
(push) ; 9
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_size == |diz.field_Program_f.results_hist_value|
(push) ; 9
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] |diz.field_Program_f.results_hist_value|
(push) ; 9
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_initialised ==> (forall i: Int, j: Int :: { diz.field_Program_f.channel_hist_value[i][j] } 0 <= i && (i < diz.field_Program_size && (0 <= j && j < |diz.field_Program_f.channel_hist_value[i]|)) ==> 0 <= diz.field_Program_f.channel_hist_value[i][j] && diz.field_Program_f.channel_hist_value[i][j] < diz.field_Program_maxvalue)
(push) ; 9
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(push) ; 10
(assert (not (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@273@01))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 54 | First:(Second:($t@273@01)) | live]
; [else-branch: 54 | !(First:(Second:($t@273@01))) | dead]
(push) ; 10
; [then-branch: 54 | First:(Second:($t@273@01))]
; [eval] (forall i: Int, j: Int :: { diz.field_Program_f.channel_hist_value[i][j] } 0 <= i && (i < diz.field_Program_size && (0 <= j && j < |diz.field_Program_f.channel_hist_value[i]|)) ==> 0 <= diz.field_Program_f.channel_hist_value[i][j] && diz.field_Program_f.channel_hist_value[i][j] < diz.field_Program_maxvalue)
(declare-const i@283@01 Int)
(declare-const j@284@01 Int)
(push) ; 11
; [eval] 0 <= i && (i < diz.field_Program_size && (0 <= j && j < |diz.field_Program_f.channel_hist_value[i]|)) ==> 0 <= diz.field_Program_f.channel_hist_value[i][j] && diz.field_Program_f.channel_hist_value[i][j] < diz.field_Program_maxvalue
; [eval] 0 <= i && (i < diz.field_Program_size && (0 <= j && j < |diz.field_Program_f.channel_hist_value[i]|))
; [eval] 0 <= i
(push) ; 12
; [then-branch: 55 | 0 <= i@283@01 | live]
; [else-branch: 55 | !(0 <= i@283@01) | live]
(push) ; 13
; [then-branch: 55 | 0 <= i@283@01]
(assert (<= 0 i@283@01))
; [eval] i < diz.field_Program_size
(push) ; 14
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
; [then-branch: 56 | i@283@01 < First:(Second:(Second:($t@273@01))) | live]
; [else-branch: 56 | !(i@283@01 < First:(Second:(Second:($t@273@01)))) | live]
(push) ; 15
; [then-branch: 56 | i@283@01 < First:(Second:(Second:($t@273@01)))]
(assert (<
  i@283@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@273@01))))))
; [eval] 0 <= j
(push) ; 16
; [then-branch: 57 | 0 <= j@284@01 | live]
; [else-branch: 57 | !(0 <= j@284@01) | live]
(push) ; 17
; [then-branch: 57 | 0 <= j@284@01]
(assert (<= 0 j@284@01))
; [eval] j < |diz.field_Program_f.channel_hist_value[i]|
; [eval] |diz.field_Program_f.channel_hist_value[i]|
; [eval] diz.field_Program_f.channel_hist_value[i]
(push) ; 18
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(assert (not (>= i@283@01 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(assert (not (<
  i@283@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@282@01))))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(pop) ; 17
(push) ; 17
; [else-branch: 57 | !(0 <= j@284@01)]
(assert (not (<= 0 j@284@01)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(push) ; 15
; [else-branch: 56 | !(i@283@01 < First:(Second:(Second:($t@273@01))))]
(assert (not
  (<
    i@283@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@273@01)))))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(push) ; 13
; [else-branch: 55 | !(0 <= i@283@01)]
(assert (not (<= 0 i@283@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
; [then-branch: 58 | j@284@01 < |First:(Second:(Second:($t@282@01)))[i@283@01]| && 0 <= j@284@01 && i@283@01 < First:(Second:(Second:($t@273@01))) && 0 <= i@283@01 | live]
; [else-branch: 58 | !(j@284@01 < |First:(Second:(Second:($t@282@01)))[i@283@01]| && 0 <= j@284@01 && i@283@01 < First:(Second:(Second:($t@273@01))) && 0 <= i@283@01) | live]
(push) ; 13
; [then-branch: 58 | j@284@01 < |First:(Second:(Second:($t@282@01)))[i@283@01]| && 0 <= j@284@01 && i@283@01 < First:(Second:(Second:($t@273@01))) && 0 <= i@283@01]
(assert (and
  (and
    (and
      (<
        j@284@01
        (Seq_length
          (Seq_index
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@282@01))))
            i@283@01)))
      (<= 0 j@284@01))
    (<
      i@283@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@273@01))))))
  (<= 0 i@283@01)))
; [eval] 0 <= diz.field_Program_f.channel_hist_value[i][j] && diz.field_Program_f.channel_hist_value[i][j] < diz.field_Program_maxvalue
; [eval] 0 <= diz.field_Program_f.channel_hist_value[i][j]
; [eval] diz.field_Program_f.channel_hist_value[i][j]
; [eval] diz.field_Program_f.channel_hist_value[i]
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i@283@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (<
  i@283@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@282@01))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= j@284@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
; [then-branch: 59 | 0 <= First:(Second:(Second:($t@282@01)))[i@283@01][j@284@01] | live]
; [else-branch: 59 | !(0 <= First:(Second:(Second:($t@282@01)))[i@283@01][j@284@01]) | live]
(push) ; 15
; [then-branch: 59 | 0 <= First:(Second:(Second:($t@282@01)))[i@283@01][j@284@01]]
(assert (<=
  0
  (Seq_index
    (Seq_index
      ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@282@01))))
      i@283@01)
    j@284@01)))
; [eval] diz.field_Program_f.channel_hist_value[i][j] < diz.field_Program_maxvalue
; [eval] diz.field_Program_f.channel_hist_value[i][j]
; [eval] diz.field_Program_f.channel_hist_value[i]
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i@283@01 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(assert (not (<
  i@283@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@282@01))))))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(assert (not (>= j@284@01 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
(push) ; 15
; [else-branch: 59 | !(0 <= First:(Second:(Second:($t@282@01)))[i@283@01][j@284@01])]
(assert (not
  (<=
    0
    (Seq_index
      (Seq_index
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@282@01))))
        i@283@01)
      j@284@01))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(push) ; 13
; [else-branch: 58 | !(j@284@01 < |First:(Second:(Second:($t@282@01)))[i@283@01]| && 0 <= j@284@01 && i@283@01 < First:(Second:(Second:($t@273@01))) && 0 <= i@283@01)]
(assert (not
  (and
    (and
      (and
        (<
          j@284@01
          (Seq_length
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@282@01))))
              i@283@01)))
        (<= 0 j@284@01))
      (<
        i@283@01
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@273@01))))))
    (<= 0 i@283@01))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (implies
  (and
    (and
      (and
        (<
          j@284@01
          (Seq_length
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@282@01))))
              i@283@01)))
        (<= 0 j@284@01))
      (<
        i@283@01
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@273@01))))))
    (<= 0 i@283@01))
  (and
    (<
      j@284@01
      (Seq_length
        (Seq_index
          ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@282@01))))
          i@283@01)))
    (<= 0 j@284@01)
    (<
      i@283@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@273@01)))))
    (<= 0 i@283@01))))
; Joined path conditions
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@283@01 Int) (j@284@01 Int)) (!
  (implies
    (and
      (and
        (and
          (<
            j@284@01
            (Seq_length
              (Seq_index
                ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@282@01))))
                i@283@01)))
          (<= 0 j@284@01))
        (<
          i@283@01
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@273@01))))))
      (<= 0 i@283@01))
    (and
      (<
        j@284@01
        (Seq_length
          (Seq_index
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@282@01))))
            i@283@01)))
      (<= 0 j@284@01)
      (<
        i@283@01
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@273@01)))))
      (<= 0 i@283@01)))
  :pattern ((Seq_index
    (Seq_index
      ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@282@01))))
      i@283@01)
    j@284@01))
  :qid |prog.l266-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (implies
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@273@01)))
  (forall ((i@283@01 Int) (j@284@01 Int)) (!
    (implies
      (and
        (and
          (and
            (<
              j@284@01
              (Seq_length
                (Seq_index
                  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@282@01))))
                  i@283@01)))
            (<= 0 j@284@01))
          (<
            i@283@01
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@273@01))))))
        (<= 0 i@283@01))
      (and
        (<
          j@284@01
          (Seq_length
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@282@01))))
              i@283@01)))
        (<= 0 j@284@01)
        (<
          i@283@01
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@273@01)))))
        (<= 0 i@283@01)))
    :pattern ((Seq_index
      (Seq_index
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@282@01))))
        i@283@01)
      j@284@01))
    :qid |prog.l266-aux|))))
(set-option :timeout 0)
(push) ; 9
(assert (not (implies
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@273@01)))
  (forall ((i@283@01 Int) (j@284@01 Int)) (!
    (implies
      (and
        (and
          (and
            (<
              j@284@01
              (Seq_length
                (Seq_index
                  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@282@01))))
                  i@283@01)))
            (<= 0 j@284@01))
          (<
            i@283@01
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@273@01))))))
        (<= 0 i@283@01))
      (and
        (<
          (Seq_index
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@282@01))))
              i@283@01)
            j@284@01)
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@273@01))))))
        (<=
          0
          (Seq_index
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@282@01))))
              i@283@01)
            j@284@01))))
    :pattern ((Seq_index
      (Seq_index
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@282@01))))
        i@283@01)
      j@284@01))
    :qid |prog.l266|)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (implies
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@273@01)))
  (forall ((i@283@01 Int) (j@284@01 Int)) (!
    (implies
      (and
        (and
          (and
            (<
              j@284@01
              (Seq_length
                (Seq_index
                  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@282@01))))
                  i@283@01)))
            (<= 0 j@284@01))
          (<
            i@283@01
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@273@01))))))
        (<= 0 i@283@01))
      (and
        (<
          (Seq_index
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@282@01))))
              i@283@01)
            j@284@01)
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@273@01))))))
        (<=
          0
          (Seq_index
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@282@01))))
              i@283@01)
            j@284@01))))
    :pattern ((Seq_index
      (Seq_index
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@282@01))))
        i@283@01)
      j@284@01))
    :qid |prog.l266|))))
(assert (method_Program_lock_invariant%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second $t@273@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@273@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@273@01))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.combine
              ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))))
              $Snap.unit)
            ($Snap.combine
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second $t@282@01)))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@282@01))))
                  $Snap.unit))
              ($Snap.combine
                ($Snap.combine
                  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))))))
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01))))))))))
                    $Snap.unit))
                $Snap.unit)))))))) diz@261@01 globals@263@01))
; [exec]
; exhale acc(method_Program_lock_invariant(diz, globals), write)
; [exec]
; label method_end_method_Program_mpi_send__Integer__Integer_4
; [eval] frac_val(q1) != none
; [eval] frac_val(q1)
; [eval] frac_val(q2) != none
; [eval] frac_val(q2)
; [eval] frac_val(q1)
(push) ; 9
(assert (not (or
  (= (frac_val<Perm> q1@266@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> q1@266@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 9
(assert (not (=
  (-
    (-
      (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    ($Perm.min
      (-
        (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
        ($Perm.min
          (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
          (/ (to_real 1) (to_real 2))))
      (frac_val<Perm> q1@266@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (or
  (=
    (-
      (frac_val<Perm> q1@266@01)
      ($Perm.min
        (-
          (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
          ($Perm.min
            (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
            (/ (to_real 1) (to_real 2))))
        (frac_val<Perm> q1@266@01)))
    $Perm.No)
  (<
    (-
      (frac_val<Perm> q1@266@01)
      ($Perm.min
        (-
          (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
          ($Perm.min
            (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
            (/ (to_real 1) (to_real 2))))
        (frac_val<Perm> q1@266@01)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] frac_val(q1)
(push) ; 9
(assert (not (or
  (= (frac_val<Perm> q1@266@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> q1@266@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 9
(assert (not (=
  (-
    (-
      (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    ($Perm.min
      (-
        (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
        ($Perm.min
          (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
          (/ (to_real 1) (to_real 2))))
      (frac_val<Perm> q1@266@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (or
  (=
    (-
      (frac_val<Perm> q1@266@01)
      ($Perm.min
        (-
          (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
          ($Perm.min
            (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
            (/ (to_real 1) (to_real 2))))
        (frac_val<Perm> q1@266@01)))
    $Perm.No)
  (<
    (-
      (frac_val<Perm> q1@266@01)
      ($Perm.min
        (-
          (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
          ($Perm.min
            (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
            (/ (to_real 1) (to_real 2))))
        (frac_val<Perm> q1@266@01)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= rank
; [eval] rank < diz.field_Program_size
(set-option :timeout 10)
(push) ; 9
(assert (not (<
  $Perm.No
  (-
    (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2)))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  rank@264@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@273@01)))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<
  rank@264@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@273@01))))))
; [eval] 0 <= msg
; [eval] msg < diz.field_Program_maxvalue
(set-option :timeout 10)
(push) ; 9
(assert (not (<
  $Perm.No
  (-
    (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2)))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  msg@265@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@273@01))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<
  msg@265@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))))
; [eval] frac_val(q1)
(push) ; 9
(assert (not (or
  (= (frac_val<Perm> q1@266@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> q1@266@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 9
(assert (not (=
  (-
    (-
      (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    ($Perm.min
      (-
        (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
        ($Perm.min
          (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
          (/ (to_real 1) (to_real 2))))
      (frac_val<Perm> q1@266@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (or
  (=
    (-
      (frac_val<Perm> q1@266@01)
      ($Perm.min
        (-
          (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
          ($Perm.min
            (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
            (/ (to_real 1) (to_real 2))))
        (frac_val<Perm> q1@266@01)))
    $Perm.No)
  (<
    (-
      (frac_val<Perm> q1@266@01)
      ($Perm.min
        (-
          (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
          ($Perm.min
            (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
            (/ (to_real 1) (to_real 2))))
        (frac_val<Perm> q1@266@01)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 9
(assert (not (<
  $Perm.No
  (-
    (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2)))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] frac_val(q1)
(set-option :timeout 0)
(push) ; 9
(assert (not (or
  (= (frac_val<Perm> q1@266@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> q1@266@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 9
(assert (not (=
  (-
    (-
      (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    ($Perm.min
      (-
        (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
        ($Perm.min
          (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
          (/ (to_real 1) (to_real 2))))
      (frac_val<Perm> q1@266@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (or
  (=
    (-
      (frac_val<Perm> q1@266@01)
      ($Perm.min
        (-
          (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
          ($Perm.min
            (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
            (/ (to_real 1) (to_real 2))))
        (frac_val<Perm> q1@266@01)))
    $Perm.No)
  (<
    (-
      (frac_val<Perm> q1@266@01)
      ($Perm.min
        (-
          (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
          ($Perm.min
            (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
            (/ (to_real 1) (to_real 2))))
        (frac_val<Perm> q1@266@01)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_f != null
(set-option :timeout 10)
(push) ; 9
(assert (not (<
  $Perm.No
  (-
    (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2)))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (<
  $Perm.No
  (-
    (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2)))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_size == old(diz.field_Program_size)
(push) ; 9
(assert (not (<
  $Perm.No
  (-
    (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2)))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_size)
(push) ; 9
(assert (not (< $Perm.No (frac_val<Perm> q1@266@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@273@01))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@269@01))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@273@01))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@269@01)))))))
; [eval] diz.field_Program_maxvalue == old(diz.field_Program_maxvalue)
(set-option :timeout 10)
(push) ; 9
(assert (not (<
  $Perm.No
  (-
    (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2)))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_maxvalue)
(push) ; 9
(assert (not (< $Perm.No (frac_val<Perm> q1@266@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01)))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@273@01)))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01))))))))
; [eval] diz.field_Program_f == old(diz.field_Program_f)
(set-option :timeout 10)
(push) ; 9
(assert (not (<
  $Perm.No
  (-
    (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+ (frac_val<Perm> q1@266@01) (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2)))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_f)
(push) ; 9
(assert (not (< $Perm.No (frac_val<Perm> q1@266@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@273@01))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@269@01)))))))))))))))
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- method_Program_mpi_recv__Integer ----------
(declare-const diz@285@01 $Ref)
(declare-const current_thread_id@286@01 Int)
(declare-const globals@287@01 $Ref)
(declare-const rank@288@01 Int)
(declare-const v@289@01 Int)
(declare-const n@290@01 Int)
(declare-const q1@291@01 frac)
(declare-const q2@292@01 frac)
(declare-const sys__result@293@01 Int)
(declare-const diz@294@01 $Ref)
(declare-const current_thread_id@295@01 Int)
(declare-const globals@296@01 $Ref)
(declare-const rank@297@01 Int)
(declare-const v@298@01 Int)
(declare-const n@299@01 Int)
(declare-const q1@300@01 frac)
(declare-const q2@301@01 frac)
(declare-const sys__result@302@01 Int)
(push) ; 1
(declare-const $t@303@01 $Snap)
(assert (= $t@303@01 ($Snap.combine ($Snap.first $t@303@01) ($Snap.second $t@303@01))))
(assert (= ($Snap.first $t@303@01) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@294@01 $Ref.null)))
(assert (=
  ($Snap.second $t@303@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@303@01))
    ($Snap.second ($Snap.second $t@303@01)))))
(assert (= ($Snap.first ($Snap.second $t@303@01)) $Snap.unit))
; [eval] frac_val(q1) != none
; [eval] frac_val(q1)
(assert (not (= (frac_val<Perm> q1@300@01) $Perm.No)))
(assert (=
  ($Snap.second ($Snap.second $t@303@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@303@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@303@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@303@01))) $Snap.unit))
; [eval] frac_val(q2) != none
; [eval] frac_val(q2)
(assert (not (= (frac_val<Perm> q2@301@01) $Perm.No)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@303@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))))
; [eval] frac_val(q1)
(assert (<= $Perm.No (frac_val<Perm> q1@300@01)))
(assert (<= (frac_val<Perm> q1@300@01) $Perm.Write))
(assert (implies (< $Perm.No (frac_val<Perm> q1@300@01)) (not (= diz@294@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01))))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01))))))
  $Snap.unit))
; [eval] 0 <= rank
(assert (<= 0 rank@297@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))))
  $Snap.unit))
; [eval] rank < diz.field_Program_size
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (<
  rank@297@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))))))
  $Snap.unit))
(push) ; 2
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))))))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))))))))
  $Snap.unit))
; [eval] diz.field_Program_f != null
(push) ; 2
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01))))))))))))
  $Snap.unit))
; [eval] 0 <= current_thread_id
(assert (<= 0 current_thread_id@295@01))
(push) ; 2
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; [eval] p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, diz.field_Program_maxvalue - 1, diz.field_Program_maxvalue, n)
(push) ; 2
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_maxvalue - 1
(push) ; 2
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(push) ; 2
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@304@01 $Snap)
(assert (= $t@304@01 ($Snap.combine ($Snap.first $t@304@01) ($Snap.second $t@304@01))))
(assert (= ($Snap.first $t@304@01) $Snap.unit))
; [eval] frac_val(q1) != none
; [eval] frac_val(q1)
(assert (=
  ($Snap.second $t@304@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@304@01))
    ($Snap.second ($Snap.second $t@304@01)))))
(assert (= ($Snap.first ($Snap.second $t@304@01)) $Snap.unit))
; [eval] frac_val(q2) != none
; [eval] frac_val(q2)
(assert (=
  ($Snap.second ($Snap.second $t@304@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@304@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@304@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@304@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))
  $Snap.unit))
; [eval] 0 <= rank
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))
  $Snap.unit))
; [eval] rank < diz.field_Program_size
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<
  rank@297@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@304@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))
  $Snap.unit))
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))))
  $Snap.unit))
; [eval] diz.field_Program_f != null
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))))
  $Snap.unit))
; [eval] 0 <= sys__result
(assert (<= 0 sys__result@302@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))))))
  $Snap.unit))
; [eval] sys__result < diz.field_Program_maxvalue
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<
  sys__result@302@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))))))
  $Snap.unit))
; [eval] diz.field_Program_size == old(diz.field_Program_size)
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_size)
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@304@01))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))))))))
  $Snap.unit))
; [eval] diz.field_Program_maxvalue == old(diz.field_Program_maxvalue)
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_maxvalue)
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))))))))
  $Snap.unit))
; [eval] diz.field_Program_f == old(diz.field_Program_f)
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_f)
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))))))))))
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, sys__result, diz.field_Program_maxvalue, n)
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(pop) ; 2
(push) ; 2
; [exec]
; var sys__local__result__9: Int
(declare-const sys__local__result__9@305@01 Int)
; [exec]
; var stop__10: Bool
(declare-const stop__10@306@01 Bool)
; [exec]
; var res__11: Int
(declare-const res__11@307@01 Int)
; [exec]
; var __flatten_11__12: Ref
(declare-const __flatten_11__12@308@01 $Ref)
; [exec]
; var __flatten_12__13: Ref
(declare-const __flatten_12__13@309@01 $Ref)
; [exec]
; var __flatten_14__14: Process
(declare-const __flatten_14__14@310@01 Process)
; [exec]
; var __flatten_16__15: Ref
(declare-const __flatten_16__15@311@01 $Ref)
; [exec]
; var __flatten_17__16: Seq[Seq[Int]]
(declare-const __flatten_17__16@312@01 Seq<Seq<Int>>)
; [exec]
; var __flatten_19__17: Process
(declare-const __flatten_19__17@313@01 Process)
; [exec]
; stop__10 := false
(declare-const __flatten_11__12@314@01 $Ref)
(declare-const __flatten_12__13@315@01 $Ref)
(declare-const res__11@316@01 Int)
(declare-const __flatten_14__14@317@01 Process)
(declare-const __flatten_16__15@318@01 $Ref)
(declare-const __flatten_17__16@319@01 Seq<Seq<Int>>)
(declare-const __flatten_19__17@320@01 Process)
(declare-const stop__10@321@01 Bool)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@322@01 $Snap)
(assert (= $t@322@01 ($Snap.combine ($Snap.first $t@322@01) ($Snap.second $t@322@01))))
(assert (= ($Snap.first $t@322@01) $Snap.unit))
; [eval] frac_val(q1) != none
; [eval] frac_val(q1)
(assert (=
  ($Snap.second $t@322@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@322@01))
    ($Snap.second ($Snap.second $t@322@01)))))
(assert (= ($Snap.first ($Snap.second $t@322@01)) $Snap.unit))
; [eval] frac_val(q2) != none
; [eval] frac_val(q2)
(assert (=
  ($Snap.second ($Snap.second $t@322@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@322@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@322@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))
  $Snap.unit))
; [eval] 0 <= rank
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))
  $Snap.unit))
; [eval] rank < diz.field_Program_size
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (<
  rank@297@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@322@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))
  $Snap.unit))
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))
  $Snap.unit))
; [eval] diz.field_Program_f != null
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))
  $Snap.unit))
; [eval] diz.field_Program_size == old(diz.field_Program_size)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_size)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@322@01))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))
  $Snap.unit))
; [eval] diz.field_Program_maxvalue == old(diz.field_Program_maxvalue)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_maxvalue)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))
  $Snap.unit))
; [eval] diz.field_Program_f == old(diz.field_Program_f)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_f)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))
  $Snap.unit))
; [eval] 0 <= rank
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))
  $Snap.unit))
; [eval] rank < diz.field_Program_size
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
; [eval] !stop__10
(push) ; 4
(assert (not stop__10@321@01))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (not stop__10@321@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 60 | !(stop__10@321@01) | live]
; [else-branch: 60 | stop__10@321@01 | live]
(push) ; 4
; [then-branch: 60 | !(stop__10@321@01)]
(assert (not stop__10@321@01))
(push) ; 5
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, diz.field_Program_maxvalue - 1, diz.field_Program_maxvalue, n)
(push) ; 5
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_maxvalue - 1
(push) ; 5
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))))
; [then-branch: 61 | stop__10@321@01 | dead]
; [else-branch: 61 | !(stop__10@321@01) | live]
(push) ; 5
; [else-branch: 61 | !(stop__10@321@01)]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
  $Snap.unit))
; [eval] stop__10 ==> 0 <= res__11 && res__11 < diz.field_Program_maxvalue
(push) ; 6
; [then-branch: 62 | stop__10@321@01 | dead]
; [else-branch: 62 | !(stop__10@321@01) | live]
(push) ; 7
; [else-branch: 62 | !(stop__10@321@01)]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Loop head block: Check well-definedness of edge conditions
(push) ; 6
; [eval] !stop__10
(pop) ; 6
(push) ; 6
; [eval] !!stop__10
; [eval] !stop__10
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 60 | stop__10@321@01]
(assert stop__10@321@01)
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))))
(push) ; 5
(assert (not (not stop__10@321@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 63 | stop__10@321@01 | live]
; [else-branch: 63 | !(stop__10@321@01) | dead]
(push) ; 5
; [then-branch: 63 | stop__10@321@01]
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, res__11, diz.field_Program_maxvalue, n)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
  $Snap.unit))
; [eval] stop__10 ==> 0 <= res__11 && res__11 < diz.field_Program_maxvalue
(push) ; 6
(push) ; 7
(assert (not (not stop__10@321@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 64 | stop__10@321@01 | live]
; [else-branch: 64 | !(stop__10@321@01) | dead]
(push) ; 7
; [then-branch: 64 | stop__10@321@01]
; [eval] 0 <= res__11 && res__11 < diz.field_Program_maxvalue
; [eval] 0 <= res__11
(push) ; 8
; [then-branch: 65 | 0 <= res__11@316@01 | live]
; [else-branch: 65 | !(0 <= res__11@316@01) | live]
(push) ; 9
; [then-branch: 65 | 0 <= res__11@316@01]
(assert (<= 0 res__11@316@01))
; [eval] res__11 < diz.field_Program_maxvalue
(push) ; 10
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(pop) ; 9
(push) ; 9
; [else-branch: 65 | !(0 <= res__11@316@01)]
(assert (not (<= 0 res__11@316@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (implies
  stop__10@321@01
  (and
    (<
      res__11@316@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))
    (<= 0 res__11@316@01))))
; Loop head block: Check well-definedness of edge conditions
(push) ; 6
; [eval] !stop__10
(pop) ; 6
(push) ; 6
; [eval] !!stop__10
; [eval] !stop__10
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; [eval] frac_val(q1) != none
; [eval] frac_val(q1)
; [eval] frac_val(q2) != none
; [eval] frac_val(q2)
; [eval] frac_val(q1)
(set-option :timeout 0)
(push) ; 4
(assert (not (or
  (= (frac_val<Perm> q1@300@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> q1@300@01)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] frac_val(q1)
(push) ; 4
(assert (not (or
  (= (frac_val<Perm> q1@300@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> q1@300@01)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= rank
; [eval] rank < diz.field_Program_size
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] frac_val(q1)
(set-option :timeout 0)
(push) ; 4
(assert (not (or
  (= (frac_val<Perm> q1@300@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> q1@300@01)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] frac_val(q1)
(set-option :timeout 0)
(push) ; 4
(assert (not (or
  (= (frac_val<Perm> q1@300@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> q1@300@01)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_f != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_size == old(diz.field_Program_size)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_size)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_maxvalue == old(diz.field_Program_maxvalue)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_maxvalue)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_f == old(diz.field_Program_f)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_f)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= rank
; [eval] rank < diz.field_Program_size
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] !stop__10
(push) ; 4
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 66 | True | live]
; [else-branch: 66 | False | dead]
(push) ; 4
; [then-branch: 66 | True]
(push) ; 5
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, diz.field_Program_maxvalue - 1, diz.field_Program_maxvalue, n)
(push) ; 5
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_maxvalue - 1
(push) ; 5
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 67 | False | dead]
; [else-branch: 67 | True | live]
(push) ; 5
; [else-branch: 67 | True]
; [eval] stop__10 ==> 0 <= res__11 && res__11 < diz.field_Program_maxvalue
(push) ; 6
; [then-branch: 68 | False | dead]
; [else-branch: 68 | True | live]
(push) ; 7
; [else-branch: 68 | True]
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 6
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
  $Snap.unit))
(assert (not stop__10@321@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))))
(assert (= $t@322@01 ($Snap.combine ($Snap.first $t@322@01) ($Snap.second $t@322@01))))
(assert (= ($Snap.first $t@322@01) $Snap.unit))
(assert (=
  ($Snap.second $t@322@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@322@01))
    ($Snap.second ($Snap.second $t@322@01)))))
(assert (= ($Snap.first ($Snap.second $t@322@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@322@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@322@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@322@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))
  $Snap.unit))
(assert (<
  rank@297@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@322@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))
  $Snap.unit))
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@322@01))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
; [eval] !stop__10
(push) ; 7
(assert (not stop__10@321@01))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 69 | !(stop__10@321@01) | live]
; [else-branch: 69 | stop__10@321@01 | dead]
(push) ; 7
; [then-branch: 69 | !(stop__10@321@01)]
; [exec]
; inhale acc(method_Program_lock_invariant(diz, globals), write)
(declare-const $t@323@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(method_Program_lock_invariant(diz, globals), write)
(assert (= $t@323@01 ($Snap.combine ($Snap.first $t@323@01) ($Snap.second $t@323@01))))
(assert (= ($Snap.first $t@323@01) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@323@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@323@01))
    ($Snap.second ($Snap.second $t@323@01)))))
(set-option :timeout 0)
(push) ; 8
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (< $Perm.No (frac_val<Perm> q1@300@01))
  (=
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@323@01)))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))
(assert (<= $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))))
(assert (<= (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))) $Perm.Write))
(assert (implies
  (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))
  (not (= diz@294@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@323@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@323@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))
(push) ; 8
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (< $Perm.No (frac_val<Perm> q1@300@01))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@322@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@323@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))
(push) ; 8
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (< $Perm.No (frac_val<Perm> q1@300@01))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))
  $Snap.unit))
; [eval] 0 < diz.field_Program_maxvalue
(set-option :timeout 10)
(push) ; 8
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (<
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
(push) ; 8
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@323@01))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@323@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 70 | First:(Second:($t@323@01)) | live]
; [else-branch: 70 | !(First:(Second:($t@323@01))) | dead]
(push) ; 8
; [then-branch: 70 | First:(Second:($t@323@01))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@323@01))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))))))
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (< $Perm.No (frac_val<Perm> q1@300@01))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))
  $Snap.unit))
; [eval] diz.field_Program_f != null
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))))))
(push) ; 9
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@323@01))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 71 | First:(Second:($t@323@01)) | live]
; [else-branch: 71 | !(First:(Second:($t@323@01))) | dead]
(push) ; 9
; [then-branch: 71 | First:(Second:($t@323@01))]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))))
(push) ; 10
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))))))))
(push) ; 10
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
  $Snap.unit))
; [eval] diz.field_Program_size == |diz.field_Program_f.channel_hist_value|
(push) ; 10
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] |diz.field_Program_f.channel_hist_value|
(push) ; 10
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))))
(push) ; 10
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@323@01))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 72 | First:(Second:($t@323@01)) | live]
; [else-branch: 72 | !(First:(Second:($t@323@01))) | dead]
(push) ; 10
; [then-branch: 72 | First:(Second:($t@323@01))]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))))))))
(push) ; 11
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))))))
(push) ; 11
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))))))
  $Snap.unit))
; [eval] diz.field_Program_size == |diz.field_Program_f.results_hist_value|
(push) ; 11
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] |diz.field_Program_f.results_hist_value|
(push) ; 11
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))))
  $Snap.unit))
; [eval] diz.field_Program_initialised ==> (forall i: Int, j: Int :: { diz.field_Program_f.channel_hist_value[i][j] } 0 <= i && (i < diz.field_Program_size && (0 <= j && j < |diz.field_Program_f.channel_hist_value[i]|)) ==> 0 <= diz.field_Program_f.channel_hist_value[i][j] && diz.field_Program_f.channel_hist_value[i][j] < diz.field_Program_maxvalue)
(push) ; 11
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(push) ; 12
(assert (not (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@323@01))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 73 | First:(Second:($t@323@01)) | live]
; [else-branch: 73 | !(First:(Second:($t@323@01))) | dead]
(push) ; 12
; [then-branch: 73 | First:(Second:($t@323@01))]
; [eval] (forall i: Int, j: Int :: { diz.field_Program_f.channel_hist_value[i][j] } 0 <= i && (i < diz.field_Program_size && (0 <= j && j < |diz.field_Program_f.channel_hist_value[i]|)) ==> 0 <= diz.field_Program_f.channel_hist_value[i][j] && diz.field_Program_f.channel_hist_value[i][j] < diz.field_Program_maxvalue)
(declare-const i@324@01 Int)
(declare-const j@325@01 Int)
(push) ; 13
; [eval] 0 <= i && (i < diz.field_Program_size && (0 <= j && j < |diz.field_Program_f.channel_hist_value[i]|)) ==> 0 <= diz.field_Program_f.channel_hist_value[i][j] && diz.field_Program_f.channel_hist_value[i][j] < diz.field_Program_maxvalue
; [eval] 0 <= i && (i < diz.field_Program_size && (0 <= j && j < |diz.field_Program_f.channel_hist_value[i]|))
; [eval] 0 <= i
(push) ; 14
; [then-branch: 74 | 0 <= i@324@01 | live]
; [else-branch: 74 | !(0 <= i@324@01) | live]
(push) ; 15
; [then-branch: 74 | 0 <= i@324@01]
(assert (<= 0 i@324@01))
; [eval] i < diz.field_Program_size
(push) ; 16
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
; [then-branch: 75 | i@324@01 < First:(Second:(Second:($t@323@01))) | live]
; [else-branch: 75 | !(i@324@01 < First:(Second:(Second:($t@323@01)))) | live]
(push) ; 17
; [then-branch: 75 | i@324@01 < First:(Second:(Second:($t@323@01)))]
(assert (<
  i@324@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01))))))
; [eval] 0 <= j
(push) ; 18
; [then-branch: 76 | 0 <= j@325@01 | live]
; [else-branch: 76 | !(0 <= j@325@01) | live]
(push) ; 19
; [then-branch: 76 | 0 <= j@325@01]
(assert (<= 0 j@325@01))
; [eval] j < |diz.field_Program_f.channel_hist_value[i]|
; [eval] |diz.field_Program_f.channel_hist_value[i]|
; [eval] diz.field_Program_f.channel_hist_value[i]
(push) ; 20
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(assert (not (>= i@324@01 0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(push) ; 20
(assert (not (<
  i@324@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(pop) ; 19
(push) ; 19
; [else-branch: 76 | !(0 <= j@325@01)]
(assert (not (<= 0 j@325@01)))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(push) ; 17
; [else-branch: 75 | !(i@324@01 < First:(Second:(Second:($t@323@01))))]
(assert (not
  (<
    i@324@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01)))))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(push) ; 15
; [else-branch: 74 | !(0 <= i@324@01)]
(assert (not (<= 0 i@324@01)))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
; [then-branch: 77 | j@325@01 < |First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@323@01))))))))[i@324@01]| && 0 <= j@325@01 && i@324@01 < First:(Second:(Second:($t@323@01))) && 0 <= i@324@01 | live]
; [else-branch: 77 | !(j@325@01 < |First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@323@01))))))))[i@324@01]| && 0 <= j@325@01 && i@324@01 < First:(Second:(Second:($t@323@01))) && 0 <= i@324@01) | live]
(push) ; 15
; [then-branch: 77 | j@325@01 < |First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@323@01))))))))[i@324@01]| && 0 <= j@325@01 && i@324@01 < First:(Second:(Second:($t@323@01))) && 0 <= i@324@01]
(assert (and
  (and
    (and
      (<
        j@325@01
        (Seq_length
          (Seq_index
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
            i@324@01)))
      (<= 0 j@325@01))
    (<
      i@324@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01))))))
  (<= 0 i@324@01)))
; [eval] 0 <= diz.field_Program_f.channel_hist_value[i][j] && diz.field_Program_f.channel_hist_value[i][j] < diz.field_Program_maxvalue
; [eval] 0 <= diz.field_Program_f.channel_hist_value[i][j]
; [eval] diz.field_Program_f.channel_hist_value[i][j]
; [eval] diz.field_Program_f.channel_hist_value[i]
(set-option :timeout 10)
(push) ; 16
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i@324@01 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(assert (not (<
  i@324@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(assert (not (>= j@325@01 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
; [then-branch: 78 | 0 <= First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@323@01))))))))[i@324@01][j@325@01] | live]
; [else-branch: 78 | !(0 <= First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@323@01))))))))[i@324@01][j@325@01]) | live]
(push) ; 17
; [then-branch: 78 | 0 <= First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@323@01))))))))[i@324@01][j@325@01]]
(assert (<=
  0
  (Seq_index
    (Seq_index
      ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
      i@324@01)
    j@325@01)))
; [eval] diz.field_Program_f.channel_hist_value[i][j] < diz.field_Program_maxvalue
; [eval] diz.field_Program_f.channel_hist_value[i][j]
; [eval] diz.field_Program_f.channel_hist_value[i]
(set-option :timeout 10)
(push) ; 18
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(assert (not (>= i@324@01 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(assert (not (<
  i@324@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(assert (not (>= j@325@01 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 18
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(pop) ; 17
(push) ; 17
; [else-branch: 78 | !(0 <= First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@323@01))))))))[i@324@01][j@325@01])]
(assert (not
  (<=
    0
    (Seq_index
      (Seq_index
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
        i@324@01)
      j@325@01))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(push) ; 15
; [else-branch: 77 | !(j@325@01 < |First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@323@01))))))))[i@324@01]| && 0 <= j@325@01 && i@324@01 < First:(Second:(Second:($t@323@01))) && 0 <= i@324@01)]
(assert (not
  (and
    (and
      (and
        (<
          j@325@01
          (Seq_length
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
              i@324@01)))
        (<= 0 j@325@01))
      (<
        i@324@01
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01))))))
    (<= 0 i@324@01))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (implies
  (and
    (and
      (and
        (<
          j@325@01
          (Seq_length
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
              i@324@01)))
        (<= 0 j@325@01))
      (<
        i@324@01
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01))))))
    (<= 0 i@324@01))
  (and
    (<
      j@325@01
      (Seq_length
        (Seq_index
          ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
          i@324@01)))
    (<= 0 j@325@01)
    (<
      i@324@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01)))))
    (<= 0 i@324@01))))
; Joined path conditions
(pop) ; 13
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@324@01 Int) (j@325@01 Int)) (!
  (implies
    (and
      (and
        (and
          (<
            j@325@01
            (Seq_length
              (Seq_index
                ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
                i@324@01)))
          (<= 0 j@325@01))
        (<
          i@324@01
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01))))))
      (<= 0 i@324@01))
    (and
      (<
        j@325@01
        (Seq_length
          (Seq_index
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
            i@324@01)))
      (<= 0 j@325@01)
      (<
        i@324@01
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01)))))
      (<= 0 i@324@01)))
  :pattern ((Seq_index
    (Seq_index
      ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
      i@324@01)
    j@325@01))
  :qid |prog.l266-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (implies
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@323@01)))
  (forall ((i@324@01 Int) (j@325@01 Int)) (!
    (implies
      (and
        (and
          (and
            (<
              j@325@01
              (Seq_length
                (Seq_index
                  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
                  i@324@01)))
            (<= 0 j@325@01))
          (<
            i@324@01
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01))))))
        (<= 0 i@324@01))
      (and
        (<
          j@325@01
          (Seq_length
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
              i@324@01)))
        (<= 0 j@325@01)
        (<
          i@324@01
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01)))))
        (<= 0 i@324@01)))
    :pattern ((Seq_index
      (Seq_index
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
        i@324@01)
      j@325@01))
    :qid |prog.l266-aux|))))
(assert (implies
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@323@01)))
  (forall ((i@324@01 Int) (j@325@01 Int)) (!
    (implies
      (and
        (and
          (and
            (<
              j@325@01
              (Seq_length
                (Seq_index
                  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
                  i@324@01)))
            (<= 0 j@325@01))
          (<
            i@324@01
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01))))))
        (<= 0 i@324@01))
      (and
        (<
          (Seq_index
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
              i@324@01)
            j@325@01)
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))
        (<=
          0
          (Seq_index
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
              i@324@01)
            j@325@01))))
    :pattern ((Seq_index
      (Seq_index
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
        i@324@01)
      j@325@01))
    :qid |prog.l266|))))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (method_Program_lock_invariant%trigger $t@323@01 diz@294@01 globals@296@01))
; [exec]
; inhale acc(method_Program_lock_held(diz, globals), write)
(declare-const $t@326@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; __flatten_11__12 := diz.field_Program_f
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(declare-const __flatten_11__12@327@01 $Ref)
(assert (=
  __flatten_11__12@327@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))))))
; [eval] 0 < |__flatten_11__12.channel_hist_value[(rank - 1) % diz.field_Program_size]|
; [eval] |__flatten_11__12.channel_hist_value[(rank - 1) % diz.field_Program_size]|
; [eval] __flatten_11__12.channel_hist_value[(rank - 1) % diz.field_Program_size]
(push) ; 11
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))))
  __flatten_11__12@327@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] (rank - 1) % diz.field_Program_size
; [eval] rank - 1
(push) ; 11
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(assert (not (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01))))
    0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>=
  (mod
    (- rank@297@01 1)
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01)))))
  0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (<
  (mod
    (- rank@297@01 1)
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01)))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 11
(assert (not (not
  (<
    0
    (Seq_length
      (Seq_index
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
        (mod
          (- rank@297@01 1)
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01)))))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (<
  0
  (Seq_length
    (Seq_index
      ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
      (mod
        (- rank@297@01 1)
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01))))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 79 | 0 < |First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@323@01))))))))[rank@297@01 - 1 % First:(Second:(Second:($t@323@01)))]| | live]
; [else-branch: 79 | !(0 < |First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@323@01))))))))[rank@297@01 - 1 % First:(Second:(Second:($t@323@01)))]|) | live]
(push) ; 11
; [then-branch: 79 | 0 < |First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@323@01))))))))[rank@297@01 - 1 % First:(Second:(Second:($t@323@01)))]|]
(assert (<
  0
  (Seq_length
    (Seq_index
      ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
      (mod
        (- rank@297@01 1)
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01)))))))))
; [exec]
; __flatten_12__13 := diz.field_Program_f
(push) ; 12
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(declare-const __flatten_12__13@328@01 $Ref)
(assert (=
  __flatten_12__13@328@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))))))
; [exec]
; res__11 := __flatten_12__13.channel_hist_value[(rank - 1) % diz.field_Program_size][0]
; [eval] __flatten_12__13.channel_hist_value[(rank - 1) % diz.field_Program_size][0]
; [eval] __flatten_12__13.channel_hist_value[(rank - 1) % diz.field_Program_size]
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))))
  __flatten_12__13@328@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] (rank - 1) % diz.field_Program_size
; [eval] rank - 1
(push) ; 12
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(assert (not (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01))))
    0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>=
  (mod
    (- rank@297@01 1)
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01)))))
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (<
  (mod
    (- rank@297@01 1)
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01)))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(declare-const res__11@329@01 Int)
(assert (=
  res__11@329@01
  (Seq_index
    (Seq_index
      ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
      (mod
        (- rank@297@01 1)
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01))))))
    0)))
; [exec]
; assert acc(hist_idle(diz.field_Program_f, q2, p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, diz.field_Program_maxvalue - 1, diz.field_Program_maxvalue, n)), write)
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, diz.field_Program_maxvalue - 1, diz.field_Program_maxvalue, n)
(push) ; 12
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_maxvalue - 1
(push) ; 12
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
  (=
    (p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer<Process> rank@297@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@322@01)))) v@298@01 (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))
      1) ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@01))))) n@299@01)
    (p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer<Process> rank@297@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01)))) v@298@01 (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))
      1) ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) n@299@01)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [exec]
; method_Program_lemma_sigmaRecv_choice__Future__Integer__Integer__Integer__Integer__Integer(diz, current_thread_id, globals, diz.field_Program_f, rank, v, diz.field_Program_maxvalue - 1, res__11, n, q2)
(push) ; 12
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_maxvalue - 1
(push) ; 12
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] diz != null
; [eval] 0 <= current_thread_id
; [eval] frac_val(q) != none
; [eval] frac_val(q)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 12
(assert (not (=
  (-
    (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (-
    (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2))))))
(assert (<=
  (-
    (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2))))
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2)))))
  (not (= diz@294@01 $Ref.null))))
(set-option :timeout 0)
(push) ; 12
(assert (not (or
  (=
    (-
      (/ (to_real 1) (to_real 2))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    $Perm.No)
  (<
    (-
      (/ (to_real 1) (to_real 2))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 12
(assert (not (=
  (-
    (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(assert (not (or
  (=
    (-
      (/ (to_real 1) (to_real 2))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    $Perm.No)
  (<
    (-
      (/ (to_real 1) (to_real 2))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= diz.field_Program_size
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(assert (not (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01))))))
; [eval] f != null
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 12
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 12
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= rank
; [eval] rank < diz.field_Program_size
(push) ; 12
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  rank@297@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01)))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<
  rank@297@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01))))))
; [eval] 0 <= x
(push) ; 12
(assert (not (<= 0 res__11@329@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 res__11@329@01))
; [eval] x <= w
(push) ; 12
(assert (not (<=
  res__11@329@01
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))
    1))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<=
  res__11@329@01
  (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))
    1)))
; [eval] p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, w, diz.field_Program_maxvalue, n)
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
  (=
    (p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer<Process> rank@297@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@322@01)))) v@298@01 (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))
      1) ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@01))))) n@299@01)
    (p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer<Process> rank@297@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01)))) v@298@01 (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))
      1) ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) n@299@01)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(declare-const $t@330@01 $Snap)
(assert (= $t@330@01 ($Snap.combine ($Snap.first $t@330@01) ($Snap.second $t@330@01))))
(assert (= ($Snap.first $t@330@01) $Snap.unit))
; [eval] frac_val(q) != none
; [eval] frac_val(q)
(assert (=
  ($Snap.second $t@330@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@330@01))
    ($Snap.second ($Snap.second $t@330@01)))))
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (<
    $Perm.No
    (-
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2)))))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@330@01)))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))))
(assert (<=
  $Perm.No
  (+
    (-
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    (/ (to_real 1) (to_real 2)))))
(assert (<=
  (+
    (-
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    (/ (to_real 1) (to_real 2)))
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (+
      (-
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        ($Perm.min
          (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
          (/ (to_real 1) (to_real 2))))
      (/ (to_real 1) (to_real 2))))
  (not (= diz@294@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@330@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@330@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@330@01))))))
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (<
    $Perm.No
    (-
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2)))))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@330@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@330@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@330@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@330@01))))
  $Snap.unit))
; [eval] 0 <= diz.field_Program_size
(set-option :timeout 10)
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@330@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@330@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@330@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@330@01)))))
  $Snap.unit))
; [eval] f != null
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@330@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@330@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@330@01)))))))))
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@330@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@330@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@330@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@330@01))))))))))
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))))))
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@330@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@330@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@330@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@330@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@330@01))))))))
  $Snap.unit))
; [eval] 0 <= rank
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@330@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@330@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@330@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@330@01)))))))))
  $Snap.unit))
; [eval] rank < diz.field_Program_size
(set-option :timeout 10)
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<
  rank@297@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@330@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@330@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@330@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@330@01))))))))))
  $Snap.unit))
; [eval] diz.field_Program_maxvalue == old(diz.field_Program_maxvalue)
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_maxvalue)
(push) ; 12
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@330@01)))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@330@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@330@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@330@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@330@01)))))))))))
  $Snap.unit))
; [eval] diz.field_Program_size == old(diz.field_Program_size)
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_size)
(push) ; 12
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@330@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@330@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@330@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@330@01))))))))))))
  $Snap.unit))
; [eval] f.channel_hist_value == old(f.channel_hist_value)
; [eval] old(f.channel_hist_value)
; [eval] p_seq(p_method_Future_Recv__Integer__Integer((rank - 1) % diz.field_Program_size, x), p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, x, diz.field_Program_maxvalue, n))
; [eval] p_method_Future_Recv__Integer__Integer((rank - 1) % diz.field_Program_size, x)
; [eval] (rank - 1) % diz.field_Program_size
; [eval] rank - 1
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(assert (not (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01))))
    0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, x, diz.field_Program_maxvalue, n)
(set-option :timeout 10)
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; assert acc(hist_idle(diz.field_Program_f, q2, p_seq(p_method_Future_Recv__Integer__Integer((rank - 1) % diz.field_Program_size, res__11), p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, res__11, diz.field_Program_maxvalue, n))), write)
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] p_seq(p_method_Future_Recv__Integer__Integer((rank - 1) % diz.field_Program_size, res__11), p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, res__11, diz.field_Program_maxvalue, n))
; [eval] p_method_Future_Recv__Integer__Integer((rank - 1) % diz.field_Program_size, res__11)
; [eval] (rank - 1) % diz.field_Program_size
; [eval] rank - 1
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(assert (not (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01))))
    0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, res__11, diz.field_Program_maxvalue, n)
(set-option :timeout 10)
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [exec]
; __flatten_14__14 := p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, res__11, diz.field_Program_maxvalue, n)
; [eval] p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, res__11, diz.field_Program_maxvalue, n)
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(declare-const __flatten_14__14@331@01 Process)
(assert (=
  __flatten_14__14@331@01
  (p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer<Process> rank@297@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01)))) v@298@01 res__11@329@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@330@01))) n@299@01)))
; [exec]
; method_Future_Recv__Integer__Integer_begin(diz.field_Program_f, current_thread_id, q2, __flatten_14__14, (rank - 1) % diz.field_Program_size, res__11)
(push) ; 12
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] (rank - 1) % diz.field_Program_size
; [eval] rank - 1
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(assert (not (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01))))
    0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] diz != null
; [eval] 0 <= current_thread_id
; [eval] frac_val(fr) != none
; [eval] frac_val(fr)
; [eval] p_seq(p_method_Future_Recv__Integer__Integer(rank, msg), proc)
; [eval] p_method_Future_Recv__Integer__Integer(rank, msg)
(set-option :timeout 10)
(push) ; 12
(assert (not (=
  (p_seq<Process> (p_method_Future_Recv__Integer__Integer<Process> (mod
    (- rank@297@01 1)
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01))))) res__11@329@01) (p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer<Process> rank@297@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01)))) v@298@01 res__11@329@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@330@01))) n@299@01))
  (p_seq<Process> (p_method_Future_Recv__Integer__Integer<Process> (mod
    (- rank@297@01 1)
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01))))) res__11@329@01) __flatten_14__14@331@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] write != none
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (not (= $Perm.Write $Perm.No)))
; [eval] 0 <= rank
(push) ; 12
(assert (not (<=
  0
  (mod
    (- rank@297@01 1)
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<=
  0
  (mod
    (- rank@297@01 1)
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01)))))))
; [eval] rank < |diz.channel_hist_value|
; [eval] |diz.channel_hist_value|
(push) ; 12
(assert (not (<
  (mod
    (- rank@297@01 1)
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01)))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<
  (mod
    (- rank@297@01 1)
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01)))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))))))))
(declare-const $t@332@01 $Snap)
(assert (= $t@332@01 ($Snap.combine ($Snap.first $t@332@01) ($Snap.second $t@332@01))))
(assert (= ($Snap.first $t@332@01) $Snap.unit))
; [eval] frac_val(fr) != none
; [eval] frac_val(fr)
(assert (=
  ($Snap.second $t@332@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@332@01))
    ($Snap.second ($Snap.second $t@332@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@332@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@332@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@332@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@332@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@332@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01)))))))
  $Snap.unit))
; [eval] diz.channel_hist_value == diz.channel_hist_act
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@332@01)))))
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@332@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@332@01)))))))
  $Snap.unit))
; [eval] diz.channel_hist_value == old(diz.channel_hist_value)
; [eval] old(diz.channel_hist_value)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@332@01)))))
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; __flatten_16__15 := diz.field_Program_f
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(declare-const __flatten_16__15@333@01 $Ref)
(assert (=
  __flatten_16__15@333@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))))))
; [exec]
; __flatten_17__16 := method_Program_pop__Sequence$Sequence$Integer$$__Integer(diz, __flatten_16__15.channel_hist_value, (rank - 1) % diz.field_Program_size)
; [eval] method_Program_pop__Sequence$Sequence$Integer$$__Integer(diz, __flatten_16__15.channel_hist_value, (rank - 1) % diz.field_Program_size)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))))
  __flatten_16__15@333@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] (rank - 1) % diz.field_Program_size
; [eval] rank - 1
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(assert (not (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01))))
    0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
; [eval] diz != null
; [eval] 0 <= i
; [eval] i < |xs|
; [eval] |xs|
(push) ; 13
(assert (not (<
  (mod
    (- rank@297@01 1)
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01)))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@332@01)))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (<
  (mod
    (- rank@297@01 1)
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01)))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@332@01))))))))
(pop) ; 12
; Joined path conditions
(assert (<
  (mod
    (- rank@297@01 1)
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01)))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@332@01))))))))
(declare-const __flatten_17__16@334@01 Seq<Seq<Int>>)
(assert (Seq_equal
  __flatten_17__16@334@01
  (method_Program_pop__Sequence$Sequence$Integer$$__Integer ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) diz@294@01 ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@332@01))))) (mod
    (- rank@297@01 1)
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01))))))))
; [exec]
; hist_set_channel(diz.field_Program_f, current_thread_id, __flatten_17__16)
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] diz != null
; [eval] 0 <= current_thread_id
(declare-const $t@335@01 $Snap)
(assert (= $t@335@01 ($Snap.combine ($Snap.first $t@335@01) ($Snap.second $t@335@01))))
(assert (=
  ($Snap.second $t@335@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@335@01))
    ($Snap.second ($Snap.second $t@335@01)))))
(assert (= ($Snap.first ($Snap.second $t@335@01)) $Snap.unit))
; [eval] diz.channel_hist_value == value
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@335@01))
  __flatten_17__16@334@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; __flatten_19__17 := p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, res__11, diz.field_Program_maxvalue, n)
; [eval] p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, res__11, diz.field_Program_maxvalue, n)
(set-option :timeout 10)
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(declare-const __flatten_19__17@336@01 Process)
(assert (=
  __flatten_19__17@336@01
  (p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer<Process> rank@297@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01)))) v@298@01 res__11@329@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@330@01))) n@299@01)))
; [exec]
; method_Future_Recv__Integer__Integer_commit(diz.field_Program_f, current_thread_id, q2, __flatten_19__17, (rank - 1) % diz.field_Program_size, res__11)
(push) ; 12
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] (rank - 1) % diz.field_Program_size
; [eval] rank - 1
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(assert (not (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01))))
    0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] diz != null
; [eval] 0 <= current_thread_id
; [eval] frac_val(fr) != none
; [eval] frac_val(fr)
(set-option :timeout 10)
(push) ; 12
(assert (not (= __flatten_14__14@331@01 __flatten_19__17@336@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] write != none
; [eval] 0 <= rank
; [eval] rank < |diz.channel_hist_value|
; [eval] |diz.channel_hist_value|
(set-option :timeout 0)
(push) ; 12
(assert (not (<
  (mod
    (- rank@297@01 1)
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01)))))
  (Seq_length ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@335@01))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<
  (mod
    (- rank@297@01 1)
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01)))))
  (Seq_length ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@335@01)))))
; [eval] |diz.channel_hist_value| == |diz.channel_hist_act|
; [eval] |diz.channel_hist_value|
; [eval] |diz.channel_hist_act|
(push) ; 12
(assert (not (=
  (Seq_length ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@335@01)))
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@332@01))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@335@01)))
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@332@01)))))))
; [eval] Seq(msg) ++ diz.channel_hist_value[rank] == diz.channel_hist_act[rank]
; [eval] Seq(msg) ++ diz.channel_hist_value[rank]
; [eval] Seq(msg)
(assert (= (Seq_length (Seq_singleton res__11@329@01)) 1))
; [eval] diz.channel_hist_value[rank]
(push) ; 12
(assert (not (>=
  (mod
    (- rank@297@01 1)
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01)))))
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] diz.channel_hist_act[rank]
(push) ; 12
(assert (not (>=
  (mod
    (- rank@297@01 1)
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01)))))
  0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (<
  (mod
    (- rank@297@01 1)
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01)))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@332@01))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (Seq_equal
  (Seq_append
    (Seq_singleton res__11@329@01)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@335@01))
      (mod
        (- rank@297@01 1)
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01)))))))
  (Seq_index
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@332@01))))
    (mod
      (- rank@297@01 1)
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01)))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  (Seq_append
    (Seq_singleton res__11@329@01)
    (Seq_index
      ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@335@01))
      (mod
        (- rank@297@01 1)
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01)))))))
  (Seq_index
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@332@01))))
    (mod
      (- rank@297@01 1)
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01))))))))
; [eval] (forall i: Int :: { diz.channel_hist_value[i] } { diz.channel_hist_act[i] } 0 <= i && (i < |diz.channel_hist_value| && i != rank) ==> diz.channel_hist_value[i] == diz.channel_hist_act[i])
(declare-const i@337@01 Int)
(push) ; 12
; [eval] 0 <= i && (i < |diz.channel_hist_value| && i != rank) ==> diz.channel_hist_value[i] == diz.channel_hist_act[i]
; [eval] 0 <= i && (i < |diz.channel_hist_value| && i != rank)
; [eval] 0 <= i
(push) ; 13
; [then-branch: 80 | 0 <= i@337@01 | live]
; [else-branch: 80 | !(0 <= i@337@01) | live]
(push) ; 14
; [then-branch: 80 | 0 <= i@337@01]
(assert (<= 0 i@337@01))
; [eval] i < |diz.channel_hist_value|
; [eval] |diz.channel_hist_value|
(push) ; 15
; [then-branch: 81 | i@337@01 < |First:($t@335@01)| | live]
; [else-branch: 81 | !(i@337@01 < |First:($t@335@01)|) | live]
(push) ; 16
; [then-branch: 81 | i@337@01 < |First:($t@335@01)|]
(assert (<
  i@337@01
  (Seq_length ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@335@01)))))
; [eval] i != rank
(pop) ; 16
(push) ; 16
; [else-branch: 81 | !(i@337@01 < |First:($t@335@01)|)]
(assert (not
  (<
    i@337@01
    (Seq_length ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@335@01))))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(push) ; 14
; [else-branch: 80 | !(0 <= i@337@01)]
(assert (not (<= 0 i@337@01)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
; [then-branch: 82 | i@337@01 != rank@297@01 - 1 % First:(Second:(Second:($t@330@01))) && i@337@01 < |First:($t@335@01)| && 0 <= i@337@01 | live]
; [else-branch: 82 | !(i@337@01 != rank@297@01 - 1 % First:(Second:(Second:($t@330@01))) && i@337@01 < |First:($t@335@01)| && 0 <= i@337@01) | live]
(push) ; 14
; [then-branch: 82 | i@337@01 != rank@297@01 - 1 % First:(Second:(Second:($t@330@01))) && i@337@01 < |First:($t@335@01)| && 0 <= i@337@01]
(assert (and
  (and
    (not
      (=
        i@337@01
        (mod
          (- rank@297@01 1)
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01)))))))
    (<
      i@337@01
      (Seq_length ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@335@01)))))
  (<= 0 i@337@01)))
; [eval] diz.channel_hist_value[i] == diz.channel_hist_act[i]
; [eval] diz.channel_hist_value[i]
(push) ; 15
(assert (not (>= i@337@01 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] diz.channel_hist_act[i]
(push) ; 15
(assert (not (>= i@337@01 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
(assert (not (<
  i@337@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@332@01))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
(push) ; 14
; [else-branch: 82 | !(i@337@01 != rank@297@01 - 1 % First:(Second:(Second:($t@330@01))) && i@337@01 < |First:($t@335@01)| && 0 <= i@337@01)]
(assert (not
  (and
    (and
      (not
        (=
          i@337@01
          (mod
            (- rank@297@01 1)
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01)))))))
      (<
        i@337@01
        (Seq_length ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@335@01)))))
    (<= 0 i@337@01))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (implies
  (and
    (and
      (not
        (=
          i@337@01
          (mod
            (- rank@297@01 1)
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01)))))))
      (<
        i@337@01
        (Seq_length ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@335@01)))))
    (<= 0 i@337@01))
  (and
    (not
      (=
        i@337@01
        (mod
          (- rank@297@01 1)
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01)))))))
    (<
      i@337@01
      (Seq_length ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@335@01))))
    (<= 0 i@337@01))))
; Joined path conditions
(pop) ; 12
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@337@01 Int)) (!
  (implies
    (and
      (and
        (not
          (=
            i@337@01
            (mod
              (- rank@297@01 1)
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01)))))))
        (<
          i@337@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@335@01)))))
      (<= 0 i@337@01))
    (and
      (not
        (=
          i@337@01
          (mod
            (- rank@297@01 1)
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01)))))))
      (<
        i@337@01
        (Seq_length ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@335@01))))
      (<= 0 i@337@01)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@335@01))
    i@337@01))
  :qid |prog.l351-aux|)))
(assert (forall ((i@337@01 Int)) (!
  (implies
    (and
      (and
        (not
          (=
            i@337@01
            (mod
              (- rank@297@01 1)
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01)))))))
        (<
          i@337@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@335@01)))))
      (<= 0 i@337@01))
    (and
      (not
        (=
          i@337@01
          (mod
            (- rank@297@01 1)
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01)))))))
      (<
        i@337@01
        (Seq_length ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@335@01))))
      (<= 0 i@337@01)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@332@01))))
    i@337@01))
  :qid |prog.l351-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 12
(assert (not (forall ((i@337@01 Int)) (!
  (implies
    (and
      (and
        (not
          (=
            i@337@01
            (mod
              (- rank@297@01 1)
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01)))))))
        (<
          i@337@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@335@01)))))
      (<= 0 i@337@01))
    (Seq_equal
      (Seq_index
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@335@01))
        i@337@01)
      (Seq_index
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@332@01))))
        i@337@01)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@335@01))
    i@337@01))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@332@01))))
    i@337@01))
  :qid |prog.l351|))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (forall ((i@337@01 Int)) (!
  (implies
    (and
      (and
        (not
          (=
            i@337@01
            (mod
              (- rank@297@01 1)
              ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01)))))))
        (<
          i@337@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@335@01)))))
      (<= 0 i@337@01))
    (Seq_equal
      (Seq_index
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@335@01))
        i@337@01)
      (Seq_index
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@332@01))))
        i@337@01)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@335@01))
    i@337@01))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@332@01))))
    i@337@01))
  :qid |prog.l351|)))
(declare-const $t@338@01 $Snap)
(assert (= $t@338@01 ($Snap.combine ($Snap.first $t@338@01) ($Snap.second $t@338@01))))
(assert (= ($Snap.first $t@338@01) $Snap.unit))
; [eval] frac_val(fr) != none
; [eval] frac_val(fr)
(assert (=
  ($Snap.second $t@338@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@338@01))
    ($Snap.second ($Snap.second $t@338@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@338@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@338@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@338@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@338@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@338@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@338@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@338@01))))
  $Snap.unit))
; [eval] diz.channel_hist_value == old(diz.channel_hist_value)
; [eval] old(diz.channel_hist_value)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@338@01))))
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@335@01))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; stop__10 := true
; [exec]
; exhale acc(method_Program_lock_held(diz, globals), write)
; [exec]
; fold acc(method_Program_lock_invariant(diz, globals), write)
; [eval] diz != null
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 12
(assert (not (=
  (-
    (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(assert (not (or
  (=
    (-
      (/ (to_real 1) (to_real 2))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    $Perm.No)
  (<
    (-
      (/ (to_real 1) (to_real 2))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 12
(assert (not (=
  (-
    (+
      (-
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        ($Perm.min
          (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
          (/ (to_real 1) (to_real 2))))
      (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+
        (-
          (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
          ($Perm.min
            (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
            (/ (to_real 1) (to_real 2))))
        (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (-
    (+
      (-
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        ($Perm.min
          (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
          (/ (to_real 1) (to_real 2))))
      (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+
        (-
          (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
          ($Perm.min
            (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
            (/ (to_real 1) (to_real 2))))
        (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2))))))
(assert (<=
  (-
    (+
      (-
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        ($Perm.min
          (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
          (/ (to_real 1) (to_real 2))))
      (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+
        (-
          (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
          ($Perm.min
            (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
            (/ (to_real 1) (to_real 2))))
        (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2))))
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
          ($Perm.min
            (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
            (/ (to_real 1) (to_real 2))))
        (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+
          (-
            (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
            ($Perm.min
              (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
              (/ (to_real 1) (to_real 2))))
          (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2)))))
  (not (= diz@294@01 $Ref.null))))
(set-option :timeout 0)
(push) ; 12
(assert (not (or
  (=
    (-
      (/ (to_real 1) (to_real 2))
      ($Perm.min
        (+
          (-
            (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
            ($Perm.min
              (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
              (/ (to_real 1) (to_real 2))))
          (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    $Perm.No)
  (<
    (-
      (/ (to_real 1) (to_real 2))
      ($Perm.min
        (+
          (-
            (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
            ($Perm.min
              (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
              (/ (to_real 1) (to_real 2))))
          (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 12
(assert (not (=
  (-
    (+
      (-
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        ($Perm.min
          (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
          (/ (to_real 1) (to_real 2))))
      (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+
        (-
          (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
          ($Perm.min
            (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
            (/ (to_real 1) (to_real 2))))
        (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(assert (not (or
  (=
    (-
      (/ (to_real 1) (to_real 2))
      ($Perm.min
        (+
          (-
            (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
            ($Perm.min
              (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
              (/ (to_real 1) (to_real 2))))
          (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    $Perm.No)
  (<
    (-
      (/ (to_real 1) (to_real 2))
      ($Perm.min
        (+
          (-
            (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
            ($Perm.min
              (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
              (/ (to_real 1) (to_real 2))))
          (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] 0 < diz.field_Program_maxvalue
(set-option :timeout 10)
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(assert (not (< 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@330@01))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (< 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@330@01)))))
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@323@01))))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 83 | First:(Second:($t@323@01)) | live]
; [else-branch: 83 | !(First:(Second:($t@323@01))) | dead]
(push) ; 12
; [then-branch: 83 | First:(Second:($t@323@01))]
(set-option :timeout 0)
(push) ; 13
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 13
(assert (not (=
  (-
    (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(assert (not (or
  (=
    (-
      (/ (to_real 1) (to_real 2))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    $Perm.No)
  (<
    (-
      (/ (to_real 1) (to_real 2))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_f != null
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@323@01))))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [then-branch: 84 | First:(Second:($t@323@01)) | live]
; [else-branch: 84 | !(First:(Second:($t@323@01))) | dead]
(push) ; 13
; [then-branch: 84 | First:(Second:($t@323@01))]
(push) ; 14
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_size == |diz.field_Program_f.channel_hist_value|
(push) ; 14
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] |diz.field_Program_f.channel_hist_value|
(push) ; 14
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@338@01))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@338@01)))))))
(set-option :timeout 10)
(push) ; 14
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@323@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
; [then-branch: 85 | First:(Second:($t@323@01)) | live]
; [else-branch: 85 | !(First:(Second:($t@323@01))) | dead]
(push) ; 14
; [then-branch: 85 | First:(Second:($t@323@01))]
(push) ; 15
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_size == |diz.field_Program_f.results_hist_value|
(push) ; 15
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] |diz.field_Program_f.results_hist_value|
(push) ; 15
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))))))
; [eval] diz.field_Program_initialised ==> (forall i: Int, j: Int :: { diz.field_Program_f.channel_hist_value[i][j] } 0 <= i && (i < diz.field_Program_size && (0 <= j && j < |diz.field_Program_f.channel_hist_value[i]|)) ==> 0 <= diz.field_Program_f.channel_hist_value[i][j] && diz.field_Program_f.channel_hist_value[i][j] < diz.field_Program_maxvalue)
(set-option :timeout 10)
(push) ; 15
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
(push) ; 16
(assert (not (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@323@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.01s
; (get-info :all-statistics)
; [then-branch: 86 | First:(Second:($t@323@01)) | live]
; [else-branch: 86 | !(First:(Second:($t@323@01))) | dead]
(push) ; 16
; [then-branch: 86 | First:(Second:($t@323@01))]
; [eval] (forall i: Int, j: Int :: { diz.field_Program_f.channel_hist_value[i][j] } 0 <= i && (i < diz.field_Program_size && (0 <= j && j < |diz.field_Program_f.channel_hist_value[i]|)) ==> 0 <= diz.field_Program_f.channel_hist_value[i][j] && diz.field_Program_f.channel_hist_value[i][j] < diz.field_Program_maxvalue)
(declare-const i@339@01 Int)
(declare-const j@340@01 Int)
(push) ; 17
; [eval] 0 <= i && (i < diz.field_Program_size && (0 <= j && j < |diz.field_Program_f.channel_hist_value[i]|)) ==> 0 <= diz.field_Program_f.channel_hist_value[i][j] && diz.field_Program_f.channel_hist_value[i][j] < diz.field_Program_maxvalue
; [eval] 0 <= i && (i < diz.field_Program_size && (0 <= j && j < |diz.field_Program_f.channel_hist_value[i]|))
; [eval] 0 <= i
(push) ; 18
; [then-branch: 87 | 0 <= i@339@01 | live]
; [else-branch: 87 | !(0 <= i@339@01) | live]
(push) ; 19
; [then-branch: 87 | 0 <= i@339@01]
(assert (<= 0 i@339@01))
; [eval] i < diz.field_Program_size
(push) ; 20
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(push) ; 20
; [then-branch: 88 | i@339@01 < First:(Second:(Second:($t@330@01))) | live]
; [else-branch: 88 | !(i@339@01 < First:(Second:(Second:($t@330@01)))) | live]
(push) ; 21
; [then-branch: 88 | i@339@01 < First:(Second:(Second:($t@330@01)))]
(assert (<
  i@339@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01))))))
; [eval] 0 <= j
(push) ; 22
; [then-branch: 89 | 0 <= j@340@01 | live]
; [else-branch: 89 | !(0 <= j@340@01) | live]
(push) ; 23
; [then-branch: 89 | 0 <= j@340@01]
(assert (<= 0 j@340@01))
; [eval] j < |diz.field_Program_f.channel_hist_value[i]|
; [eval] |diz.field_Program_f.channel_hist_value[i]|
; [eval] diz.field_Program_f.channel_hist_value[i]
(push) ; 24
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(assert (not (>= i@339@01 0)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(push) ; 24
(assert (not (<
  i@339@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@338@01))))))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(pop) ; 23
(push) ; 23
; [else-branch: 89 | !(0 <= j@340@01)]
(assert (not (<= 0 j@340@01)))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(push) ; 21
; [else-branch: 88 | !(i@339@01 < First:(Second:(Second:($t@330@01))))]
(assert (not
  (<
    i@339@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01)))))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(push) ; 19
; [else-branch: 87 | !(0 <= i@339@01)]
(assert (not (<= 0 i@339@01)))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
; [then-branch: 90 | j@340@01 < |First:(Second:(Second:($t@338@01)))[i@339@01]| && 0 <= j@340@01 && i@339@01 < First:(Second:(Second:($t@330@01))) && 0 <= i@339@01 | live]
; [else-branch: 90 | !(j@340@01 < |First:(Second:(Second:($t@338@01)))[i@339@01]| && 0 <= j@340@01 && i@339@01 < First:(Second:(Second:($t@330@01))) && 0 <= i@339@01) | live]
(push) ; 19
; [then-branch: 90 | j@340@01 < |First:(Second:(Second:($t@338@01)))[i@339@01]| && 0 <= j@340@01 && i@339@01 < First:(Second:(Second:($t@330@01))) && 0 <= i@339@01]
(assert (and
  (and
    (and
      (<
        j@340@01
        (Seq_length
          (Seq_index
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@338@01))))
            i@339@01)))
      (<= 0 j@340@01))
    (<
      i@339@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01))))))
  (<= 0 i@339@01)))
; [eval] 0 <= diz.field_Program_f.channel_hist_value[i][j] && diz.field_Program_f.channel_hist_value[i][j] < diz.field_Program_maxvalue
; [eval] 0 <= diz.field_Program_f.channel_hist_value[i][j]
; [eval] diz.field_Program_f.channel_hist_value[i][j]
; [eval] diz.field_Program_f.channel_hist_value[i]
(set-option :timeout 10)
(push) ; 20
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(assert (not (>= i@339@01 0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(push) ; 20
(assert (not (<
  i@339@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@338@01))))))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(push) ; 20
(assert (not (>= j@340@01 0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(push) ; 20
; [then-branch: 91 | 0 <= First:(Second:(Second:($t@338@01)))[i@339@01][j@340@01] | live]
; [else-branch: 91 | !(0 <= First:(Second:(Second:($t@338@01)))[i@339@01][j@340@01]) | live]
(push) ; 21
; [then-branch: 91 | 0 <= First:(Second:(Second:($t@338@01)))[i@339@01][j@340@01]]
(assert (<=
  0
  (Seq_index
    (Seq_index
      ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@338@01))))
      i@339@01)
    j@340@01)))
; [eval] diz.field_Program_f.channel_hist_value[i][j] < diz.field_Program_maxvalue
; [eval] diz.field_Program_f.channel_hist_value[i][j]
; [eval] diz.field_Program_f.channel_hist_value[i]
(set-option :timeout 10)
(push) ; 22
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(assert (not (>= i@339@01 0)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(push) ; 22
(assert (not (<
  i@339@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@338@01))))))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(push) ; 22
(assert (not (>= j@340@01 0)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 22
(assert (not (<
  $Perm.No
  (+
    (-
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(pop) ; 21
(push) ; 21
; [else-branch: 91 | !(0 <= First:(Second:(Second:($t@338@01)))[i@339@01][j@340@01])]
(assert (not
  (<=
    0
    (Seq_index
      (Seq_index
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@338@01))))
        i@339@01)
      j@340@01))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(push) ; 19
; [else-branch: 90 | !(j@340@01 < |First:(Second:(Second:($t@338@01)))[i@339@01]| && 0 <= j@340@01 && i@339@01 < First:(Second:(Second:($t@330@01))) && 0 <= i@339@01)]
(assert (not
  (and
    (and
      (and
        (<
          j@340@01
          (Seq_length
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@338@01))))
              i@339@01)))
        (<= 0 j@340@01))
      (<
        i@339@01
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01))))))
    (<= 0 i@339@01))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert (implies
  (and
    (and
      (and
        (<
          j@340@01
          (Seq_length
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@338@01))))
              i@339@01)))
        (<= 0 j@340@01))
      (<
        i@339@01
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01))))))
    (<= 0 i@339@01))
  (and
    (<
      j@340@01
      (Seq_length
        (Seq_index
          ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@338@01))))
          i@339@01)))
    (<= 0 j@340@01)
    (<
      i@339@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01)))))
    (<= 0 i@339@01))))
; Joined path conditions
(pop) ; 17
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@339@01 Int) (j@340@01 Int)) (!
  (implies
    (and
      (and
        (and
          (<
            j@340@01
            (Seq_length
              (Seq_index
                ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@338@01))))
                i@339@01)))
          (<= 0 j@340@01))
        (<
          i@339@01
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01))))))
      (<= 0 i@339@01))
    (and
      (<
        j@340@01
        (Seq_length
          (Seq_index
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@338@01))))
            i@339@01)))
      (<= 0 j@340@01)
      (<
        i@339@01
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01)))))
      (<= 0 i@339@01)))
  :pattern ((Seq_index
    (Seq_index
      ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@338@01))))
      i@339@01)
    j@340@01))
  :qid |prog.l266-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (implies
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@323@01)))
  (forall ((i@339@01 Int) (j@340@01 Int)) (!
    (implies
      (and
        (and
          (and
            (<
              j@340@01
              (Seq_length
                (Seq_index
                  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@338@01))))
                  i@339@01)))
            (<= 0 j@340@01))
          (<
            i@339@01
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01))))))
        (<= 0 i@339@01))
      (and
        (<
          j@340@01
          (Seq_length
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@338@01))))
              i@339@01)))
        (<= 0 j@340@01)
        (<
          i@339@01
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01)))))
        (<= 0 i@339@01)))
    :pattern ((Seq_index
      (Seq_index
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@338@01))))
        i@339@01)
      j@340@01))
    :qid |prog.l266-aux|))))
(set-option :timeout 0)
(push) ; 15
(assert (not (implies
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@323@01)))
  (forall ((i@339@01 Int) (j@340@01 Int)) (!
    (implies
      (and
        (and
          (and
            (<
              j@340@01
              (Seq_length
                (Seq_index
                  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@338@01))))
                  i@339@01)))
            (<= 0 j@340@01))
          (<
            i@339@01
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01))))))
        (<= 0 i@339@01))
      (and
        (<
          (Seq_index
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@338@01))))
              i@339@01)
            j@340@01)
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@330@01))))
        (<=
          0
          (Seq_index
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@338@01))))
              i@339@01)
            j@340@01))))
    :pattern ((Seq_index
      (Seq_index
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@338@01))))
        i@339@01)
      j@340@01))
    :qid |prog.l266|)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (implies
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@323@01)))
  (forall ((i@339@01 Int) (j@340@01 Int)) (!
    (implies
      (and
        (and
          (and
            (<
              j@340@01
              (Seq_length
                (Seq_index
                  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@338@01))))
                  i@339@01)))
            (<= 0 j@340@01))
          (<
            i@339@01
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01))))))
        (<= 0 i@339@01))
      (and
        (<
          (Seq_index
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@338@01))))
              i@339@01)
            j@340@01)
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@330@01))))
        (<=
          0
          (Seq_index
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@338@01))))
              i@339@01)
            j@340@01))))
    :pattern ((Seq_index
      (Seq_index
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@338@01))))
        i@339@01)
      j@340@01))
    :qid |prog.l266|))))
(assert (method_Program_lock_invariant%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second $t@323@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@330@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second $t@330@01))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.combine
              ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))
              $Snap.unit)
            ($Snap.combine
              ($Snap.combine
                ($Snap.first ($Snap.second ($Snap.second $t@338@01)))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@338@01))))
                  $Snap.unit))
              ($Snap.combine
                ($Snap.combine
                  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))))))
                    $Snap.unit))
                $Snap.unit)))))))) diz@294@01 globals@296@01))
; [exec]
; exhale acc(method_Program_lock_invariant(diz, globals), write)
; Loop head block: Re-establish invariant
; [eval] frac_val(q1) != none
; [eval] frac_val(q1)
; [eval] frac_val(q2) != none
; [eval] frac_val(q2)
; [eval] frac_val(q1)
(push) ; 15
(assert (not (or
  (= (frac_val<Perm> q1@300@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> q1@300@01)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 15
(assert (not (=
  (-
    (-
      (+
        (-
          (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
          ($Perm.min
            (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
            (/ (to_real 1) (to_real 2))))
        (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+
          (-
            (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
            ($Perm.min
              (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
              (/ (to_real 1) (to_real 2))))
          (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    ($Perm.min
      (-
        (+
          (-
            (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
            ($Perm.min
              (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
              (/ (to_real 1) (to_real 2))))
          (/ (to_real 1) (to_real 2)))
        ($Perm.min
          (+
            (-
              (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
              ($Perm.min
                (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
                (/ (to_real 1) (to_real 2))))
            (/ (to_real 1) (to_real 2)))
          (/ (to_real 1) (to_real 2))))
      (frac_val<Perm> q1@300@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(assert (not (or
  (=
    (-
      (frac_val<Perm> q1@300@01)
      ($Perm.min
        (-
          (+
            (-
              (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
              ($Perm.min
                (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
                (/ (to_real 1) (to_real 2))))
            (/ (to_real 1) (to_real 2)))
          ($Perm.min
            (+
              (-
                (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
                ($Perm.min
                  (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
                  (/ (to_real 1) (to_real 2))))
              (/ (to_real 1) (to_real 2)))
            (/ (to_real 1) (to_real 2))))
        (frac_val<Perm> q1@300@01)))
    $Perm.No)
  (<
    (-
      (frac_val<Perm> q1@300@01)
      ($Perm.min
        (-
          (+
            (-
              (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
              ($Perm.min
                (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
                (/ (to_real 1) (to_real 2))))
            (/ (to_real 1) (to_real 2)))
          ($Perm.min
            (+
              (-
                (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
                ($Perm.min
                  (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
                  (/ (to_real 1) (to_real 2))))
              (/ (to_real 1) (to_real 2)))
            (/ (to_real 1) (to_real 2))))
        (frac_val<Perm> q1@300@01)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] frac_val(q1)
(push) ; 15
(assert (not (or
  (= (frac_val<Perm> q1@300@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> q1@300@01)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 15
(assert (not (=
  (-
    (-
      (+
        (-
          (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
          ($Perm.min
            (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
            (/ (to_real 1) (to_real 2))))
        (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+
          (-
            (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
            ($Perm.min
              (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
              (/ (to_real 1) (to_real 2))))
          (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    ($Perm.min
      (-
        (+
          (-
            (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
            ($Perm.min
              (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
              (/ (to_real 1) (to_real 2))))
          (/ (to_real 1) (to_real 2)))
        ($Perm.min
          (+
            (-
              (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
              ($Perm.min
                (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
                (/ (to_real 1) (to_real 2))))
            (/ (to_real 1) (to_real 2)))
          (/ (to_real 1) (to_real 2))))
      (frac_val<Perm> q1@300@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(assert (not (or
  (=
    (-
      (frac_val<Perm> q1@300@01)
      ($Perm.min
        (-
          (+
            (-
              (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
              ($Perm.min
                (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
                (/ (to_real 1) (to_real 2))))
            (/ (to_real 1) (to_real 2)))
          ($Perm.min
            (+
              (-
                (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
                ($Perm.min
                  (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
                  (/ (to_real 1) (to_real 2))))
              (/ (to_real 1) (to_real 2)))
            (/ (to_real 1) (to_real 2))))
        (frac_val<Perm> q1@300@01)))
    $Perm.No)
  (<
    (-
      (frac_val<Perm> q1@300@01)
      ($Perm.min
        (-
          (+
            (-
              (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
              ($Perm.min
                (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
                (/ (to_real 1) (to_real 2))))
            (/ (to_real 1) (to_real 2)))
          ($Perm.min
            (+
              (-
                (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
                ($Perm.min
                  (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
                  (/ (to_real 1) (to_real 2))))
              (/ (to_real 1) (to_real 2)))
            (/ (to_real 1) (to_real 2))))
        (frac_val<Perm> q1@300@01)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= rank
; [eval] rank < diz.field_Program_size
(set-option :timeout 10)
(push) ; 15
(assert (not (<
  $Perm.No
  (-
    (+
      (-
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        ($Perm.min
          (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
          (/ (to_real 1) (to_real 2))))
      (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+
        (-
          (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
          ($Perm.min
            (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
            (/ (to_real 1) (to_real 2))))
        (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2)))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] frac_val(q1)
(set-option :timeout 0)
(push) ; 15
(assert (not (or
  (= (frac_val<Perm> q1@300@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> q1@300@01)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 15
(assert (not (=
  (-
    (-
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    ($Perm.min
      (-
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        ($Perm.min
          (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
          (/ (to_real 1) (to_real 2))))
      (frac_val<Perm> q1@300@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(assert (not (or
  (=
    (-
      (frac_val<Perm> q1@300@01)
      ($Perm.min
        (-
          (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
          ($Perm.min
            (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
            (/ (to_real 1) (to_real 2))))
        (frac_val<Perm> q1@300@01)))
    $Perm.No)
  (<
    (-
      (frac_val<Perm> q1@300@01)
      ($Perm.min
        (-
          (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
          ($Perm.min
            (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
            (/ (to_real 1) (to_real 2))))
        (frac_val<Perm> q1@300@01)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 15
(assert (not (<
  $Perm.No
  (-
    (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2)))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] frac_val(q1)
(set-option :timeout 0)
(push) ; 15
(assert (not (or
  (= (frac_val<Perm> q1@300@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> q1@300@01)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 15
(assert (not (=
  (-
    (-
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    ($Perm.min
      (-
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        ($Perm.min
          (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
          (/ (to_real 1) (to_real 2))))
      (frac_val<Perm> q1@300@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(assert (not (or
  (=
    (-
      (frac_val<Perm> q1@300@01)
      ($Perm.min
        (-
          (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
          ($Perm.min
            (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
            (/ (to_real 1) (to_real 2))))
        (frac_val<Perm> q1@300@01)))
    $Perm.No)
  (<
    (-
      (frac_val<Perm> q1@300@01)
      ($Perm.min
        (-
          (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
          ($Perm.min
            (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
            (/ (to_real 1) (to_real 2))))
        (frac_val<Perm> q1@300@01)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_f != null
(set-option :timeout 10)
(push) ; 15
(assert (not (<
  $Perm.No
  (-
    (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2)))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_size == old(diz.field_Program_size)
(push) ; 15
(assert (not (<
  $Perm.No
  (-
    (+
      (-
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        ($Perm.min
          (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
          (/ (to_real 1) (to_real 2))))
      (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+
        (-
          (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
          ($Perm.min
            (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
            (/ (to_real 1) (to_real 2))))
        (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2)))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_size)
(push) ; 15
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@330@01))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))))
; [eval] diz.field_Program_maxvalue == old(diz.field_Program_maxvalue)
(set-option :timeout 10)
(push) ; 15
(assert (not (<
  $Perm.No
  (-
    (+
      (-
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        ($Perm.min
          (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
          (/ (to_real 1) (to_real 2))))
      (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+
        (-
          (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
          ($Perm.min
            (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
            (/ (to_real 1) (to_real 2))))
        (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2)))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_maxvalue)
(push) ; 15
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@330@01)))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@330@01)))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01))))))))
; [eval] diz.field_Program_f == old(diz.field_Program_f)
(set-option :timeout 10)
(push) ; 15
(assert (not (<
  $Perm.No
  (-
    (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2)))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_f)
(push) ; 15
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01))))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))))))))))
; [eval] 0 <= rank
; [eval] rank < diz.field_Program_size
(set-option :timeout 10)
(push) ; 15
(assert (not (<
  $Perm.No
  (-
    (+
      (-
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        ($Perm.min
          (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
          (/ (to_real 1) (to_real 2))))
      (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+
        (-
          (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
          ($Perm.min
            (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
            (/ (to_real 1) (to_real 2))))
        (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2)))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] !stop__10
; [then-branch: 92 | False | dead]
; [else-branch: 92 | True | live]
(push) ; 15
; [else-branch: 92 | True]
(push) ; 16
(assert (not false))
(check-sat)
; unknown
(pop) ; 16
; 0.01s
; (get-info :all-statistics)
; [then-branch: 93 | True | live]
; [else-branch: 93 | False | dead]
(push) ; 16
; [then-branch: 93 | True]
(push) ; 17
(assert (not (<
  $Perm.No
  (-
    (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2)))))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [eval] p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, res__11, diz.field_Program_maxvalue, n)
(push) ; 17
(assert (not (<
  $Perm.No
  (-
    (+
      (-
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        ($Perm.min
          (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
          (/ (to_real 1) (to_real 2))))
      (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+
        (-
          (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
          ($Perm.min
            (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
            (/ (to_real 1) (to_real 2))))
        (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2)))))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(push) ; 17
(assert (not (<
  $Perm.No
  (-
    (+
      (-
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        ($Perm.min
          (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
          (/ (to_real 1) (to_real 2))))
      (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+
        (-
          (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
          ($Perm.min
            (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
            (/ (to_real 1) (to_real 2))))
        (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2)))))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [eval] stop__10 ==> 0 <= res__11 && res__11 < diz.field_Program_maxvalue
(push) ; 17
(push) ; 18
(assert (not false))
(check-sat)
; unknown
(pop) ; 18
; 0.01s
; (get-info :all-statistics)
; [then-branch: 94 | True | live]
; [else-branch: 94 | False | dead]
(push) ; 18
; [then-branch: 94 | True]
; [eval] 0 <= res__11 && res__11 < diz.field_Program_maxvalue
; [eval] 0 <= res__11
(push) ; 19
; [then-branch: 95 | 0 <= res__11@329@01 | live]
; [else-branch: 95 | !(0 <= res__11@329@01) | live]
(push) ; 20
; [then-branch: 95 | 0 <= res__11@329@01]
; [eval] res__11 < diz.field_Program_maxvalue
(push) ; 21
(assert (not (<
  $Perm.No
  (-
    (+
      (-
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        ($Perm.min
          (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
          (/ (to_real 1) (to_real 2))))
      (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+
        (-
          (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
          ($Perm.min
            (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
            (/ (to_real 1) (to_real 2))))
        (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2)))))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(pop) ; 20
(push) ; 20
; [else-branch: 95 | !(0 <= res__11@329@01)]
(assert (not (<= 0 res__11@329@01)))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
(set-option :timeout 0)
(push) ; 17
(assert (not (and
  (<
    res__11@329@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@330@01))))
  (<= 0 res__11@329@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (and
  (<
    res__11@329@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@330@01))))
  (<= 0 res__11@329@01)))
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
(push) ; 11
; [else-branch: 79 | !(0 < |First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@323@01))))))))[rank@297@01 - 1 % First:(Second:(Second:($t@323@01)))]|)]
(assert (not
  (<
    0
    (Seq_length
      (Seq_index
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
        (mod
          (- rank@297@01 1)
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01))))))))))
(pop) ; 11
; [eval] !(0 < |__flatten_11__12.channel_hist_value[(rank - 1) % diz.field_Program_size]|)
; [eval] 0 < |__flatten_11__12.channel_hist_value[(rank - 1) % diz.field_Program_size]|
; [eval] |__flatten_11__12.channel_hist_value[(rank - 1) % diz.field_Program_size]|
; [eval] __flatten_11__12.channel_hist_value[(rank - 1) % diz.field_Program_size]
(set-option :timeout 10)
(push) ; 11
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))))
  __flatten_11__12@327@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [eval] (rank - 1) % diz.field_Program_size
; [eval] rank - 1
(push) ; 11
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(assert (not (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01))))
    0))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>=
  (mod
    (- rank@297@01 1)
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01)))))
  0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (<
  (mod
    (- rank@297@01 1)
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01)))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 11
(assert (not (<
  0
  (Seq_length
    (Seq_index
      ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
      (mod
        (- rank@297@01 1)
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01))))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (not
  (<
    0
    (Seq_length
      (Seq_index
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
        (mod
          (- rank@297@01 1)
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01)))))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 96 | !(0 < |First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@323@01))))))))[rank@297@01 - 1 % First:(Second:(Second:($t@323@01)))]|) | live]
; [else-branch: 96 | 0 < |First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@323@01))))))))[rank@297@01 - 1 % First:(Second:(Second:($t@323@01)))]| | live]
(push) ; 11
; [then-branch: 96 | !(0 < |First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@323@01))))))))[rank@297@01 - 1 % First:(Second:(Second:($t@323@01)))]|)]
(assert (not
  (<
    0
    (Seq_length
      (Seq_index
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
        (mod
          (- rank@297@01 1)
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01))))))))))
; [exec]
; exhale acc(method_Program_lock_held(diz, globals), write)
; [exec]
; fold acc(method_Program_lock_invariant(diz, globals), write)
; [eval] diz != null
(set-option :timeout 0)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 12
(assert (not (=
  (-
    (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (-
    (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2))))))
(assert (<=
  (-
    (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2))))
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2)))))
  (not (= diz@294@01 $Ref.null))))
(set-option :timeout 0)
(push) ; 12
(assert (not (or
  (=
    (-
      (/ (to_real 1) (to_real 2))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    $Perm.No)
  (<
    (-
      (/ (to_real 1) (to_real 2))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 12
(assert (not (=
  (-
    (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(assert (not (or
  (=
    (-
      (/ (to_real 1) (to_real 2))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    $Perm.No)
  (<
    (-
      (/ (to_real 1) (to_real 2))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 12
(assert (not (=
  (-
    (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(assert (not (or
  (=
    (-
      (/ (to_real 1) (to_real 2))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    $Perm.No)
  (<
    (-
      (/ (to_real 1) (to_real 2))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] 0 < diz.field_Program_maxvalue
(set-option :timeout 10)
(push) ; 12
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@323@01))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 97 | First:(Second:($t@323@01)) | live]
; [else-branch: 97 | !(First:(Second:($t@323@01))) | dead]
(push) ; 12
; [then-branch: 97 | First:(Second:($t@323@01))]
(set-option :timeout 0)
(push) ; 13
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 13
(assert (not (=
  (-
    (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(assert (not (or
  (=
    (-
      (/ (to_real 1) (to_real 2))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    $Perm.No)
  (<
    (-
      (/ (to_real 1) (to_real 2))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_f != null
(set-option :timeout 10)
(push) ; 13
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@323@01))))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 98 | First:(Second:($t@323@01)) | live]
; [else-branch: 98 | !(First:(Second:($t@323@01))) | dead]
(push) ; 13
; [then-branch: 98 | First:(Second:($t@323@01))]
(push) ; 14
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_size == |diz.field_Program_f.channel_hist_value|
(push) ; 14
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] |diz.field_Program_f.channel_hist_value|
(push) ; 14
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@323@01))))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 99 | First:(Second:($t@323@01)) | live]
; [else-branch: 99 | !(First:(Second:($t@323@01))) | dead]
(push) ; 14
; [then-branch: 99 | First:(Second:($t@323@01))]
(push) ; 15
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_size == |diz.field_Program_f.results_hist_value|
(push) ; 15
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] |diz.field_Program_f.results_hist_value|
(push) ; 15
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_initialised ==> (forall i: Int, j: Int :: { diz.field_Program_f.channel_hist_value[i][j] } 0 <= i && (i < diz.field_Program_size && (0 <= j && j < |diz.field_Program_f.channel_hist_value[i]|)) ==> 0 <= diz.field_Program_f.channel_hist_value[i][j] && diz.field_Program_f.channel_hist_value[i][j] < diz.field_Program_maxvalue)
(push) ; 15
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
(push) ; 16
(assert (not (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@323@01))))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 100 | First:(Second:($t@323@01)) | live]
; [else-branch: 100 | !(First:(Second:($t@323@01))) | dead]
(push) ; 16
; [then-branch: 100 | First:(Second:($t@323@01))]
; [eval] (forall i: Int, j: Int :: { diz.field_Program_f.channel_hist_value[i][j] } 0 <= i && (i < diz.field_Program_size && (0 <= j && j < |diz.field_Program_f.channel_hist_value[i]|)) ==> 0 <= diz.field_Program_f.channel_hist_value[i][j] && diz.field_Program_f.channel_hist_value[i][j] < diz.field_Program_maxvalue)
(declare-const i@341@01 Int)
(declare-const j@342@01 Int)
(push) ; 17
; [eval] 0 <= i && (i < diz.field_Program_size && (0 <= j && j < |diz.field_Program_f.channel_hist_value[i]|)) ==> 0 <= diz.field_Program_f.channel_hist_value[i][j] && diz.field_Program_f.channel_hist_value[i][j] < diz.field_Program_maxvalue
; [eval] 0 <= i && (i < diz.field_Program_size && (0 <= j && j < |diz.field_Program_f.channel_hist_value[i]|))
; [eval] 0 <= i
(push) ; 18
; [then-branch: 101 | 0 <= i@341@01 | live]
; [else-branch: 101 | !(0 <= i@341@01) | live]
(push) ; 19
; [then-branch: 101 | 0 <= i@341@01]
(assert (<= 0 i@341@01))
; [eval] i < diz.field_Program_size
(push) ; 20
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(push) ; 20
; [then-branch: 102 | i@341@01 < First:(Second:(Second:($t@323@01))) | live]
; [else-branch: 102 | !(i@341@01 < First:(Second:(Second:($t@323@01)))) | live]
(push) ; 21
; [then-branch: 102 | i@341@01 < First:(Second:(Second:($t@323@01)))]
(assert (<
  i@341@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01))))))
; [eval] 0 <= j
(push) ; 22
; [then-branch: 103 | 0 <= j@342@01 | live]
; [else-branch: 103 | !(0 <= j@342@01) | live]
(push) ; 23
; [then-branch: 103 | 0 <= j@342@01]
(assert (<= 0 j@342@01))
; [eval] j < |diz.field_Program_f.channel_hist_value[i]|
; [eval] |diz.field_Program_f.channel_hist_value[i]|
; [eval] diz.field_Program_f.channel_hist_value[i]
(push) ; 24
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(assert (not (>= i@341@01 0)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(push) ; 24
(assert (not (<
  i@341@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(pop) ; 23
(push) ; 23
; [else-branch: 103 | !(0 <= j@342@01)]
(assert (not (<= 0 j@342@01)))
(pop) ; 23
(pop) ; 22
; Joined path conditions
; Joined path conditions
(pop) ; 21
(push) ; 21
; [else-branch: 102 | !(i@341@01 < First:(Second:(Second:($t@323@01))))]
(assert (not
  (<
    i@341@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01)))))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(push) ; 19
; [else-branch: 101 | !(0 <= i@341@01)]
(assert (not (<= 0 i@341@01)))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(push) ; 18
; [then-branch: 104 | j@342@01 < |First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@323@01))))))))[i@341@01]| && 0 <= j@342@01 && i@341@01 < First:(Second:(Second:($t@323@01))) && 0 <= i@341@01 | live]
; [else-branch: 104 | !(j@342@01 < |First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@323@01))))))))[i@341@01]| && 0 <= j@342@01 && i@341@01 < First:(Second:(Second:($t@323@01))) && 0 <= i@341@01) | live]
(push) ; 19
; [then-branch: 104 | j@342@01 < |First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@323@01))))))))[i@341@01]| && 0 <= j@342@01 && i@341@01 < First:(Second:(Second:($t@323@01))) && 0 <= i@341@01]
(assert (and
  (and
    (and
      (<
        j@342@01
        (Seq_length
          (Seq_index
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
            i@341@01)))
      (<= 0 j@342@01))
    (<
      i@341@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01))))))
  (<= 0 i@341@01)))
; [eval] 0 <= diz.field_Program_f.channel_hist_value[i][j] && diz.field_Program_f.channel_hist_value[i][j] < diz.field_Program_maxvalue
; [eval] 0 <= diz.field_Program_f.channel_hist_value[i][j]
; [eval] diz.field_Program_f.channel_hist_value[i][j]
; [eval] diz.field_Program_f.channel_hist_value[i]
(set-option :timeout 10)
(push) ; 20
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 20
(assert (not (>= i@341@01 0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(push) ; 20
(assert (not (<
  i@341@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(push) ; 20
(assert (not (>= j@342@01 0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(push) ; 20
; [then-branch: 105 | 0 <= First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@323@01))))))))[i@341@01][j@342@01] | live]
; [else-branch: 105 | !(0 <= First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@323@01))))))))[i@341@01][j@342@01]) | live]
(push) ; 21
; [then-branch: 105 | 0 <= First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@323@01))))))))[i@341@01][j@342@01]]
(assert (<=
  0
  (Seq_index
    (Seq_index
      ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
      i@341@01)
    j@342@01)))
; [eval] diz.field_Program_f.channel_hist_value[i][j] < diz.field_Program_maxvalue
; [eval] diz.field_Program_f.channel_hist_value[i][j]
; [eval] diz.field_Program_f.channel_hist_value[i]
(set-option :timeout 10)
(push) ; 22
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(assert (not (>= i@341@01 0)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(push) ; 22
(assert (not (<
  i@341@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(push) ; 22
(assert (not (>= j@342@01 0)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 22
(assert (not (< $Perm.No (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(pop) ; 21
(push) ; 21
; [else-branch: 105 | !(0 <= First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@323@01))))))))[i@341@01][j@342@01])]
(assert (not
  (<=
    0
    (Seq_index
      (Seq_index
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
        i@341@01)
      j@342@01))))
(pop) ; 21
(pop) ; 20
; Joined path conditions
; Joined path conditions
(pop) ; 19
(push) ; 19
; [else-branch: 104 | !(j@342@01 < |First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@323@01))))))))[i@341@01]| && 0 <= j@342@01 && i@341@01 < First:(Second:(Second:($t@323@01))) && 0 <= i@341@01)]
(assert (not
  (and
    (and
      (and
        (<
          j@342@01
          (Seq_length
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
              i@341@01)))
        (<= 0 j@342@01))
      (<
        i@341@01
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01))))))
    (<= 0 i@341@01))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert (implies
  (and
    (and
      (and
        (<
          j@342@01
          (Seq_length
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
              i@341@01)))
        (<= 0 j@342@01))
      (<
        i@341@01
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01))))))
    (<= 0 i@341@01))
  (and
    (<
      j@342@01
      (Seq_length
        (Seq_index
          ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
          i@341@01)))
    (<= 0 j@342@01)
    (<
      i@341@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01)))))
    (<= 0 i@341@01))))
; Joined path conditions
(pop) ; 17
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@341@01 Int) (j@342@01 Int)) (!
  (implies
    (and
      (and
        (and
          (<
            j@342@01
            (Seq_length
              (Seq_index
                ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
                i@341@01)))
          (<= 0 j@342@01))
        (<
          i@341@01
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01))))))
      (<= 0 i@341@01))
    (and
      (<
        j@342@01
        (Seq_length
          (Seq_index
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
            i@341@01)))
      (<= 0 j@342@01)
      (<
        i@341@01
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01)))))
      (<= 0 i@341@01)))
  :pattern ((Seq_index
    (Seq_index
      ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
      i@341@01)
    j@342@01))
  :qid |prog.l266-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (implies
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@323@01)))
  (forall ((i@341@01 Int) (j@342@01 Int)) (!
    (implies
      (and
        (and
          (and
            (<
              j@342@01
              (Seq_length
                (Seq_index
                  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
                  i@341@01)))
            (<= 0 j@342@01))
          (<
            i@341@01
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01))))))
        (<= 0 i@341@01))
      (and
        (<
          j@342@01
          (Seq_length
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
              i@341@01)))
        (<= 0 j@342@01)
        (<
          i@341@01
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01)))))
        (<= 0 i@341@01)))
    :pattern ((Seq_index
      (Seq_index
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
        i@341@01)
      j@342@01))
    :qid |prog.l266-aux|))))
(set-option :timeout 0)
(push) ; 15
(assert (not (implies
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@323@01)))
  (forall ((i@341@01 Int) (j@342@01 Int)) (!
    (implies
      (and
        (and
          (and
            (<
              j@342@01
              (Seq_length
                (Seq_index
                  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
                  i@341@01)))
            (<= 0 j@342@01))
          (<
            i@341@01
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01))))))
        (<= 0 i@341@01))
      (and
        (<
          (Seq_index
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
              i@341@01)
            j@342@01)
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))
        (<=
          0
          (Seq_index
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
              i@341@01)
            j@342@01))))
    :pattern ((Seq_index
      (Seq_index
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
        i@341@01)
      j@342@01))
    :qid |prog.l266|)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (implies
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@323@01)))
  (forall ((i@341@01 Int) (j@342@01 Int)) (!
    (implies
      (and
        (and
          (and
            (<
              j@342@01
              (Seq_length
                (Seq_index
                  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
                  i@341@01)))
            (<= 0 j@342@01))
          (<
            i@341@01
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01))))))
        (<= 0 i@341@01))
      (and
        (<
          (Seq_index
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
              i@341@01)
            j@342@01)
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))
        (<=
          0
          (Seq_index
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
              i@341@01)
            j@342@01))))
    :pattern ((Seq_index
      (Seq_index
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
        i@341@01)
      j@342@01))
    :qid |prog.l266|))))
(assert (method_Program_lock_invariant%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second $t@323@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@323@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.combine
              ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))
              $Snap.unit)
            ($Snap.combine
              ($Snap.combine
                ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
                  $Snap.unit))
              ($Snap.combine
                ($Snap.combine
                  ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))))))
                    $Snap.unit))
                $Snap.unit)))))))) diz@294@01 globals@296@01))
; [exec]
; exhale acc(method_Program_lock_invariant(diz, globals), write)
; Loop head block: Re-establish invariant
; [eval] frac_val(q1) != none
; [eval] frac_val(q1)
; [eval] frac_val(q2) != none
; [eval] frac_val(q2)
; [eval] frac_val(q1)
(push) ; 15
(assert (not (or
  (= (frac_val<Perm> q1@300@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> q1@300@01)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 15
(assert (not (=
  (-
    (-
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    ($Perm.min
      (-
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        ($Perm.min
          (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
          (/ (to_real 1) (to_real 2))))
      (frac_val<Perm> q1@300@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(assert (not (or
  (=
    (-
      (frac_val<Perm> q1@300@01)
      ($Perm.min
        (-
          (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
          ($Perm.min
            (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
            (/ (to_real 1) (to_real 2))))
        (frac_val<Perm> q1@300@01)))
    $Perm.No)
  (<
    (-
      (frac_val<Perm> q1@300@01)
      ($Perm.min
        (-
          (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
          ($Perm.min
            (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
            (/ (to_real 1) (to_real 2))))
        (frac_val<Perm> q1@300@01)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] frac_val(q1)
(push) ; 15
(assert (not (or
  (= (frac_val<Perm> q1@300@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> q1@300@01)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 15
(assert (not (=
  (-
    (-
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    ($Perm.min
      (-
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        ($Perm.min
          (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
          (/ (to_real 1) (to_real 2))))
      (frac_val<Perm> q1@300@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(assert (not (or
  (=
    (-
      (frac_val<Perm> q1@300@01)
      ($Perm.min
        (-
          (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
          ($Perm.min
            (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
            (/ (to_real 1) (to_real 2))))
        (frac_val<Perm> q1@300@01)))
    $Perm.No)
  (<
    (-
      (frac_val<Perm> q1@300@01)
      ($Perm.min
        (-
          (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
          ($Perm.min
            (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
            (/ (to_real 1) (to_real 2))))
        (frac_val<Perm> q1@300@01)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= rank
; [eval] rank < diz.field_Program_size
(set-option :timeout 10)
(push) ; 15
(assert (not (<
  $Perm.No
  (-
    (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2)))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(assert (not (<
  rank@297@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01)))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (<
  rank@297@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01))))))
; [eval] frac_val(q1)
(push) ; 15
(assert (not (or
  (= (frac_val<Perm> q1@300@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> q1@300@01)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 15
(assert (not (=
  (-
    (-
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    ($Perm.min
      (-
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        ($Perm.min
          (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
          (/ (to_real 1) (to_real 2))))
      (frac_val<Perm> q1@300@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(assert (not (or
  (=
    (-
      (frac_val<Perm> q1@300@01)
      ($Perm.min
        (-
          (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
          ($Perm.min
            (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
            (/ (to_real 1) (to_real 2))))
        (frac_val<Perm> q1@300@01)))
    $Perm.No)
  (<
    (-
      (frac_val<Perm> q1@300@01)
      ($Perm.min
        (-
          (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
          ($Perm.min
            (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
            (/ (to_real 1) (to_real 2))))
        (frac_val<Perm> q1@300@01)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 15
(assert (not (<
  $Perm.No
  (-
    (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2)))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] frac_val(q1)
(set-option :timeout 0)
(push) ; 15
(assert (not (or
  (= (frac_val<Perm> q1@300@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> q1@300@01)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 15
(assert (not (=
  (-
    (-
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    ($Perm.min
      (-
        (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
        ($Perm.min
          (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
          (/ (to_real 1) (to_real 2))))
      (frac_val<Perm> q1@300@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(assert (not (or
  (=
    (-
      (frac_val<Perm> q1@300@01)
      ($Perm.min
        (-
          (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
          ($Perm.min
            (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
            (/ (to_real 1) (to_real 2))))
        (frac_val<Perm> q1@300@01)))
    $Perm.No)
  (<
    (-
      (frac_val<Perm> q1@300@01)
      ($Perm.min
        (-
          (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
          ($Perm.min
            (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
            (/ (to_real 1) (to_real 2))))
        (frac_val<Perm> q1@300@01)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_f != null
(set-option :timeout 10)
(push) ; 15
(assert (not (<
  $Perm.No
  (-
    (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2)))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_size == old(diz.field_Program_size)
(push) ; 15
(assert (not (<
  $Perm.No
  (-
    (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2)))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_size)
(push) ; 15
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))))
; [eval] diz.field_Program_maxvalue == old(diz.field_Program_maxvalue)
(set-option :timeout 10)
(push) ; 15
(assert (not (<
  $Perm.No
  (-
    (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2)))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_maxvalue)
(push) ; 15
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01))))))))
; [eval] diz.field_Program_f == old(diz.field_Program_f)
(set-option :timeout 10)
(push) ; 15
(assert (not (<
  $Perm.No
  (-
    (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2)))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_f)
(push) ; 15
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01))))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))))))))))
; [eval] 0 <= rank
; [eval] rank < diz.field_Program_size
(set-option :timeout 10)
(push) ; 15
(assert (not (<
  $Perm.No
  (-
    (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2)))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] !stop__10
(push) ; 15
(assert (not stop__10@321@01))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 106 | !(stop__10@321@01) | live]
; [else-branch: 106 | stop__10@321@01 | dead]
(push) ; 15
; [then-branch: 106 | !(stop__10@321@01)]
(push) ; 16
(assert (not (<
  $Perm.No
  (-
    (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2)))))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [eval] p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, diz.field_Program_maxvalue - 1, diz.field_Program_maxvalue, n)
(push) ; 16
(assert (not (<
  $Perm.No
  (-
    (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2)))))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_maxvalue - 1
(push) ; 16
(assert (not (<
  $Perm.No
  (-
    (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2)))))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(assert (not (<
  $Perm.No
  (-
    (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+ (frac_val<Perm> q1@300@01) (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2)))))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(assert (not (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
  (=
    (p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer<Process> rank@297@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@322@01)))) v@298@01 (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))
      1) ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@01))))) n@299@01)
    (p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer<Process> rank@297@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01)))) v@298@01 (-
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))
      1) ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@323@01))))) n@299@01)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 107 | stop__10@321@01 | dead]
; [else-branch: 107 | !(stop__10@321@01) | live]
(push) ; 16
; [else-branch: 107 | !(stop__10@321@01)]
; [eval] stop__10 ==> 0 <= res__11 && res__11 < diz.field_Program_maxvalue
(push) ; 17
; [then-branch: 108 | stop__10@321@01 | dead]
; [else-branch: 108 | !(stop__10@321@01) | live]
(push) ; 18
; [else-branch: 108 | !(stop__10@321@01)]
(pop) ; 18
(pop) ; 17
; Joined path conditions
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
(push) ; 11
; [else-branch: 96 | 0 < |First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@323@01))))))))[rank@297@01 - 1 % First:(Second:(Second:($t@323@01)))]|]
(assert (<
  0
  (Seq_length
    (Seq_index
      ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@323@01)))))))))
      (mod
        (- rank@297@01 1)
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@323@01)))))))))
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
; [eval] !!stop__10
; [eval] !stop__10
; [then-branch: 109 | stop__10@321@01 | dead]
; [else-branch: 109 | !(stop__10@321@01) | live]
(push) ; 7
; [else-branch: 109 | !(stop__10@321@01)]
(pop) ; 7
(pop) ; 6
(push) ; 6
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
  $Snap.unit))
(assert (implies
  stop__10@321@01
  (and
    (<
      res__11@316@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))
    (<= 0 res__11@316@01))))
(assert stop__10@321@01)
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))))
(assert (= $t@322@01 ($Snap.combine ($Snap.first $t@322@01) ($Snap.second $t@322@01))))
(assert (= ($Snap.first $t@322@01) $Snap.unit))
(assert (=
  ($Snap.second $t@322@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@322@01))
    ($Snap.second ($Snap.second $t@322@01)))))
(assert (= ($Snap.first ($Snap.second $t@322@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@322@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@322@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@322@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))
  $Snap.unit))
(assert (<
  rank@297@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@322@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))
  $Snap.unit))
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@322@01))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@303@01)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))))))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
; [eval] !stop__10
; [then-branch: 110 | !(stop__10@321@01) | dead]
; [else-branch: 110 | stop__10@321@01 | live]
(push) ; 7
; [else-branch: 110 | stop__10@321@01]
(pop) ; 7
; [eval] !!stop__10
; [eval] !stop__10
(push) ; 7
(assert (not (not stop__10@321@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 111 | stop__10@321@01 | live]
; [else-branch: 111 | !(stop__10@321@01) | dead]
(push) ; 7
; [then-branch: 111 | stop__10@321@01]
; [exec]
; sys__local__result__9 := res__11
; [exec]
; assert 0 <= sys__local__result__9 && (sys__local__result__9 < diz.field_Program_maxvalue && (diz.field_Program_size == old(diz.field_Program_size) && (diz.field_Program_maxvalue == old(diz.field_Program_maxvalue) && (diz.field_Program_f == old(diz.field_Program_f) && acc(hist_idle(diz.field_Program_f, q2, p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, sys__local__result__9, diz.field_Program_maxvalue, n)), write)))))
; [eval] 0 <= sys__local__result__9
(set-option :timeout 0)
(push) ; 8
(assert (not (<= 0 res__11@316@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 res__11@316@01))
; [eval] sys__local__result__9 < diz.field_Program_maxvalue
(set-option :timeout 10)
(push) ; 8
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(assert (not (<
  res__11@316@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@01))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (<
  res__11@316@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@322@01)))))))
; [eval] diz.field_Program_size == old(diz.field_Program_size)
(set-option :timeout 10)
(push) ; 8
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_size)
(push) ; 8
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_maxvalue == old(diz.field_Program_maxvalue)
(push) ; 8
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_maxvalue)
(push) ; 8
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_f == old(diz.field_Program_f)
(push) ; 8
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_f)
(push) ; 8
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, sys__local__result__9, diz.field_Program_maxvalue, n)
(push) ; 8
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [exec]
; label __return_mpi_recv
; [exec]
; sys__result := sys__local__result__9
; [exec]
; assert frac_val(q1) != none && (frac_val(q2) != none && (acc(diz.field_Program_size, frac_val(q1)) && (acc(diz.field_Program_maxvalue, frac_val(q1)) && (0 <= rank && rank < diz.field_Program_size && (acc(diz.field_Program_initialised, frac_val(q1)) && (diz.field_Program_initialised && (acc(diz.field_Program_f, frac_val(q1)) && (diz.field_Program_f != null && (0 <= sys__result && sys__result < diz.field_Program_maxvalue && (diz.field_Program_size == old(diz.field_Program_size) && (diz.field_Program_maxvalue == old(diz.field_Program_maxvalue) && (diz.field_Program_f == old(diz.field_Program_f) && acc(hist_idle(diz.field_Program_f, q2, p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, sys__result, diz.field_Program_maxvalue, n)), write)))))))))))))
; [eval] frac_val(q1) != none
; [eval] frac_val(q1)
; [eval] frac_val(q2) != none
; [eval] frac_val(q2)
; [eval] frac_val(q1)
(set-option :timeout 0)
(push) ; 8
(assert (not (or
  (= (frac_val<Perm> q1@300@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> q1@300@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] frac_val(q1)
(push) ; 8
(assert (not (or
  (= (frac_val<Perm> q1@300@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> q1@300@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= rank
; [eval] rank < diz.field_Program_size
(set-option :timeout 10)
(push) ; 8
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] frac_val(q1)
(set-option :timeout 0)
(push) ; 8
(assert (not (or
  (= (frac_val<Perm> q1@300@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> q1@300@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 8
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] frac_val(q1)
(set-option :timeout 0)
(push) ; 8
(assert (not (or
  (= (frac_val<Perm> q1@300@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> q1@300@01)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_f != null
(set-option :timeout 10)
(push) ; 8
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= sys__result
; [eval] sys__result < diz.field_Program_maxvalue
(push) ; 8
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_size == old(diz.field_Program_size)
(push) ; 8
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_size)
(push) ; 8
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_maxvalue == old(diz.field_Program_maxvalue)
(push) ; 8
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_maxvalue)
(push) ; 8
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_f == old(diz.field_Program_f)
(push) ; 8
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_f)
(push) ; 8
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, sys__result, diz.field_Program_maxvalue, n)
(push) ; 8
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (< $Perm.No (frac_val<Perm> q1@300@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale false
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- method_Program_elect__Integer__Integer ----------
(declare-const diz@343@01 $Ref)
(declare-const current_thread_id@344@01 Int)
(declare-const globals@345@01 $Ref)
(declare-const rank@346@01 Int)
(declare-const vArg@347@01 Int)
(declare-const q1@348@01 frac)
(declare-const q2@349@01 frac)
(declare-const sys__result@350@01 Int)
(declare-const diz@351@01 $Ref)
(declare-const current_thread_id@352@01 Int)
(declare-const globals@353@01 $Ref)
(declare-const rank@354@01 Int)
(declare-const vArg@355@01 Int)
(declare-const q1@356@01 frac)
(declare-const q2@357@01 frac)
(declare-const sys__result@358@01 Int)
(push) ; 1
(declare-const $t@359@01 $Snap)
(assert (= $t@359@01 ($Snap.combine ($Snap.first $t@359@01) ($Snap.second $t@359@01))))
(assert (= ($Snap.first $t@359@01) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@351@01 $Ref.null)))
(assert (=
  ($Snap.second $t@359@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@359@01))
    ($Snap.second ($Snap.second $t@359@01)))))
(assert (= ($Snap.first ($Snap.second $t@359@01)) $Snap.unit))
; [eval] frac_val(q1) != none
; [eval] frac_val(q1)
(assert (not (= (frac_val<Perm> q1@356@01) $Perm.No)))
(assert (=
  ($Snap.second ($Snap.second $t@359@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@359@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@359@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@359@01))) $Snap.unit))
; [eval] frac_val(q2) != none
; [eval] frac_val(q2)
(assert (not (= (frac_val<Perm> q2@357@01) $Perm.No)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@359@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@359@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01)))))))
; [eval] frac_val(q1)
(assert (<= $Perm.No (frac_val<Perm> q1@356@01)))
(assert (<= (frac_val<Perm> q1@356@01) $Perm.Write))
(assert (implies (< $Perm.No (frac_val<Perm> q1@356@01)) (not (= diz@351@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01)))))
  $Snap.unit))
; [eval] 0 <= rank
(assert (<= 0 rank@354@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01))))))
  $Snap.unit))
; [eval] rank < diz.field_Program_size
(push) ; 2
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (<
  rank@354@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@359@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01))))))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01))))))))
  $Snap.unit))
(push) ; 2
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01))))))))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01))))))))))
  $Snap.unit))
; [eval] 0 <= vArg
(assert (<= 0 vArg@355@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01)))))))))))
  $Snap.unit))
; [eval] vArg < diz.field_Program_maxvalue
(push) ; 2
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (<
  vArg@355@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01))))))))))))
  $Snap.unit))
; [eval] 0 <= current_thread_id
(assert (<= 0 current_thread_id@352@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01))))))))))))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01))))))))))))))
  $Snap.unit))
; [eval] diz.field_Program_f != null
(push) ; 2
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01))))))))))))))
    $Ref.null)))
(push) ; 2
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; [eval] p_method_Future_Elect__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, vArg, diz.field_Program_maxvalue, 0)
(push) ; 2
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(push) ; 2
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@360@01 $Snap)
(assert (= $t@360@01 ($Snap.combine ($Snap.first $t@360@01) ($Snap.second $t@360@01))))
(assert (= ($Snap.first $t@360@01) $Snap.unit))
; [eval] frac_val(q1) != none
; [eval] frac_val(q1)
(assert (=
  ($Snap.second $t@360@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@360@01))
    ($Snap.second ($Snap.second $t@360@01)))))
(assert (= ($Snap.first ($Snap.second $t@360@01)) $Snap.unit))
; [eval] frac_val(q2) != none
; [eval] frac_val(q2)
(assert (=
  ($Snap.second ($Snap.second $t@360@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@360@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@360@01))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@360@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@360@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@360@01))))
  $Snap.unit))
; [eval] 0 <= rank
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01)))))
  $Snap.unit))
; [eval] rank < diz.field_Program_size
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<
  rank@354@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@360@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01)))))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01)))))))
  $Snap.unit))
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01)))))))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01)))))))))
  $Snap.unit))
; [eval] 0 <= vArg
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01))))))))))
  $Snap.unit))
; [eval] vArg < diz.field_Program_maxvalue
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<
  vArg@355@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01))))))))))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01))))))))))))
  $Snap.unit))
; [eval] diz.field_Program_f != null
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01))))))))))))))))
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] p_method_Future_Done__Integer__Integer(rank, sys__result)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01))))))))))))))
  $Snap.unit))
; [eval] 0 <= sys__result
(assert (<= 0 sys__result@358@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result < diz.field_Program_maxvalue
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<
  sys__result@358@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01))))))))))))))))
  $Snap.unit))
; [eval] diz.field_Program_size == old(diz.field_Program_size)
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_size)
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@360@01))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@359@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01)))))))))))))))))
  $Snap.unit))
; [eval] diz.field_Program_maxvalue == old(diz.field_Program_maxvalue)
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_maxvalue)
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01)))))))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01)))))))))))))))))
  $Snap.unit))
; [eval] diz.field_Program_f == old(diz.field_Program_f)
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_f)
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@360@01))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01))))))))))))))))
(pop) ; 2
(push) ; 2
; [exec]
; var R__23: Process
(declare-const R__23@361@01 Process)
; [exec]
; var w__22: Int
(declare-const w__22@362@01 Int)
; [exec]
; var Q__21: Process
(declare-const Q__21@363@01 Process)
; [exec]
; var sys__local__result__18: Int
(declare-const sys__local__result__18@364@01 Int)
; [exec]
; var v__19: Int
(declare-const v__19@365@01 Int)
; [exec]
; var n__20: Int
(declare-const n__20@366@01 Int)
; [exec]
; v__19 := vArg
; [exec]
; n__20 := 0
(declare-const Q__21@367@01 Process)
(declare-const w__22@368@01 Int)
(declare-const v__19@369@01 Int)
(declare-const R__23@370@01 Process)
(declare-const n__20@371@01 Int)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@372@01 $Snap)
(assert (= $t@372@01 ($Snap.combine ($Snap.first $t@372@01) ($Snap.second $t@372@01))))
(assert (= ($Snap.first $t@372@01) $Snap.unit))
; [eval] frac_val(q1) != none
; [eval] frac_val(q1)
(assert (=
  ($Snap.second $t@372@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@372@01))
    ($Snap.second ($Snap.second $t@372@01)))))
(assert (= ($Snap.first ($Snap.second $t@372@01)) $Snap.unit))
; [eval] frac_val(q2) != none
; [eval] frac_val(q2)
(assert (=
  ($Snap.second ($Snap.second $t@372@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@372@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@372@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@372@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@372@01))))
  $Snap.unit))
; [eval] 0 <= rank
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))
  $Snap.unit))
; [eval] rank < diz.field_Program_size
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (<
  rank@354@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@372@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))
  $Snap.unit))
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))
  $Snap.unit))
; [eval] 0 <= vArg
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))))
  $Snap.unit))
; [eval] vArg < diz.field_Program_maxvalue
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (<
  vArg@355@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))))
  $Snap.unit))
; [eval] diz.field_Program_size == old(diz.field_Program_size)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_size)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@372@01))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@359@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))))))
  $Snap.unit))
; [eval] diz.field_Program_maxvalue == old(diz.field_Program_maxvalue)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_maxvalue)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))))))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))))))))
  $Snap.unit))
; [eval] diz.field_Program_f != null
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))))))))
  $Snap.unit))
; [eval] diz.field_Program_f == old(diz.field_Program_f)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_f)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))))))))))
  $Snap.unit))
; [eval] 0 <= n__20
(assert (<= 0 n__20@371@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))))))))))
  $Snap.unit))
; [eval] n__20 <= diz.field_Program_size
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (<=
  n__20@371@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@372@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))))))))))))))
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] p_method_Future_Elect__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v__19, diz.field_Program_maxvalue, n__20)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))))))))))))
  $Snap.unit))
; [eval] 0 <= v__19
(assert (<= 0 v__19@369@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))))))))))))
  $Snap.unit))
; [eval] v__19 < diz.field_Program_maxvalue
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (<
  v__19@369@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))))
; Loop head block: Check well-definedness of edge conditions
(push) ; 4
; [eval] n__20 < diz.field_Program_size
(push) ; 5
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [eval] !(n__20 < diz.field_Program_size)
; [eval] n__20 < diz.field_Program_size
(push) ; 5
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; [eval] frac_val(q1) != none
; [eval] frac_val(q1)
; [eval] frac_val(q2) != none
; [eval] frac_val(q2)
; [eval] frac_val(q1)
(set-option :timeout 0)
(push) ; 4
(assert (not (or
  (= (frac_val<Perm> q1@356@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> q1@356@01)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= rank
; [eval] rank < diz.field_Program_size
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] frac_val(q1)
(set-option :timeout 0)
(push) ; 4
(assert (not (or
  (= (frac_val<Perm> q1@356@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> q1@356@01)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] frac_val(q1)
(set-option :timeout 0)
(push) ; 4
(assert (not (or
  (= (frac_val<Perm> q1@356@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> q1@356@01)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= vArg
; [eval] vArg < diz.field_Program_maxvalue
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_size == old(diz.field_Program_size)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_size)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_maxvalue == old(diz.field_Program_maxvalue)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_maxvalue)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] frac_val(q1)
(set-option :timeout 0)
(push) ; 4
(assert (not (or
  (= (frac_val<Perm> q1@356@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> q1@356@01)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_f != null
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_f == old(diz.field_Program_f)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_f)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= n__20
; [eval] n__20 <= diz.field_Program_size
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@359@01))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@359@01)))))))
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] p_method_Future_Elect__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v__19, diz.field_Program_maxvalue, n__20)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= v__19
; [eval] v__19 < diz.field_Program_maxvalue
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert (= $t@372@01 ($Snap.combine ($Snap.first $t@372@01) ($Snap.second $t@372@01))))
(assert (= ($Snap.first $t@372@01) $Snap.unit))
(assert (=
  ($Snap.second $t@372@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@372@01))
    ($Snap.second ($Snap.second $t@372@01)))))
(assert (= ($Snap.first ($Snap.second $t@372@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@372@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@372@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@372@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@372@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@372@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))
  $Snap.unit))
(assert (<
  rank@354@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@372@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))
  $Snap.unit))
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))))
  $Snap.unit))
(assert (<
  vArg@355@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@372@01))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@359@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))))))))
  $Snap.unit))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))))))))
  $Snap.unit))
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))))))))))
  $Snap.unit))
(assert (<= 0 n__20@371@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))))))))))
  $Snap.unit))
(assert (<=
  n__20@371@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@372@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))))))))))))
  $Snap.unit))
(assert (<= 0 v__19@369@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))))))))))))
  $Snap.unit))
(assert (<
  v__19@369@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
; [eval] n__20 < diz.field_Program_size
(push) ; 5
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (not
  (<
    n__20@371@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@372@01))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<
  n__20@371@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@372@01)))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 112 | n__20@371@01 < First:(Second:(Second:($t@372@01))) | live]
; [else-branch: 112 | !(n__20@371@01 < First:(Second:(Second:($t@372@01)))) | live]
(push) ; 5
; [then-branch: 112 | n__20@371@01 < First:(Second:(Second:($t@372@01)))]
(assert (<
  n__20@371@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@372@01))))))
; [exec]
; method_Program_lemma_fut_elect__Future__Integer__Integer__Integer__Integer__Integer(diz, current_thread_id, globals, diz.field_Program_f, rank, diz.field_Program_size, v__19, diz.field_Program_maxvalue, n__20, q2)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] diz != null
; [eval] 0 <= current_thread_id
; [eval] frac_val(q) != none
; [eval] frac_val(q)
; [eval] n < size
; [eval] 0 <= rank
; [eval] rank < size
; [eval] p_method_Future_Elect__Integer__Integer__Integer__Integer__Integer(rank, size, v, maxvalue, n)
(declare-const $t@373@01 $Snap)
(assert (= $t@373@01 ($Snap.combine ($Snap.first $t@373@01) ($Snap.second $t@373@01))))
(assert (= ($Snap.first $t@373@01) $Snap.unit))
; [eval] frac_val(q) != none
; [eval] frac_val(q)
; [eval] p_seq(p_method_Future_Send__Integer__Integer((rank + 1) % size, v), p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer(rank, size, v, maxvalue - 1, maxvalue, n))
; [eval] p_method_Future_Send__Integer__Integer((rank + 1) % size, v)
; [eval] (rank + 1) % size
; [eval] rank + 1
(set-option :timeout 0)
(push) ; 6
(assert (not (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@372@01))))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer(rank, size, v, maxvalue - 1, maxvalue, n)
; [eval] maxvalue - 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; Q__21 := p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v__19, diz.field_Program_maxvalue - 1, diz.field_Program_maxvalue, n__20)
; [eval] p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v__19, diz.field_Program_maxvalue - 1, diz.field_Program_maxvalue, n__20)
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_maxvalue - 1
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const Q__21@374@01 Process)
(assert (=
  Q__21@374@01
  (p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer<Process> rank@354@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@372@01)))) v__19@369@01 (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))
    1) ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))) n__20@371@01)))
; [exec]
; method_Program_mpi_send__Integer__Integer(diz, current_thread_id, globals, (rank + 1) % diz.field_Program_size, v__19, q1, q2, Q__21)
; [eval] (rank + 1) % diz.field_Program_size
; [eval] rank + 1
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(assert (not (not
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@372@01))))
    0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] diz != null
; [eval] frac_val(q1) != none
; [eval] frac_val(q1)
; [eval] frac_val(q2) != none
; [eval] frac_val(q2)
; [eval] frac_val(q1)
(push) ; 6
(assert (not (or
  (= (frac_val<Perm> q1@356@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> q1@356@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] frac_val(q1)
(push) ; 6
(assert (not (or
  (= (frac_val<Perm> q1@356@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> q1@356@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= rank
(push) ; 6
(assert (not (<=
  0
  (mod
    (+ rank@354@01 1)
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@372@01))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (<=
  0
  (mod
    (+ rank@354@01 1)
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@372@01)))))))
; [eval] rank < diz.field_Program_size
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(assert (not (<
  (mod
    (+ rank@354@01 1)
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@372@01)))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@372@01)))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (<
  (mod
    (+ rank@354@01 1)
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@372@01)))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@372@01))))))
; [eval] 0 <= msg
; [eval] msg < diz.field_Program_maxvalue
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] frac_val(q1)
(set-option :timeout 0)
(push) ; 6
(assert (not (or
  (= (frac_val<Perm> q1@356@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> q1@356@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] frac_val(q1)
(set-option :timeout 0)
(push) ; 6
(assert (not (or
  (= (frac_val<Perm> q1@356@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> q1@356@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_f != null
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= current_thread_id
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] p_seq(p_method_Future_Send__Integer__Integer(rank, msg), P)
; [eval] p_method_Future_Send__Integer__Integer(rank, msg)
(push) ; 6
(assert (not (=
  (p_seq<Process> (p_method_Future_Send__Integer__Integer<Process> (mod
    (+ rank@354@01 1)
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@372@01))))) v__19@369@01) (p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer<Process> rank@354@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@372@01)))) v__19@369@01 (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))
    1) ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))) n__20@371@01))
  (p_seq<Process> (p_method_Future_Send__Integer__Integer<Process> (mod
    (+ rank@354@01 1)
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@372@01))))) v__19@369@01) Q__21@374@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const $t@375@01 $Snap)
(assert (= $t@375@01 ($Snap.combine ($Snap.first $t@375@01) ($Snap.second $t@375@01))))
(assert (= ($Snap.first $t@375@01) $Snap.unit))
; [eval] frac_val(q1) != none
; [eval] frac_val(q1)
(assert (=
  ($Snap.second $t@375@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@375@01))
    ($Snap.second ($Snap.second $t@375@01)))))
(assert (= ($Snap.first ($Snap.second $t@375@01)) $Snap.unit))
; [eval] frac_val(q2) != none
; [eval] frac_val(q2)
(assert (=
  ($Snap.second ($Snap.second $t@375@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@375@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@375@01))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@375@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@375@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01)))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01)))))
  $Snap.unit))
; [eval] 0 <= rank
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01))))))
  $Snap.unit))
; [eval] rank < diz.field_Program_size
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (<
  (mod
    (+ rank@354@01 1)
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@372@01)))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@375@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01)))))))
  $Snap.unit))
; [eval] 0 <= msg
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01))))))))
  $Snap.unit))
; [eval] msg < diz.field_Program_maxvalue
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (<
  v__19@369@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@375@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01))))))))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01))))))))))
  $Snap.unit))
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01))))))))))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01))))))))))))
  $Snap.unit))
; [eval] diz.field_Program_f != null
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01))))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01))))))))))))))
  $Snap.unit))
; [eval] diz.field_Program_size == old(diz.field_Program_size)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_size)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@375@01))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@372@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01)))))))))))))))
  $Snap.unit))
; [eval] diz.field_Program_maxvalue == old(diz.field_Program_maxvalue)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_maxvalue)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@375@01)))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01)))))))))))))))
  $Snap.unit))
; [eval] diz.field_Program_f == old(diz.field_Program_f)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_f)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; assert Q__21 == p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v__19, diz.field_Program_maxvalue - 1, diz.field_Program_maxvalue, n__20)
; [eval] Q__21 == p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v__19, diz.field_Program_maxvalue - 1, diz.field_Program_maxvalue, n__20)
; [eval] p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v__19, diz.field_Program_maxvalue - 1, diz.field_Program_maxvalue, n__20)
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_maxvalue - 1
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(assert (not (=
  Q__21@374@01
  (p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer<Process> rank@354@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@375@01)))) v__19@369@01 (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@375@01)))))
    1) ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@375@01))))) n__20@371@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.53s
; (get-info :all-statistics)
(assert (=
  Q__21@374@01
  (p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer<Process> rank@354@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@375@01)))) v__19@369@01 (-
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@375@01)))))
    1) ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@375@01))))) n__20@371@01)))
; [exec]
; assert acc(hist_idle(diz.field_Program_f, q2, p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v__19, diz.field_Program_maxvalue - 1, diz.field_Program_maxvalue, n__20)), write)
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v__19, diz.field_Program_maxvalue - 1, diz.field_Program_maxvalue, n__20)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_maxvalue - 1
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [exec]
; w__22 := method_Program_mpi_recv__Integer(diz, current_thread_id, globals, rank, v__19, n__20, q1, q2)
; [eval] diz != null
; [eval] frac_val(q1) != none
; [eval] frac_val(q1)
; [eval] frac_val(q2) != none
; [eval] frac_val(q2)
; [eval] frac_val(q1)
(set-option :timeout 0)
(push) ; 6
(assert (not (or
  (= (frac_val<Perm> q1@356@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> q1@356@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] frac_val(q1)
(push) ; 6
(assert (not (or
  (= (frac_val<Perm> q1@356@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> q1@356@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= rank
; [eval] rank < diz.field_Program_size
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(assert (not (<
  rank@354@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@375@01)))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (<
  rank@354@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@375@01))))))
; [eval] frac_val(q1)
(push) ; 6
(assert (not (or
  (= (frac_val<Perm> q1@356@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> q1@356@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] frac_val(q1)
(set-option :timeout 0)
(push) ; 6
(assert (not (or
  (= (frac_val<Perm> q1@356@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> q1@356@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_f != null
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= current_thread_id
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] p_method_Future_SigmaRecv__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, diz.field_Program_maxvalue - 1, diz.field_Program_maxvalue, n)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_maxvalue - 1
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const sys__result@376@01 Int)
(declare-const $t@377@01 $Snap)
(assert (= $t@377@01 ($Snap.combine ($Snap.first $t@377@01) ($Snap.second $t@377@01))))
(assert (= ($Snap.first $t@377@01) $Snap.unit))
; [eval] frac_val(q1) != none
; [eval] frac_val(q1)
(assert (=
  ($Snap.second $t@377@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@377@01))
    ($Snap.second ($Snap.second $t@377@01)))))
(assert (= ($Snap.first ($Snap.second $t@377@01)) $Snap.unit))
; [eval] frac_val(q2) != none
; [eval] frac_val(q2)
(assert (=
  ($Snap.second ($Snap.second $t@377@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@377@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@377@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))
  $Snap.unit))
; [eval] 0 <= rank
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))
  $Snap.unit))
; [eval] rank < diz.field_Program_size
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (<
  rank@354@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@377@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))))
  $Snap.unit))
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))))))
  $Snap.unit))
; [eval] diz.field_Program_f != null
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))))))))
  $Snap.unit))
; [eval] 0 <= sys__result
(assert (<= 0 sys__result@376@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))))))))
  $Snap.unit))
; [eval] sys__result < diz.field_Program_maxvalue
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (<
  sys__result@376@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))))))))))
  $Snap.unit))
; [eval] diz.field_Program_size == old(diz.field_Program_size)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_size)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@377@01))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@375@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))))))))))
  $Snap.unit))
; [eval] diz.field_Program_maxvalue == old(diz.field_Program_maxvalue)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_maxvalue)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@375@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))))))))))))
  $Snap.unit))
; [eval] diz.field_Program_f == old(diz.field_Program_f)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_f)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@375@01))))))))))))))
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v, sys__result, diz.field_Program_maxvalue, n)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; assert acc(hist_idle(diz.field_Program_f, q2, p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v__19, w__22, diz.field_Program_maxvalue, n__20)), write)
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v__19, w__22, diz.field_Program_maxvalue, n__20)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [exec]
; assert acc(hist_idle(diz.field_Program_f, q2, p_method_Future_Elect__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, (v__19 <= w__22 ? w__22 : v__19), diz.field_Program_maxvalue, n__20 + 1)), write)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] p_method_Future_Elect__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, (v__19 <= w__22 ? w__22 : v__19), diz.field_Program_maxvalue, n__20 + 1)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] (v__19 <= w__22 ? w__22 : v__19)
; [eval] v__19 <= w__22
(push) ; 6
(push) ; 7
(assert (not (not (<= v__19@369@01 sys__result@376@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<= v__19@369@01 sys__result@376@01)))
(check-sat)
; unknown
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [then-branch: 113 | v__19@369@01 <= sys__result@376@01 | live]
; [else-branch: 113 | !(v__19@369@01 <= sys__result@376@01) | live]
(push) ; 7
; [then-branch: 113 | v__19@369@01 <= sys__result@376@01]
(assert (<= v__19@369@01 sys__result@376@01))
(pop) ; 7
(push) ; 7
; [else-branch: 113 | !(v__19@369@01 <= sys__result@376@01)]
(assert (not (<= v__19@369@01 sys__result@376@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] n__20 + 1
(push) ; 6
(assert (not (=
  (p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer<Process> rank@354@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) v__19@369@01 sys__result@376@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) n__20@371@01)
  (p_method_Future_Elect__Integer__Integer__Integer__Integer__Integer<Process> rank@354@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) (ite
    (<= v__19@369@01 sys__result@376@01)
    sys__result@376@01
    v__19@369@01) ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) (+
    n__20@371@01
    1)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] v__19 <= w__22
(push) ; 6
(assert (not (not (<= v__19@369@01 sys__result@376@01))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(push) ; 6
(assert (not (<= v__19@369@01 sys__result@376@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; [then-branch: 114 | v__19@369@01 <= sys__result@376@01 | live]
; [else-branch: 114 | !(v__19@369@01 <= sys__result@376@01) | live]
(push) ; 6
; [then-branch: 114 | v__19@369@01 <= sys__result@376@01]
(assert (<= v__19@369@01 sys__result@376@01))
; [exec]
; v__19 := w__22
; [exec]
; R__23 := p_method_Future_Elect__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v__19, diz.field_Program_maxvalue, n__20 + 1)
; [eval] p_method_Future_Elect__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v__19, diz.field_Program_maxvalue, n__20 + 1)
(push) ; 7
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] n__20 + 1
(declare-const R__23@378@01 Process)
(assert (=
  R__23@378@01
  (p_method_Future_Elect__Integer__Integer__Integer__Integer__Integer<Process> rank@354@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) sys__result@376@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) (+
    n__20@371@01
    1))))
; [exec]
; assert acc(hist_idle(diz.field_Program_f, q2, R__23), write)
(push) ; 7
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (=
  (p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer<Process> rank@354@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) v__19@369@01 sys__result@376@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) n__20@371@01)
  R__23@378@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [exec]
; n__20 := n__20 + 1
; [eval] n__20 + 1
(declare-const n__20@379@01 Int)
(assert (= n__20@379@01 (+ n__20@371@01 1)))
; [exec]
; assert acc(hist_idle(diz.field_Program_f, q2, R__23), write)
(push) ; 7
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (=
  (p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer<Process> rank@354@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) v__19@369@01 sys__result@376@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) n__20@371@01)
  R__23@378@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Loop head block: Re-establish invariant
; [eval] frac_val(q1) != none
; [eval] frac_val(q1)
; [eval] frac_val(q2) != none
; [eval] frac_val(q2)
; [eval] frac_val(q1)
(set-option :timeout 0)
(push) ; 7
(assert (not (or
  (= (frac_val<Perm> q1@356@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> q1@356@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= rank
; [eval] rank < diz.field_Program_size
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] frac_val(q1)
(set-option :timeout 0)
(push) ; 7
(assert (not (or
  (= (frac_val<Perm> q1@356@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> q1@356@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] frac_val(q1)
(set-option :timeout 0)
(push) ; 7
(assert (not (or
  (= (frac_val<Perm> q1@356@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> q1@356@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= vArg
; [eval] vArg < diz.field_Program_maxvalue
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  vArg@355@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<
  vArg@355@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))))
; [eval] diz.field_Program_size == old(diz.field_Program_size)
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_size)
(push) ; 7
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@377@01))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@359@01))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@377@01))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@359@01)))))))
; [eval] diz.field_Program_maxvalue == old(diz.field_Program_maxvalue)
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_maxvalue)
(push) ; 7
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01))))))))))))
; [eval] frac_val(q1)
(push) ; 7
(assert (not (or
  (= (frac_val<Perm> q1@356@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> q1@356@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_f != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_f == old(diz.field_Program_f)
(push) ; 7
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_f)
(push) ; 7
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01)))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01))))))))))))))))
; [eval] 0 <= n__20
(push) ; 7
(assert (not (<= 0 n__20@379@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 n__20@379@01))
; [eval] n__20 <= diz.field_Program_size
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (<=
  n__20@379@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@377@01)))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<=
  n__20@379@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@377@01))))))
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] p_method_Future_Elect__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v__19, diz.field_Program_maxvalue, n__20)
(push) ; 7
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (=
  (p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer<Process> rank@354@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) v__19@369@01 sys__result@376@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) n__20@371@01)
  (p_method_Future_Elect__Integer__Integer__Integer__Integer__Integer<Process> rank@354@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) sys__result@376@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) n__20@379@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= v__19
; [eval] v__19 < diz.field_Program_maxvalue
(push) ; 7
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 114 | !(v__19@369@01 <= sys__result@376@01)]
(assert (not (<= v__19@369@01 sys__result@376@01)))
(pop) ; 6
; [eval] !(v__19 <= w__22)
; [eval] v__19 <= w__22
(push) ; 6
(assert (not (<= v__19@369@01 sys__result@376@01)))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(push) ; 6
(assert (not (not (<= v__19@369@01 sys__result@376@01))))
(check-sat)
; unknown
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; [then-branch: 115 | !(v__19@369@01 <= sys__result@376@01) | live]
; [else-branch: 115 | v__19@369@01 <= sys__result@376@01 | live]
(push) ; 6
; [then-branch: 115 | !(v__19@369@01 <= sys__result@376@01)]
(assert (not (<= v__19@369@01 sys__result@376@01)))
; [exec]
; R__23 := p_method_Future_Elect__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v__19, diz.field_Program_maxvalue, n__20 + 1)
; [eval] p_method_Future_Elect__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v__19, diz.field_Program_maxvalue, n__20 + 1)
(push) ; 7
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] n__20 + 1
(declare-const R__23@380@01 Process)
(assert (=
  R__23@380@01
  (p_method_Future_Elect__Integer__Integer__Integer__Integer__Integer<Process> rank@354@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) v__19@369@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) (+
    n__20@371@01
    1))))
; [exec]
; assert acc(hist_idle(diz.field_Program_f, q2, R__23), write)
(push) ; 7
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (=
  (p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer<Process> rank@354@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) v__19@369@01 sys__result@376@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) n__20@371@01)
  R__23@380@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [exec]
; n__20 := n__20 + 1
; [eval] n__20 + 1
(declare-const n__20@381@01 Int)
(assert (= n__20@381@01 (+ n__20@371@01 1)))
; [exec]
; assert acc(hist_idle(diz.field_Program_f, q2, R__23), write)
(push) ; 7
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (=
  (p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer<Process> rank@354@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) v__19@369@01 sys__result@376@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) n__20@371@01)
  R__23@380@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Loop head block: Re-establish invariant
; [eval] frac_val(q1) != none
; [eval] frac_val(q1)
; [eval] frac_val(q2) != none
; [eval] frac_val(q2)
; [eval] frac_val(q1)
(set-option :timeout 0)
(push) ; 7
(assert (not (or
  (= (frac_val<Perm> q1@356@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> q1@356@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= rank
; [eval] rank < diz.field_Program_size
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] frac_val(q1)
(set-option :timeout 0)
(push) ; 7
(assert (not (or
  (= (frac_val<Perm> q1@356@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> q1@356@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] frac_val(q1)
(set-option :timeout 0)
(push) ; 7
(assert (not (or
  (= (frac_val<Perm> q1@356@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> q1@356@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= vArg
; [eval] vArg < diz.field_Program_maxvalue
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  vArg@355@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<
  vArg@355@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))))
; [eval] diz.field_Program_size == old(diz.field_Program_size)
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_size)
(push) ; 7
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@377@01))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@359@01))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@377@01))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@359@01)))))))
; [eval] diz.field_Program_maxvalue == old(diz.field_Program_maxvalue)
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_maxvalue)
(push) ; 7
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01))))))))))))
; [eval] frac_val(q1)
(push) ; 7
(assert (not (or
  (= (frac_val<Perm> q1@356@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> q1@356@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_f != null
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_f == old(diz.field_Program_f)
(push) ; 7
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_f)
(push) ; 7
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01)))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@359@01))))))))))))))))
; [eval] 0 <= n__20
(push) ; 7
(assert (not (<= 0 n__20@381@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 n__20@381@01))
; [eval] n__20 <= diz.field_Program_size
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (<=
  n__20@381@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@377@01)))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<=
  n__20@381@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@377@01))))))
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] p_method_Future_Elect__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, v__19, diz.field_Program_maxvalue, n__20)
(push) ; 7
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (=
  (p_method_Future_Check__Integer__Integer__Integer__Integer__Integer__Integer<Process> rank@354@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) v__19@369@01 sys__result@376@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) n__20@371@01)
  (p_method_Future_Elect__Integer__Integer__Integer__Integer__Integer<Process> rank@354@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@377@01)))) v__19@369@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))) n__20@381@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= v__19
; [eval] v__19 < diz.field_Program_maxvalue
(push) ; 7
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  v__19@369@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<
  v__19@369@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@377@01)))))))
(pop) ; 6
(push) ; 6
; [else-branch: 115 | v__19@369@01 <= sys__result@376@01]
(assert (<= v__19@369@01 sys__result@376@01))
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 112 | !(n__20@371@01 < First:(Second:(Second:($t@372@01))))]
(assert (not
  (<
    n__20@371@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@372@01)))))))
(pop) ; 5
; [eval] !(n__20 < diz.field_Program_size)
; [eval] n__20 < diz.field_Program_size
(set-option :timeout 10)
(push) ; 5
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<
  n__20@371@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@372@01)))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (not
  (<
    n__20@371@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@372@01))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 116 | !(n__20@371@01 < First:(Second:(Second:($t@372@01)))) | live]
; [else-branch: 116 | n__20@371@01 < First:(Second:(Second:($t@372@01))) | live]
(push) ; 5
; [then-branch: 116 | !(n__20@371@01 < First:(Second:(Second:($t@372@01))))]
(assert (not
  (<
    n__20@371@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@372@01)))))))
; [exec]
; sys__local__result__18 := v__19
; [exec]
; assert acc(diz.field_Program_f, frac_val(q1)) && (diz.field_Program_f != null && (acc(hist_idle(diz.field_Program_f, q2, p_method_Future_Done__Integer__Integer(rank, sys__local__result__18)), write) && (0 <= sys__local__result__18 && sys__local__result__18 < diz.field_Program_maxvalue && (diz.field_Program_size == old(diz.field_Program_size) && (diz.field_Program_maxvalue == old(diz.field_Program_maxvalue) && diz.field_Program_f == old(diz.field_Program_f))))))
; [eval] frac_val(q1)
(set-option :timeout 0)
(push) ; 6
(assert (not (or
  (= (frac_val<Perm> q1@356@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> q1@356@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_f != null
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] p_method_Future_Done__Integer__Integer(rank, sys__local__result__18)
(push) ; 6
(assert (not (=
  (p_method_Future_Elect__Integer__Integer__Integer__Integer__Integer<Process> rank@354@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@372@01)))) v__19@369@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))) n__20@371@01)
  (p_method_Future_Done__Integer__Integer<Process> rank@354@01 v__19@369@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= sys__local__result__18
; [eval] sys__local__result__18 < diz.field_Program_maxvalue
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_size == old(diz.field_Program_size)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_size)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_maxvalue == old(diz.field_Program_maxvalue)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_maxvalue)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_f == old(diz.field_Program_f)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_f)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [exec]
; label __return_elect
; [exec]
; sys__result := sys__local__result__18
; [exec]
; assert frac_val(q1) != none && (frac_val(q2) != none && (acc(diz.field_Program_size, frac_val(q1)) && (0 <= rank && rank < diz.field_Program_size && (acc(diz.field_Program_initialised, frac_val(q1)) && (diz.field_Program_initialised && (acc(diz.field_Program_maxvalue, frac_val(q1)) && (0 <= vArg && vArg < diz.field_Program_maxvalue && (acc(diz.field_Program_f, frac_val(q1)) && (diz.field_Program_f != null && (acc(hist_idle(diz.field_Program_f, q2, p_method_Future_Done__Integer__Integer(rank, sys__result)), write) && (0 <= sys__result && sys__result < diz.field_Program_maxvalue && (diz.field_Program_size == old(diz.field_Program_size) && (diz.field_Program_maxvalue == old(diz.field_Program_maxvalue) && diz.field_Program_f == old(diz.field_Program_f))))))))))))))
; [eval] frac_val(q1) != none
; [eval] frac_val(q1)
; [eval] frac_val(q2) != none
; [eval] frac_val(q2)
; [eval] frac_val(q1)
(set-option :timeout 0)
(push) ; 6
(assert (not (or
  (= (frac_val<Perm> q1@356@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> q1@356@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= rank
; [eval] rank < diz.field_Program_size
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] frac_val(q1)
(set-option :timeout 0)
(push) ; 6
(assert (not (or
  (= (frac_val<Perm> q1@356@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> q1@356@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] frac_val(q1)
(set-option :timeout 0)
(push) ; 6
(assert (not (or
  (= (frac_val<Perm> q1@356@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> q1@356@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= vArg
; [eval] vArg < diz.field_Program_maxvalue
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] frac_val(q1)
(set-option :timeout 0)
(push) ; 6
(assert (not (or
  (= (frac_val<Perm> q1@356@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> q1@356@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_f != null
(set-option :timeout 10)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] p_method_Future_Done__Integer__Integer(rank, sys__result)
(push) ; 6
(assert (not (=
  (p_method_Future_Elect__Integer__Integer__Integer__Integer__Integer<Process> rank@354@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@372@01)))) v__19@369@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@372@01))))))))) n__20@371@01)
  (p_method_Future_Done__Integer__Integer<Process> rank@354@01 v__19@369@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= sys__result
; [eval] sys__result < diz.field_Program_maxvalue
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_size == old(diz.field_Program_size)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_size)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_maxvalue == old(diz.field_Program_maxvalue)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_maxvalue)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_f == old(diz.field_Program_f)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_f)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> q1@356@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [exec]
; inhale false
(pop) ; 5
(push) ; 5
; [else-branch: 116 | n__20@371@01 < First:(Second:(Second:($t@372@01)))]
(assert (<
  n__20@371@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@372@01))))))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- method_Main_main__Integer__Integer__Sequence$Integer$ ----------
(declare-const current_thread_id@382@01 Int)
(declare-const globals@383@01 $Ref)
(declare-const size@384@01 Int)
(declare-const max@385@01 Int)
(declare-const xs@386@01 Seq<Int>)
(declare-const current_thread_id@387@01 Int)
(declare-const globals@388@01 $Ref)
(declare-const size@389@01 Int)
(declare-const max@390@01 Int)
(declare-const xs@391@01 Seq<Int>)
(push) ; 1
(declare-const $t@392@01 $Snap)
(assert (= $t@392@01 ($Snap.combine ($Snap.first $t@392@01) ($Snap.second $t@392@01))))
(assert (= ($Snap.first $t@392@01) $Snap.unit))
; [eval] 0 < size
(assert (< 0 size@389@01))
(assert (=
  ($Snap.second $t@392@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@392@01))
    ($Snap.second ($Snap.second $t@392@01)))))
(assert (= ($Snap.first ($Snap.second $t@392@01)) $Snap.unit))
; [eval] 0 < max
(assert (< 0 max@390@01))
(assert (=
  ($Snap.second ($Snap.second $t@392@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@392@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@392@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@392@01))) $Snap.unit))
; [eval] |xs| == size
; [eval] |xs|
(assert (= (Seq_length xs@391@01) size@389@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@392@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@392@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@392@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@392@01))))
  $Snap.unit))
; [eval] (forall j: Int, k: Int :: { xs[k],xs[j] } 0 <= j && (j < |xs| && (0 <= k && (k < |xs| && j != k))) ==> xs[j] != xs[k])
(declare-const j@393@01 Int)
(declare-const k@394@01 Int)
(push) ; 2
; [eval] 0 <= j && (j < |xs| && (0 <= k && (k < |xs| && j != k))) ==> xs[j] != xs[k]
; [eval] 0 <= j && (j < |xs| && (0 <= k && (k < |xs| && j != k)))
; [eval] 0 <= j
(push) ; 3
; [then-branch: 117 | 0 <= j@393@01 | live]
; [else-branch: 117 | !(0 <= j@393@01) | live]
(push) ; 4
; [then-branch: 117 | 0 <= j@393@01]
(assert (<= 0 j@393@01))
; [eval] j < |xs|
; [eval] |xs|
(push) ; 5
; [then-branch: 118 | j@393@01 < |xs@391@01| | live]
; [else-branch: 118 | !(j@393@01 < |xs@391@01|) | live]
(push) ; 6
; [then-branch: 118 | j@393@01 < |xs@391@01|]
(assert (< j@393@01 (Seq_length xs@391@01)))
; [eval] 0 <= k
(push) ; 7
; [then-branch: 119 | 0 <= k@394@01 | live]
; [else-branch: 119 | !(0 <= k@394@01) | live]
(push) ; 8
; [then-branch: 119 | 0 <= k@394@01]
(assert (<= 0 k@394@01))
; [eval] k < |xs|
; [eval] |xs|
(push) ; 9
; [then-branch: 120 | k@394@01 < |xs@391@01| | live]
; [else-branch: 120 | !(k@394@01 < |xs@391@01|) | live]
(push) ; 10
; [then-branch: 120 | k@394@01 < |xs@391@01|]
(assert (< k@394@01 (Seq_length xs@391@01)))
; [eval] j != k
(pop) ; 10
(push) ; 10
; [else-branch: 120 | !(k@394@01 < |xs@391@01|)]
(assert (not (< k@394@01 (Seq_length xs@391@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 119 | !(0 <= k@394@01)]
(assert (not (<= 0 k@394@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 118 | !(j@393@01 < |xs@391@01|)]
(assert (not (< j@393@01 (Seq_length xs@391@01))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 117 | !(0 <= j@393@01)]
(assert (not (<= 0 j@393@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
; [then-branch: 121 | j@393@01 != k@394@01 && k@394@01 < |xs@391@01| && 0 <= k@394@01 && j@393@01 < |xs@391@01| && 0 <= j@393@01 | live]
; [else-branch: 121 | !(j@393@01 != k@394@01 && k@394@01 < |xs@391@01| && 0 <= k@394@01 && j@393@01 < |xs@391@01| && 0 <= j@393@01) | live]
(push) ; 4
; [then-branch: 121 | j@393@01 != k@394@01 && k@394@01 < |xs@391@01| && 0 <= k@394@01 && j@393@01 < |xs@391@01| && 0 <= j@393@01]
(assert (and
  (and
    (and
      (and (not (= j@393@01 k@394@01)) (< k@394@01 (Seq_length xs@391@01)))
      (<= 0 k@394@01))
    (< j@393@01 (Seq_length xs@391@01)))
  (<= 0 j@393@01)))
; [eval] xs[j] != xs[k]
; [eval] xs[j]
(set-option :timeout 0)
(push) ; 5
(assert (not (>= j@393@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] xs[k]
(push) ; 5
(assert (not (>= k@394@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 121 | !(j@393@01 != k@394@01 && k@394@01 < |xs@391@01| && 0 <= k@394@01 && j@393@01 < |xs@391@01| && 0 <= j@393@01)]
(assert (not
  (and
    (and
      (and
        (and (not (= j@393@01 k@394@01)) (< k@394@01 (Seq_length xs@391@01)))
        (<= 0 k@394@01))
      (< j@393@01 (Seq_length xs@391@01)))
    (<= 0 j@393@01))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (implies
  (and
    (and
      (and
        (and (not (= j@393@01 k@394@01)) (< k@394@01 (Seq_length xs@391@01)))
        (<= 0 k@394@01))
      (< j@393@01 (Seq_length xs@391@01)))
    (<= 0 j@393@01))
  (and
    (not (= j@393@01 k@394@01))
    (< k@394@01 (Seq_length xs@391@01))
    (<= 0 k@394@01)
    (< j@393@01 (Seq_length xs@391@01))
    (<= 0 j@393@01))))
; Joined path conditions
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j@393@01 Int) (k@394@01 Int)) (!
  (implies
    (and
      (and
        (and
          (and (not (= j@393@01 k@394@01)) (< k@394@01 (Seq_length xs@391@01)))
          (<= 0 k@394@01))
        (< j@393@01 (Seq_length xs@391@01)))
      (<= 0 j@393@01))
    (and
      (not (= j@393@01 k@394@01))
      (< k@394@01 (Seq_length xs@391@01))
      (<= 0 k@394@01)
      (< j@393@01 (Seq_length xs@391@01))
      (<= 0 j@393@01)))
  :pattern ((Seq_index xs@391@01 k@394@01) (Seq_index xs@391@01 j@393@01))
  :qid |prog.l853-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((j@393@01 Int) (k@394@01 Int)) (!
  (implies
    (and
      (and
        (and
          (and (not (= j@393@01 k@394@01)) (< k@394@01 (Seq_length xs@391@01)))
          (<= 0 k@394@01))
        (< j@393@01 (Seq_length xs@391@01)))
      (<= 0 j@393@01))
    (not (= (Seq_index xs@391@01 j@393@01) (Seq_index xs@391@01 k@394@01))))
  :pattern ((Seq_index xs@391@01 k@394@01) (Seq_index xs@391@01 j@393@01))
  :qid |prog.l853|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@392@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@392@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@392@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@392@01)))))
  $Snap.unit))
; [eval] (forall j: Int :: { xs[j] } 0 <= j && j < |xs| ==> 0 <= xs[j] && xs[j] < max)
(declare-const j@395@01 Int)
(push) ; 2
; [eval] 0 <= j && j < |xs| ==> 0 <= xs[j] && xs[j] < max
; [eval] 0 <= j && j < |xs|
; [eval] 0 <= j
(push) ; 3
; [then-branch: 122 | 0 <= j@395@01 | live]
; [else-branch: 122 | !(0 <= j@395@01) | live]
(push) ; 4
; [then-branch: 122 | 0 <= j@395@01]
(assert (<= 0 j@395@01))
; [eval] j < |xs|
; [eval] |xs|
(pop) ; 4
(push) ; 4
; [else-branch: 122 | !(0 <= j@395@01)]
(assert (not (<= 0 j@395@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
; [then-branch: 123 | j@395@01 < |xs@391@01| && 0 <= j@395@01 | live]
; [else-branch: 123 | !(j@395@01 < |xs@391@01| && 0 <= j@395@01) | live]
(push) ; 4
; [then-branch: 123 | j@395@01 < |xs@391@01| && 0 <= j@395@01]
(assert (and (< j@395@01 (Seq_length xs@391@01)) (<= 0 j@395@01)))
; [eval] 0 <= xs[j] && xs[j] < max
; [eval] 0 <= xs[j]
; [eval] xs[j]
(push) ; 5
(assert (not (>= j@395@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch: 124 | 0 <= xs@391@01[j@395@01] | live]
; [else-branch: 124 | !(0 <= xs@391@01[j@395@01]) | live]
(push) ; 6
; [then-branch: 124 | 0 <= xs@391@01[j@395@01]]
(assert (<= 0 (Seq_index xs@391@01 j@395@01)))
; [eval] xs[j] < max
; [eval] xs[j]
(push) ; 7
(assert (not (>= j@395@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 124 | !(0 <= xs@391@01[j@395@01])]
(assert (not (<= 0 (Seq_index xs@391@01 j@395@01))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 123 | !(j@395@01 < |xs@391@01| && 0 <= j@395@01)]
(assert (not (and (< j@395@01 (Seq_length xs@391@01)) (<= 0 j@395@01))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((j@395@01 Int)) (!
  (implies
    (and (< j@395@01 (Seq_length xs@391@01)) (<= 0 j@395@01))
    (and
      (< (Seq_index xs@391@01 j@395@01) max@390@01)
      (<= 0 (Seq_index xs@391@01 j@395@01))))
  :pattern ((Seq_index xs@391@01 j@395@01))
  :qid |prog.l854|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@392@01)))))
  $Snap.unit))
; [eval] 0 <= current_thread_id
(assert (<= 0 current_thread_id@387@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@396@01 $Snap)
(assert (= $t@396@01 ($Snap.combine ($Snap.first $t@396@01) ($Snap.second $t@396@01))))
(assert (= ($Snap.first $t@396@01) $Snap.unit))
; [eval] 0 < size
(assert (=
  ($Snap.second $t@396@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@396@01))
    ($Snap.second ($Snap.second $t@396@01)))))
(assert (= ($Snap.first ($Snap.second $t@396@01)) $Snap.unit))
; [eval] 0 < max
(assert (=
  ($Snap.second ($Snap.second $t@396@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@396@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@396@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@396@01))) $Snap.unit))
; [eval] |xs| == size
; [eval] |xs|
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@396@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@396@01))))
  $Snap.unit))
; [eval] (forall j: Int, k: Int :: { xs[k],xs[j] } 0 <= j && (j < |xs| && (0 <= k && (k < |xs| && j != k))) ==> xs[j] != xs[k])
(declare-const j@397@01 Int)
(declare-const k@398@01 Int)
(push) ; 3
; [eval] 0 <= j && (j < |xs| && (0 <= k && (k < |xs| && j != k))) ==> xs[j] != xs[k]
; [eval] 0 <= j && (j < |xs| && (0 <= k && (k < |xs| && j != k)))
; [eval] 0 <= j
(push) ; 4
; [then-branch: 125 | 0 <= j@397@01 | live]
; [else-branch: 125 | !(0 <= j@397@01) | live]
(push) ; 5
; [then-branch: 125 | 0 <= j@397@01]
(assert (<= 0 j@397@01))
; [eval] j < |xs|
; [eval] |xs|
(push) ; 6
; [then-branch: 126 | j@397@01 < |xs@391@01| | live]
; [else-branch: 126 | !(j@397@01 < |xs@391@01|) | live]
(push) ; 7
; [then-branch: 126 | j@397@01 < |xs@391@01|]
(assert (< j@397@01 (Seq_length xs@391@01)))
; [eval] 0 <= k
(push) ; 8
; [then-branch: 127 | 0 <= k@398@01 | live]
; [else-branch: 127 | !(0 <= k@398@01) | live]
(push) ; 9
; [then-branch: 127 | 0 <= k@398@01]
(assert (<= 0 k@398@01))
; [eval] k < |xs|
; [eval] |xs|
(push) ; 10
; [then-branch: 128 | k@398@01 < |xs@391@01| | live]
; [else-branch: 128 | !(k@398@01 < |xs@391@01|) | live]
(push) ; 11
; [then-branch: 128 | k@398@01 < |xs@391@01|]
(assert (< k@398@01 (Seq_length xs@391@01)))
; [eval] j != k
(pop) ; 11
(push) ; 11
; [else-branch: 128 | !(k@398@01 < |xs@391@01|)]
(assert (not (< k@398@01 (Seq_length xs@391@01))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 127 | !(0 <= k@398@01)]
(assert (not (<= 0 k@398@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(pop) ; 7
(push) ; 7
; [else-branch: 126 | !(j@397@01 < |xs@391@01|)]
(assert (not (< j@397@01 (Seq_length xs@391@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 125 | !(0 <= j@397@01)]
(assert (not (<= 0 j@397@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 129 | j@397@01 != k@398@01 && k@398@01 < |xs@391@01| && 0 <= k@398@01 && j@397@01 < |xs@391@01| && 0 <= j@397@01 | live]
; [else-branch: 129 | !(j@397@01 != k@398@01 && k@398@01 < |xs@391@01| && 0 <= k@398@01 && j@397@01 < |xs@391@01| && 0 <= j@397@01) | live]
(push) ; 5
; [then-branch: 129 | j@397@01 != k@398@01 && k@398@01 < |xs@391@01| && 0 <= k@398@01 && j@397@01 < |xs@391@01| && 0 <= j@397@01]
(assert (and
  (and
    (and
      (and (not (= j@397@01 k@398@01)) (< k@398@01 (Seq_length xs@391@01)))
      (<= 0 k@398@01))
    (< j@397@01 (Seq_length xs@391@01)))
  (<= 0 j@397@01)))
; [eval] xs[j] != xs[k]
; [eval] xs[j]
(set-option :timeout 0)
(push) ; 6
(assert (not (>= j@397@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] xs[k]
(push) ; 6
(assert (not (>= k@398@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 129 | !(j@397@01 != k@398@01 && k@398@01 < |xs@391@01| && 0 <= k@398@01 && j@397@01 < |xs@391@01| && 0 <= j@397@01)]
(assert (not
  (and
    (and
      (and
        (and (not (= j@397@01 k@398@01)) (< k@398@01 (Seq_length xs@391@01)))
        (<= 0 k@398@01))
      (< j@397@01 (Seq_length xs@391@01)))
    (<= 0 j@397@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (implies
  (and
    (and
      (and
        (and (not (= j@397@01 k@398@01)) (< k@398@01 (Seq_length xs@391@01)))
        (<= 0 k@398@01))
      (< j@397@01 (Seq_length xs@391@01)))
    (<= 0 j@397@01))
  (and
    (not (= j@397@01 k@398@01))
    (< k@398@01 (Seq_length xs@391@01))
    (<= 0 k@398@01)
    (< j@397@01 (Seq_length xs@391@01))
    (<= 0 j@397@01))))
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j@397@01 Int) (k@398@01 Int)) (!
  (implies
    (and
      (and
        (and
          (and (not (= j@397@01 k@398@01)) (< k@398@01 (Seq_length xs@391@01)))
          (<= 0 k@398@01))
        (< j@397@01 (Seq_length xs@391@01)))
      (<= 0 j@397@01))
    (and
      (not (= j@397@01 k@398@01))
      (< k@398@01 (Seq_length xs@391@01))
      (<= 0 k@398@01)
      (< j@397@01 (Seq_length xs@391@01))
      (<= 0 j@397@01)))
  :pattern ((Seq_index xs@391@01 k@398@01) (Seq_index xs@391@01 j@397@01))
  :qid |prog.l859-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((j@397@01 Int) (k@398@01 Int)) (!
  (implies
    (and
      (and
        (and
          (and (not (= j@397@01 k@398@01)) (< k@398@01 (Seq_length xs@391@01)))
          (<= 0 k@398@01))
        (< j@397@01 (Seq_length xs@391@01)))
      (<= 0 j@397@01))
    (not (= (Seq_index xs@391@01 j@397@01) (Seq_index xs@391@01 k@398@01))))
  :pattern ((Seq_index xs@391@01 k@398@01) (Seq_index xs@391@01 j@397@01))
  :qid |prog.l859|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@396@01))))
  $Snap.unit))
; [eval] (forall j: Int :: { xs[j] } 0 <= j && j < |xs| ==> 0 <= xs[j] && xs[j] < max)
(declare-const j@399@01 Int)
(push) ; 3
; [eval] 0 <= j && j < |xs| ==> 0 <= xs[j] && xs[j] < max
; [eval] 0 <= j && j < |xs|
; [eval] 0 <= j
(push) ; 4
; [then-branch: 130 | 0 <= j@399@01 | live]
; [else-branch: 130 | !(0 <= j@399@01) | live]
(push) ; 5
; [then-branch: 130 | 0 <= j@399@01]
(assert (<= 0 j@399@01))
; [eval] j < |xs|
; [eval] |xs|
(pop) ; 5
(push) ; 5
; [else-branch: 130 | !(0 <= j@399@01)]
(assert (not (<= 0 j@399@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 131 | j@399@01 < |xs@391@01| && 0 <= j@399@01 | live]
; [else-branch: 131 | !(j@399@01 < |xs@391@01| && 0 <= j@399@01) | live]
(push) ; 5
; [then-branch: 131 | j@399@01 < |xs@391@01| && 0 <= j@399@01]
(assert (and (< j@399@01 (Seq_length xs@391@01)) (<= 0 j@399@01)))
; [eval] 0 <= xs[j] && xs[j] < max
; [eval] 0 <= xs[j]
; [eval] xs[j]
(push) ; 6
(assert (not (>= j@399@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 132 | 0 <= xs@391@01[j@399@01] | live]
; [else-branch: 132 | !(0 <= xs@391@01[j@399@01]) | live]
(push) ; 7
; [then-branch: 132 | 0 <= xs@391@01[j@399@01]]
(assert (<= 0 (Seq_index xs@391@01 j@399@01)))
; [eval] xs[j] < max
; [eval] xs[j]
(push) ; 8
(assert (not (>= j@399@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 132 | !(0 <= xs@391@01[j@399@01])]
(assert (not (<= 0 (Seq_index xs@391@01 j@399@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 131 | !(j@399@01 < |xs@391@01| && 0 <= j@399@01)]
(assert (not (and (< j@399@01 (Seq_length xs@391@01)) (<= 0 j@399@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((j@399@01 Int)) (!
  (implies
    (and (< j@399@01 (Seq_length xs@391@01)) (<= 0 j@399@01))
    (and
      (< (Seq_index xs@391@01 j@399@01) max@390@01)
      (<= 0 (Seq_index xs@391@01 j@399@01))))
  :pattern ((Seq_index xs@391@01 j@399@01))
  :qid |prog.l860|)))
(pop) ; 2
(push) ; 2
; [exec]
; var f__24: Ref
(declare-const f__24@400@01 $Ref)
; [exec]
; var __flatten_39__25: Seq[Seq[Int]]
(declare-const __flatten_39__25@401@01 Seq<Seq<Int>>)
; [exec]
; var __flatten_41__26: Seq[Int]
(declare-const __flatten_41__26@402@01 Seq<Int>)
; [exec]
; var i__27: Int
(declare-const i__27@403@01 Int)
; [exec]
; var __flatten_43__28: Seq[Seq[Int]]
(declare-const __flatten_43__28@404@01 Seq<Seq<Int>>)
; [exec]
; var __flatten_45__29: Seq[Int]
(declare-const __flatten_45__29@405@01 Seq<Int>)
; [exec]
; var pr__30: Ref
(declare-const pr__30@406@01 $Ref)
; [exec]
; var __flatten_83__31: Seq[Seq[Int]]
(declare-const __flatten_83__31@407@01 Seq<Seq<Int>>)
; [exec]
; var __flatten_85__32: Seq[Int]
(declare-const __flatten_85__32@408@01 Seq<Int>)
; [exec]
; var __flatten_87__33: Seq[Seq[Int]]
(declare-const __flatten_87__33@409@01 Seq<Seq<Int>>)
; [exec]
; var __flatten_89__34: Seq[Int]
(declare-const __flatten_89__34@410@01 Seq<Int>)
; [exec]
; var __flatten_93__35: frac
(declare-const __flatten_93__35@411@01 frac)
; [exec]
; var __flatten_94__36: frac
(declare-const __flatten_94__36@412@01 frac)
; [exec]
; f__24 := constructor_Future_Future(current_thread_id)
; [eval] 0 <= current_thread_id
(declare-const sys__result@413@01 $Ref)
(declare-const $t@414@01 $Snap)
(assert (= $t@414@01 ($Snap.combine ($Snap.first $t@414@01) ($Snap.second $t@414@01))))
(assert (= ($Snap.first $t@414@01) $Snap.unit))
; [eval] sys__result != null
(assert (not (= sys__result@413@01 $Ref.null)))
(assert (=
  ($Snap.second $t@414@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@414@01))
    ($Snap.second ($Snap.second $t@414@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@414@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@414@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@414@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@414@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@414@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@414@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@414@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@414@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@414@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@414@01)))))
  $Snap.unit))
; [eval] sys__result.channel_hist_value == Seq[Seq[Int]]()
; [eval] Seq[Seq[Int]]()
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second $t@414@01)))
  (as Seq_empty  Seq<Seq<Int>>)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@414@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@414@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@414@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@414@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@414@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@414@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@414@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@414@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@414@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@414@01))))))))
  $Snap.unit))
; [eval] sys__result.results_hist_value == Seq[Int]()
; [eval] Seq[Int]()
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@414@01)))))))
  (as Seq_empty  Seq<Int>)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; __flatten_83__31 := Seq[Seq[Int]]()
; [eval] Seq[Seq[Int]]()
; [exec]
; __flatten_39__25 := __flatten_83__31
; [exec]
; hist_set_channel(f__24, current_thread_id, __flatten_39__25)
; [eval] diz != null
; [eval] 0 <= current_thread_id
(declare-const $t@415@01 $Snap)
(assert (= $t@415@01 ($Snap.combine ($Snap.first $t@415@01) ($Snap.second $t@415@01))))
(assert (=
  ($Snap.second $t@415@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@415@01))
    ($Snap.second ($Snap.second $t@415@01)))))
(assert (= ($Snap.first ($Snap.second $t@415@01)) $Snap.unit))
; [eval] diz.channel_hist_value == value
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@415@01))
  (as Seq_empty  Seq<Seq<Int>>)))
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; __flatten_85__32 := Seq[Int]()
; [eval] Seq[Int]()
; [exec]
; __flatten_41__26 := __flatten_85__32
; [exec]
; hist_set_results(f__24, current_thread_id, __flatten_41__26)
; [eval] diz != null
; [eval] 0 <= current_thread_id
(declare-const $t@416@01 $Snap)
(assert (= $t@416@01 ($Snap.combine ($Snap.first $t@416@01) ($Snap.second $t@416@01))))
(assert (=
  ($Snap.second $t@416@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@416@01))
    ($Snap.second ($Snap.second $t@416@01)))))
(assert (= ($Snap.first ($Snap.second $t@416@01)) $Snap.unit))
; [eval] diz.results_hist_value == value
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first $t@416@01))
  (as Seq_empty  Seq<Int>)))
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; i__27 := 0
(declare-const __flatten_87__33@417@01 Seq<Seq<Int>>)
(declare-const __flatten_43__28@418@01 Seq<Seq<Int>>)
(declare-const __flatten_89__34@419@01 Seq<Int>)
(declare-const __flatten_45__29@420@01 Seq<Int>)
(declare-const i__27@421@01 Int)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@422@01 $Snap)
(assert (= $t@422@01 ($Snap.combine ($Snap.first $t@422@01) ($Snap.second $t@422@01))))
(assert (= ($Snap.first $t@422@01) $Snap.unit))
; [eval] 0 < size
(assert (=
  ($Snap.second $t@422@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@422@01))
    ($Snap.second ($Snap.second $t@422@01)))))
(assert (= ($Snap.first ($Snap.second $t@422@01)) $Snap.unit))
; [eval] 0 < max
(assert (=
  ($Snap.second ($Snap.second $t@422@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@422@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@422@01))) $Snap.unit))
; [eval] |xs| == size
; [eval] |xs|
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@422@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@422@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@422@01))))
  $Snap.unit))
; [eval] (forall j__37: Int, k__38: Int :: { xs[k__38],xs[j__37] } 0 <= j__37 && (j__37 < |xs| && (0 <= k__38 && (k__38 < |xs| && j__37 != k__38))) ==> xs[j__37] != xs[k__38])
(declare-const j__37@423@01 Int)
(declare-const k__38@424@01 Int)
(push) ; 4
; [eval] 0 <= j__37 && (j__37 < |xs| && (0 <= k__38 && (k__38 < |xs| && j__37 != k__38))) ==> xs[j__37] != xs[k__38]
; [eval] 0 <= j__37 && (j__37 < |xs| && (0 <= k__38 && (k__38 < |xs| && j__37 != k__38)))
; [eval] 0 <= j__37
(push) ; 5
; [then-branch: 133 | 0 <= j__37@423@01 | live]
; [else-branch: 133 | !(0 <= j__37@423@01) | live]
(push) ; 6
; [then-branch: 133 | 0 <= j__37@423@01]
(assert (<= 0 j__37@423@01))
; [eval] j__37 < |xs|
; [eval] |xs|
(push) ; 7
; [then-branch: 134 | j__37@423@01 < |xs@391@01| | live]
; [else-branch: 134 | !(j__37@423@01 < |xs@391@01|) | live]
(push) ; 8
; [then-branch: 134 | j__37@423@01 < |xs@391@01|]
(assert (< j__37@423@01 (Seq_length xs@391@01)))
; [eval] 0 <= k__38
(push) ; 9
; [then-branch: 135 | 0 <= k__38@424@01 | live]
; [else-branch: 135 | !(0 <= k__38@424@01) | live]
(push) ; 10
; [then-branch: 135 | 0 <= k__38@424@01]
(assert (<= 0 k__38@424@01))
; [eval] k__38 < |xs|
; [eval] |xs|
(push) ; 11
; [then-branch: 136 | k__38@424@01 < |xs@391@01| | live]
; [else-branch: 136 | !(k__38@424@01 < |xs@391@01|) | live]
(push) ; 12
; [then-branch: 136 | k__38@424@01 < |xs@391@01|]
(assert (< k__38@424@01 (Seq_length xs@391@01)))
; [eval] j__37 != k__38
(pop) ; 12
(push) ; 12
; [else-branch: 136 | !(k__38@424@01 < |xs@391@01|)]
(assert (not (< k__38@424@01 (Seq_length xs@391@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 135 | !(0 <= k__38@424@01)]
(assert (not (<= 0 k__38@424@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 134 | !(j__37@423@01 < |xs@391@01|)]
(assert (not (< j__37@423@01 (Seq_length xs@391@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 133 | !(0 <= j__37@423@01)]
(assert (not (<= 0 j__37@423@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 137 | j__37@423@01 != k__38@424@01 && k__38@424@01 < |xs@391@01| && 0 <= k__38@424@01 && j__37@423@01 < |xs@391@01| && 0 <= j__37@423@01 | live]
; [else-branch: 137 | !(j__37@423@01 != k__38@424@01 && k__38@424@01 < |xs@391@01| && 0 <= k__38@424@01 && j__37@423@01 < |xs@391@01| && 0 <= j__37@423@01) | live]
(push) ; 6
; [then-branch: 137 | j__37@423@01 != k__38@424@01 && k__38@424@01 < |xs@391@01| && 0 <= k__38@424@01 && j__37@423@01 < |xs@391@01| && 0 <= j__37@423@01]
(assert (and
  (and
    (and
      (and
        (not (= j__37@423@01 k__38@424@01))
        (< k__38@424@01 (Seq_length xs@391@01)))
      (<= 0 k__38@424@01))
    (< j__37@423@01 (Seq_length xs@391@01)))
  (<= 0 j__37@423@01)))
; [eval] xs[j__37] != xs[k__38]
; [eval] xs[j__37]
(set-option :timeout 0)
(push) ; 7
(assert (not (>= j__37@423@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] xs[k__38]
(push) ; 7
(assert (not (>= k__38@424@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 137 | !(j__37@423@01 != k__38@424@01 && k__38@424@01 < |xs@391@01| && 0 <= k__38@424@01 && j__37@423@01 < |xs@391@01| && 0 <= j__37@423@01)]
(assert (not
  (and
    (and
      (and
        (and
          (not (= j__37@423@01 k__38@424@01))
          (< k__38@424@01 (Seq_length xs@391@01)))
        (<= 0 k__38@424@01))
      (< j__37@423@01 (Seq_length xs@391@01)))
    (<= 0 j__37@423@01))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (implies
  (and
    (and
      (and
        (and
          (not (= j__37@423@01 k__38@424@01))
          (< k__38@424@01 (Seq_length xs@391@01)))
        (<= 0 k__38@424@01))
      (< j__37@423@01 (Seq_length xs@391@01)))
    (<= 0 j__37@423@01))
  (and
    (not (= j__37@423@01 k__38@424@01))
    (< k__38@424@01 (Seq_length xs@391@01))
    (<= 0 k__38@424@01)
    (< j__37@423@01 (Seq_length xs@391@01))
    (<= 0 j__37@423@01))))
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j__37@423@01 Int) (k__38@424@01 Int)) (!
  (implies
    (and
      (and
        (and
          (and
            (not (= j__37@423@01 k__38@424@01))
            (< k__38@424@01 (Seq_length xs@391@01)))
          (<= 0 k__38@424@01))
        (< j__37@423@01 (Seq_length xs@391@01)))
      (<= 0 j__37@423@01))
    (and
      (not (= j__37@423@01 k__38@424@01))
      (< k__38@424@01 (Seq_length xs@391@01))
      (<= 0 k__38@424@01)
      (< j__37@423@01 (Seq_length xs@391@01))
      (<= 0 j__37@423@01)))
  :pattern ((Seq_index xs@391@01 k__38@424@01) (Seq_index xs@391@01 j__37@423@01))
  :qid |prog.l887-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((j__37@423@01 Int) (k__38@424@01 Int)) (!
  (implies
    (and
      (and
        (and
          (and
            (not (= j__37@423@01 k__38@424@01))
            (< k__38@424@01 (Seq_length xs@391@01)))
          (<= 0 k__38@424@01))
        (< j__37@423@01 (Seq_length xs@391@01)))
      (<= 0 j__37@423@01))
    (not
      (= (Seq_index xs@391@01 j__37@423@01) (Seq_index xs@391@01 k__38@424@01))))
  :pattern ((Seq_index xs@391@01 k__38@424@01) (Seq_index xs@391@01 j__37@423@01))
  :qid |prog.l887|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))
  $Snap.unit))
; [eval] (forall j__39: Int :: { xs[j__39] } 0 <= j__39 && j__39 < |xs| ==> 0 <= xs[j__39] && xs[j__39] < max)
(declare-const j__39@425@01 Int)
(push) ; 4
; [eval] 0 <= j__39 && j__39 < |xs| ==> 0 <= xs[j__39] && xs[j__39] < max
; [eval] 0 <= j__39 && j__39 < |xs|
; [eval] 0 <= j__39
(push) ; 5
; [then-branch: 138 | 0 <= j__39@425@01 | live]
; [else-branch: 138 | !(0 <= j__39@425@01) | live]
(push) ; 6
; [then-branch: 138 | 0 <= j__39@425@01]
(assert (<= 0 j__39@425@01))
; [eval] j__39 < |xs|
; [eval] |xs|
(pop) ; 6
(push) ; 6
; [else-branch: 138 | !(0 <= j__39@425@01)]
(assert (not (<= 0 j__39@425@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 139 | j__39@425@01 < |xs@391@01| && 0 <= j__39@425@01 | live]
; [else-branch: 139 | !(j__39@425@01 < |xs@391@01| && 0 <= j__39@425@01) | live]
(push) ; 6
; [then-branch: 139 | j__39@425@01 < |xs@391@01| && 0 <= j__39@425@01]
(assert (and (< j__39@425@01 (Seq_length xs@391@01)) (<= 0 j__39@425@01)))
; [eval] 0 <= xs[j__39] && xs[j__39] < max
; [eval] 0 <= xs[j__39]
; [eval] xs[j__39]
(push) ; 7
(assert (not (>= j__39@425@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch: 140 | 0 <= xs@391@01[j__39@425@01] | live]
; [else-branch: 140 | !(0 <= xs@391@01[j__39@425@01]) | live]
(push) ; 8
; [then-branch: 140 | 0 <= xs@391@01[j__39@425@01]]
(assert (<= 0 (Seq_index xs@391@01 j__39@425@01)))
; [eval] xs[j__39] < max
; [eval] xs[j__39]
(push) ; 9
(assert (not (>= j__39@425@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 140 | !(0 <= xs@391@01[j__39@425@01])]
(assert (not (<= 0 (Seq_index xs@391@01 j__39@425@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 139 | !(j__39@425@01 < |xs@391@01| && 0 <= j__39@425@01)]
(assert (not (and (< j__39@425@01 (Seq_length xs@391@01)) (<= 0 j__39@425@01))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((j__39@425@01 Int)) (!
  (implies
    (and (< j__39@425@01 (Seq_length xs@391@01)) (<= 0 j__39@425@01))
    (and
      (< (Seq_index xs@391@01 j__39@425@01) max@390@01)
      (<= 0 (Seq_index xs@391@01 j__39@425@01))))
  :pattern ((Seq_index xs@391@01 j__39@425@01))
  :qid |prog.l888|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))
  $Snap.unit))
; [eval] 0 <= i__27
(assert (<= 0 i__27@421@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))
  $Snap.unit))
; [eval] i__27 <= size
(assert (<= i__27@421@01 size@389@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))))))))))
  $Snap.unit))
; [eval] |f__24.channel_hist_value| == i__27
; [eval] |f__24.channel_hist_value|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))))))
  i__27@421@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))))))))))
  $Snap.unit))
; [eval] (forall j__40: Int :: { f__24.channel_hist_value[j__40] } 0 <= j__40 && j__40 < i__27 ==> |f__24.channel_hist_value[j__40]| == 0)
(declare-const j__40@426@01 Int)
(push) ; 4
; [eval] 0 <= j__40 && j__40 < i__27 ==> |f__24.channel_hist_value[j__40]| == 0
; [eval] 0 <= j__40 && j__40 < i__27
; [eval] 0 <= j__40
(push) ; 5
; [then-branch: 141 | 0 <= j__40@426@01 | live]
; [else-branch: 141 | !(0 <= j__40@426@01) | live]
(push) ; 6
; [then-branch: 141 | 0 <= j__40@426@01]
(assert (<= 0 j__40@426@01))
; [eval] j__40 < i__27
(pop) ; 6
(push) ; 6
; [else-branch: 141 | !(0 <= j__40@426@01)]
(assert (not (<= 0 j__40@426@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 142 | j__40@426@01 < i__27@421@01 && 0 <= j__40@426@01 | live]
; [else-branch: 142 | !(j__40@426@01 < i__27@421@01 && 0 <= j__40@426@01) | live]
(push) ; 6
; [then-branch: 142 | j__40@426@01 < i__27@421@01 && 0 <= j__40@426@01]
(assert (and (< j__40@426@01 i__27@421@01) (<= 0 j__40@426@01)))
; [eval] |f__24.channel_hist_value[j__40]| == 0
; [eval] |f__24.channel_hist_value[j__40]|
; [eval] f__24.channel_hist_value[j__40]
(push) ; 7
(assert (not (>= j__40@426@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  j__40@426@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 142 | !(j__40@426@01 < i__27@421@01 && 0 <= j__40@426@01)]
(assert (not (and (< j__40@426@01 i__27@421@01) (<= 0 j__40@426@01))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((j__40@426@01 Int)) (!
  (implies
    (and (< j__40@426@01 i__27@421@01) (<= 0 j__40@426@01))
    (=
      (Seq_length
        (Seq_index
          ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))))
          j__40@426@01))
      0))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))))
    j__40@426@01))
  :qid |prog.l897|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))))))))))))
  $Snap.unit))
; [eval] |f__24.results_hist_value| == i__27
; [eval] |f__24.results_hist_value|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))))))))
  i__27@421@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))))))))))))
  $Snap.unit))
; [eval] (forall j__41: Int :: { f__24.results_hist_value[j__41] } 0 <= j__41 && j__41 < i__27 ==> f__24.results_hist_value[j__41] == 0)
(declare-const j__41@427@01 Int)
(push) ; 4
; [eval] 0 <= j__41 && j__41 < i__27 ==> f__24.results_hist_value[j__41] == 0
; [eval] 0 <= j__41 && j__41 < i__27
; [eval] 0 <= j__41
(push) ; 5
; [then-branch: 143 | 0 <= j__41@427@01 | live]
; [else-branch: 143 | !(0 <= j__41@427@01) | live]
(push) ; 6
; [then-branch: 143 | 0 <= j__41@427@01]
(assert (<= 0 j__41@427@01))
; [eval] j__41 < i__27
(pop) ; 6
(push) ; 6
; [else-branch: 143 | !(0 <= j__41@427@01)]
(assert (not (<= 0 j__41@427@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 144 | j__41@427@01 < i__27@421@01 && 0 <= j__41@427@01 | live]
; [else-branch: 144 | !(j__41@427@01 < i__27@421@01 && 0 <= j__41@427@01) | live]
(push) ; 6
; [then-branch: 144 | j__41@427@01 < i__27@421@01 && 0 <= j__41@427@01]
(assert (and (< j__41@427@01 i__27@421@01) (<= 0 j__41@427@01)))
; [eval] f__24.results_hist_value[j__41] == 0
; [eval] f__24.results_hist_value[j__41]
(push) ; 7
(assert (not (>= j__41@427@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  j__41@427@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 144 | !(j__41@427@01 < i__27@421@01 && 0 <= j__41@427@01)]
(assert (not (and (< j__41@427@01 i__27@421@01) (<= 0 j__41@427@01))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((j__41@427@01 Int)) (!
  (implies
    (and (< j__41@427@01 i__27@421@01) (<= 0 j__41@427@01))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))))))))
        j__41@427@01)
      0))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))))))))
    j__41@427@01))
  :qid |prog.l899|)))
; Loop head block: Check well-definedness of edge conditions
(push) ; 4
; [eval] i__27 < size
(pop) ; 4
(push) ; 4
; [eval] !(i__27 < size)
; [eval] i__27 < size
(pop) ; 4
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; [eval] 0 < size
; [eval] 0 < max
; [eval] |xs| == size
; [eval] |xs|
; [eval] (forall j__37: Int, k__38: Int :: { xs[k__38],xs[j__37] } 0 <= j__37 && (j__37 < |xs| && (0 <= k__38 && (k__38 < |xs| && j__37 != k__38))) ==> xs[j__37] != xs[k__38])
(declare-const j__37@428@01 Int)
(declare-const k__38@429@01 Int)
(push) ; 4
; [eval] 0 <= j__37 && (j__37 < |xs| && (0 <= k__38 && (k__38 < |xs| && j__37 != k__38))) ==> xs[j__37] != xs[k__38]
; [eval] 0 <= j__37 && (j__37 < |xs| && (0 <= k__38 && (k__38 < |xs| && j__37 != k__38)))
; [eval] 0 <= j__37
(push) ; 5
; [then-branch: 145 | 0 <= j__37@428@01 | live]
; [else-branch: 145 | !(0 <= j__37@428@01) | live]
(push) ; 6
; [then-branch: 145 | 0 <= j__37@428@01]
(assert (<= 0 j__37@428@01))
; [eval] j__37 < |xs|
; [eval] |xs|
(push) ; 7
; [then-branch: 146 | j__37@428@01 < |xs@391@01| | live]
; [else-branch: 146 | !(j__37@428@01 < |xs@391@01|) | live]
(push) ; 8
; [then-branch: 146 | j__37@428@01 < |xs@391@01|]
(assert (< j__37@428@01 (Seq_length xs@391@01)))
; [eval] 0 <= k__38
(push) ; 9
; [then-branch: 147 | 0 <= k__38@429@01 | live]
; [else-branch: 147 | !(0 <= k__38@429@01) | live]
(push) ; 10
; [then-branch: 147 | 0 <= k__38@429@01]
(assert (<= 0 k__38@429@01))
; [eval] k__38 < |xs|
; [eval] |xs|
(push) ; 11
; [then-branch: 148 | k__38@429@01 < |xs@391@01| | live]
; [else-branch: 148 | !(k__38@429@01 < |xs@391@01|) | live]
(push) ; 12
; [then-branch: 148 | k__38@429@01 < |xs@391@01|]
(assert (< k__38@429@01 (Seq_length xs@391@01)))
; [eval] j__37 != k__38
(pop) ; 12
(push) ; 12
; [else-branch: 148 | !(k__38@429@01 < |xs@391@01|)]
(assert (not (< k__38@429@01 (Seq_length xs@391@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 147 | !(0 <= k__38@429@01)]
(assert (not (<= 0 k__38@429@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 146 | !(j__37@428@01 < |xs@391@01|)]
(assert (not (< j__37@428@01 (Seq_length xs@391@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 145 | !(0 <= j__37@428@01)]
(assert (not (<= 0 j__37@428@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 149 | j__37@428@01 != k__38@429@01 && k__38@429@01 < |xs@391@01| && 0 <= k__38@429@01 && j__37@428@01 < |xs@391@01| && 0 <= j__37@428@01 | live]
; [else-branch: 149 | !(j__37@428@01 != k__38@429@01 && k__38@429@01 < |xs@391@01| && 0 <= k__38@429@01 && j__37@428@01 < |xs@391@01| && 0 <= j__37@428@01) | live]
(push) ; 6
; [then-branch: 149 | j__37@428@01 != k__38@429@01 && k__38@429@01 < |xs@391@01| && 0 <= k__38@429@01 && j__37@428@01 < |xs@391@01| && 0 <= j__37@428@01]
(assert (and
  (and
    (and
      (and
        (not (= j__37@428@01 k__38@429@01))
        (< k__38@429@01 (Seq_length xs@391@01)))
      (<= 0 k__38@429@01))
    (< j__37@428@01 (Seq_length xs@391@01)))
  (<= 0 j__37@428@01)))
; [eval] xs[j__37] != xs[k__38]
; [eval] xs[j__37]
(push) ; 7
(assert (not (>= j__37@428@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] xs[k__38]
(push) ; 7
(assert (not (>= k__38@429@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 149 | !(j__37@428@01 != k__38@429@01 && k__38@429@01 < |xs@391@01| && 0 <= k__38@429@01 && j__37@428@01 < |xs@391@01| && 0 <= j__37@428@01)]
(assert (not
  (and
    (and
      (and
        (and
          (not (= j__37@428@01 k__38@429@01))
          (< k__38@429@01 (Seq_length xs@391@01)))
        (<= 0 k__38@429@01))
      (< j__37@428@01 (Seq_length xs@391@01)))
    (<= 0 j__37@428@01))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (implies
  (and
    (and
      (and
        (and
          (not (= j__37@428@01 k__38@429@01))
          (< k__38@429@01 (Seq_length xs@391@01)))
        (<= 0 k__38@429@01))
      (< j__37@428@01 (Seq_length xs@391@01)))
    (<= 0 j__37@428@01))
  (and
    (not (= j__37@428@01 k__38@429@01))
    (< k__38@429@01 (Seq_length xs@391@01))
    (<= 0 k__38@429@01)
    (< j__37@428@01 (Seq_length xs@391@01))
    (<= 0 j__37@428@01))))
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j__37@428@01 Int) (k__38@429@01 Int)) (!
  (implies
    (and
      (and
        (and
          (and
            (not (= j__37@428@01 k__38@429@01))
            (< k__38@429@01 (Seq_length xs@391@01)))
          (<= 0 k__38@429@01))
        (< j__37@428@01 (Seq_length xs@391@01)))
      (<= 0 j__37@428@01))
    (and
      (not (= j__37@428@01 k__38@429@01))
      (< k__38@429@01 (Seq_length xs@391@01))
      (<= 0 k__38@429@01)
      (< j__37@428@01 (Seq_length xs@391@01))
      (<= 0 j__37@428@01)))
  :pattern ((Seq_index xs@391@01 k__38@429@01) (Seq_index xs@391@01 j__37@428@01))
  :qid |prog.l887-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 4
(assert (not (forall ((j__37@428@01 Int) (k__38@429@01 Int)) (!
  (implies
    (and
      (and
        (and
          (and
            (not (= j__37@428@01 k__38@429@01))
            (< k__38@429@01 (Seq_length xs@391@01)))
          (<= 0 k__38@429@01))
        (< j__37@428@01 (Seq_length xs@391@01)))
      (<= 0 j__37@428@01))
    (not
      (= (Seq_index xs@391@01 j__37@428@01) (Seq_index xs@391@01 k__38@429@01))))
  :pattern ((Seq_index xs@391@01 k__38@429@01) (Seq_index xs@391@01 j__37@428@01))
  :qid |prog.l887|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (forall ((j__37@428@01 Int) (k__38@429@01 Int)) (!
  (implies
    (and
      (and
        (and
          (and
            (not (= j__37@428@01 k__38@429@01))
            (< k__38@429@01 (Seq_length xs@391@01)))
          (<= 0 k__38@429@01))
        (< j__37@428@01 (Seq_length xs@391@01)))
      (<= 0 j__37@428@01))
    (not
      (= (Seq_index xs@391@01 j__37@428@01) (Seq_index xs@391@01 k__38@429@01))))
  :pattern ((Seq_index xs@391@01 k__38@429@01) (Seq_index xs@391@01 j__37@428@01))
  :qid |prog.l887|)))
; [eval] (forall j__39: Int :: { xs[j__39] } 0 <= j__39 && j__39 < |xs| ==> 0 <= xs[j__39] && xs[j__39] < max)
(declare-const j__39@430@01 Int)
(push) ; 4
; [eval] 0 <= j__39 && j__39 < |xs| ==> 0 <= xs[j__39] && xs[j__39] < max
; [eval] 0 <= j__39 && j__39 < |xs|
; [eval] 0 <= j__39
(push) ; 5
; [then-branch: 150 | 0 <= j__39@430@01 | live]
; [else-branch: 150 | !(0 <= j__39@430@01) | live]
(push) ; 6
; [then-branch: 150 | 0 <= j__39@430@01]
(assert (<= 0 j__39@430@01))
; [eval] j__39 < |xs|
; [eval] |xs|
(pop) ; 6
(push) ; 6
; [else-branch: 150 | !(0 <= j__39@430@01)]
(assert (not (<= 0 j__39@430@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 151 | j__39@430@01 < |xs@391@01| && 0 <= j__39@430@01 | live]
; [else-branch: 151 | !(j__39@430@01 < |xs@391@01| && 0 <= j__39@430@01) | live]
(push) ; 6
; [then-branch: 151 | j__39@430@01 < |xs@391@01| && 0 <= j__39@430@01]
(assert (and (< j__39@430@01 (Seq_length xs@391@01)) (<= 0 j__39@430@01)))
; [eval] 0 <= xs[j__39] && xs[j__39] < max
; [eval] 0 <= xs[j__39]
; [eval] xs[j__39]
(push) ; 7
(assert (not (>= j__39@430@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch: 152 | 0 <= xs@391@01[j__39@430@01] | live]
; [else-branch: 152 | !(0 <= xs@391@01[j__39@430@01]) | live]
(push) ; 8
; [then-branch: 152 | 0 <= xs@391@01[j__39@430@01]]
(assert (<= 0 (Seq_index xs@391@01 j__39@430@01)))
; [eval] xs[j__39] < max
; [eval] xs[j__39]
(push) ; 9
(assert (not (>= j__39@430@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 152 | !(0 <= xs@391@01[j__39@430@01])]
(assert (not (<= 0 (Seq_index xs@391@01 j__39@430@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 151 | !(j__39@430@01 < |xs@391@01| && 0 <= j__39@430@01)]
(assert (not (and (< j__39@430@01 (Seq_length xs@391@01)) (<= 0 j__39@430@01))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 4
(assert (not (forall ((j__39@430@01 Int)) (!
  (implies
    (and (< j__39@430@01 (Seq_length xs@391@01)) (<= 0 j__39@430@01))
    (and
      (< (Seq_index xs@391@01 j__39@430@01) max@390@01)
      (<= 0 (Seq_index xs@391@01 j__39@430@01))))
  :pattern ((Seq_index xs@391@01 j__39@430@01))
  :qid |prog.l888|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (forall ((j__39@430@01 Int)) (!
  (implies
    (and (< j__39@430@01 (Seq_length xs@391@01)) (<= 0 j__39@430@01))
    (and
      (< (Seq_index xs@391@01 j__39@430@01) max@390@01)
      (<= 0 (Seq_index xs@391@01 j__39@430@01))))
  :pattern ((Seq_index xs@391@01 j__39@430@01))
  :qid |prog.l888|)))
; [eval] 0 <= i__27
; [eval] i__27 <= size
(push) ; 4
(assert (not (<= 0 size@389@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 size@389@01))
; [eval] |f__24.channel_hist_value| == i__27
; [eval] |f__24.channel_hist_value|
(push) ; 4
(assert (not (= (Seq_length ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@415@01))) 0)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (= (Seq_length ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@415@01))) 0))
; [eval] (forall j__40: Int :: { f__24.channel_hist_value[j__40] } 0 <= j__40 && j__40 < i__27 ==> |f__24.channel_hist_value[j__40]| == 0)
(declare-const j__40@431@01 Int)
(push) ; 4
; [eval] 0 <= j__40 && j__40 < i__27 ==> |f__24.channel_hist_value[j__40]| == 0
; [eval] 0 <= j__40 && j__40 < i__27
; [eval] 0 <= j__40
(push) ; 5
; [then-branch: 153 | 0 <= j__40@431@01 | live]
; [else-branch: 153 | !(0 <= j__40@431@01) | live]
(push) ; 6
; [then-branch: 153 | 0 <= j__40@431@01]
(assert (<= 0 j__40@431@01))
; [eval] j__40 < i__27
(pop) ; 6
(push) ; 6
; [else-branch: 153 | !(0 <= j__40@431@01)]
(assert (not (<= 0 j__40@431@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 154 | j__40@431@01 < 0 && 0 <= j__40@431@01 | live]
; [else-branch: 154 | !(j__40@431@01 < 0 && 0 <= j__40@431@01) | live]
(push) ; 6
; [then-branch: 154 | j__40@431@01 < 0 && 0 <= j__40@431@01]
(assert (and (< j__40@431@01 0) (<= 0 j__40@431@01)))
; [eval] |f__24.channel_hist_value[j__40]| == 0
; [eval] |f__24.channel_hist_value[j__40]|
; [eval] f__24.channel_hist_value[j__40]
(push) ; 7
(assert (not (>= j__40@431@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  j__40@431@01
  (Seq_length ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@415@01))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 154 | !(j__40@431@01 < 0 && 0 <= j__40@431@01)]
(assert (not (and (< j__40@431@01 0) (<= 0 j__40@431@01))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 4
(assert (not (forall ((j__40@431@01 Int)) (!
  (implies
    (and (< j__40@431@01 0) (<= 0 j__40@431@01))
    (=
      (Seq_length
        (Seq_index
          ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@415@01))
          j__40@431@01))
      0))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@415@01))
    j__40@431@01))
  :qid |prog.l897|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (forall ((j__40@431@01 Int)) (!
  (implies
    (and (< j__40@431@01 0) (<= 0 j__40@431@01))
    (=
      (Seq_length
        (Seq_index
          ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@415@01))
          j__40@431@01))
      0))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@415@01))
    j__40@431@01))
  :qid |prog.l897|)))
; [eval] |f__24.results_hist_value| == i__27
; [eval] |f__24.results_hist_value|
(push) ; 4
(assert (not (= (Seq_length ($SortWrappers.$SnapToSeq<Int> ($Snap.first $t@416@01))) 0)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (= (Seq_length ($SortWrappers.$SnapToSeq<Int> ($Snap.first $t@416@01))) 0))
; [eval] (forall j__41: Int :: { f__24.results_hist_value[j__41] } 0 <= j__41 && j__41 < i__27 ==> f__24.results_hist_value[j__41] == 0)
(declare-const j__41@432@01 Int)
(push) ; 4
; [eval] 0 <= j__41 && j__41 < i__27 ==> f__24.results_hist_value[j__41] == 0
; [eval] 0 <= j__41 && j__41 < i__27
; [eval] 0 <= j__41
(push) ; 5
; [then-branch: 155 | 0 <= j__41@432@01 | live]
; [else-branch: 155 | !(0 <= j__41@432@01) | live]
(push) ; 6
; [then-branch: 155 | 0 <= j__41@432@01]
(assert (<= 0 j__41@432@01))
; [eval] j__41 < i__27
(pop) ; 6
(push) ; 6
; [else-branch: 155 | !(0 <= j__41@432@01)]
(assert (not (<= 0 j__41@432@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 156 | j__41@432@01 < 0 && 0 <= j__41@432@01 | live]
; [else-branch: 156 | !(j__41@432@01 < 0 && 0 <= j__41@432@01) | live]
(push) ; 6
; [then-branch: 156 | j__41@432@01 < 0 && 0 <= j__41@432@01]
(assert (and (< j__41@432@01 0) (<= 0 j__41@432@01)))
; [eval] f__24.results_hist_value[j__41] == 0
; [eval] f__24.results_hist_value[j__41]
(push) ; 7
(assert (not (>= j__41@432@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  j__41@432@01
  (Seq_length ($SortWrappers.$SnapToSeq<Int> ($Snap.first $t@416@01))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 156 | !(j__41@432@01 < 0 && 0 <= j__41@432@01)]
(assert (not (and (< j__41@432@01 0) (<= 0 j__41@432@01))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 4
(assert (not (forall ((j__41@432@01 Int)) (!
  (implies
    (and (< j__41@432@01 0) (<= 0 j__41@432@01))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first $t@416@01))
        j__41@432@01)
      0))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first $t@416@01))
    j__41@432@01))
  :qid |prog.l899|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (forall ((j__41@432@01 Int)) (!
  (implies
    (and (< j__41@432@01 0) (<= 0 j__41@432@01))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first $t@416@01))
        j__41@432@01)
      0))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first $t@416@01))
    j__41@432@01))
  :qid |prog.l899|)))
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert (= $t@422@01 ($Snap.combine ($Snap.first $t@422@01) ($Snap.second $t@422@01))))
(assert (= ($Snap.first $t@422@01) $Snap.unit))
(assert (=
  ($Snap.second $t@422@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@422@01))
    ($Snap.second ($Snap.second $t@422@01)))))
(assert (= ($Snap.first ($Snap.second $t@422@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@422@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@422@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@422@01))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@422@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@422@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@422@01))))
  $Snap.unit))
(assert (forall ((j__37@423@01 Int) (k__38@424@01 Int)) (!
  (implies
    (and
      (and
        (and
          (and
            (not (= j__37@423@01 k__38@424@01))
            (< k__38@424@01 (Seq_length xs@391@01)))
          (<= 0 k__38@424@01))
        (< j__37@423@01 (Seq_length xs@391@01)))
      (<= 0 j__37@423@01))
    (and
      (not (= j__37@423@01 k__38@424@01))
      (< k__38@424@01 (Seq_length xs@391@01))
      (<= 0 k__38@424@01)
      (< j__37@423@01 (Seq_length xs@391@01))
      (<= 0 j__37@423@01)))
  :pattern ((Seq_index xs@391@01 k__38@424@01) (Seq_index xs@391@01 j__37@423@01))
  :qid |prog.l887-aux|)))
(assert (forall ((j__37@423@01 Int) (k__38@424@01 Int)) (!
  (implies
    (and
      (and
        (and
          (and
            (not (= j__37@423@01 k__38@424@01))
            (< k__38@424@01 (Seq_length xs@391@01)))
          (<= 0 k__38@424@01))
        (< j__37@423@01 (Seq_length xs@391@01)))
      (<= 0 j__37@423@01))
    (not
      (= (Seq_index xs@391@01 j__37@423@01) (Seq_index xs@391@01 k__38@424@01))))
  :pattern ((Seq_index xs@391@01 k__38@424@01) (Seq_index xs@391@01 j__37@423@01))
  :qid |prog.l887|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))
  $Snap.unit))
(assert (forall ((j__39@425@01 Int)) (!
  (implies
    (and (< j__39@425@01 (Seq_length xs@391@01)) (<= 0 j__39@425@01))
    (and
      (< (Seq_index xs@391@01 j__39@425@01) max@390@01)
      (<= 0 (Seq_index xs@391@01 j__39@425@01))))
  :pattern ((Seq_index xs@391@01 j__39@425@01))
  :qid |prog.l888|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))
  $Snap.unit))
(assert (<= 0 i__27@421@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))
  $Snap.unit))
(assert (<= i__27@421@01 size@389@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))))))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))))))
  i__27@421@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))))))))))
  $Snap.unit))
(assert (forall ((j__40@426@01 Int)) (!
  (implies
    (and (< j__40@426@01 i__27@421@01) (<= 0 j__40@426@01))
    (=
      (Seq_length
        (Seq_index
          ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))))
          j__40@426@01))
      0))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))))
    j__40@426@01))
  :qid |prog.l897|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))))))))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))))))))
  i__27@421@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))))))))))))
  $Snap.unit))
(assert (forall ((j__41@427@01 Int)) (!
  (implies
    (and (< j__41@427@01 i__27@421@01) (<= 0 j__41@427@01))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))))))))
        j__41@427@01)
      0))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))))))))
    j__41@427@01))
  :qid |prog.l899|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Follow loop-internal edges
; [eval] i__27 < size
(push) ; 5
(assert (not (not (< i__27@421@01 size@389@01))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< i__27@421@01 size@389@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 157 | i__27@421@01 < size@389@01 | live]
; [else-branch: 157 | !(i__27@421@01 < size@389@01) | live]
(push) ; 5
; [then-branch: 157 | i__27@421@01 < size@389@01]
(assert (< i__27@421@01 size@389@01))
; [exec]
; __flatten_87__33 := Seq(Seq[Int]())
; [eval] Seq(Seq[Int]())
; [eval] Seq[Int]()
(assert (= (Seq_length (Seq_singleton (as Seq_empty  Seq<Int>))) 1))
(declare-const __flatten_87__33@433@01 Seq<Seq<Int>>)
(assert (Seq_equal __flatten_87__33@433@01 (Seq_singleton (as Seq_empty  Seq<Int>))))
; [exec]
; __flatten_43__28 := __flatten_87__33
; [exec]
; hist_set_channel(f__24, current_thread_id, f__24.channel_hist_value ++ __flatten_43__28)
; [eval] f__24.channel_hist_value ++ __flatten_43__28
; [eval] diz != null
; [eval] 0 <= current_thread_id
(declare-const $t@434@01 $Snap)
(assert (= $t@434@01 ($Snap.combine ($Snap.first $t@434@01) ($Snap.second $t@434@01))))
(assert (=
  ($Snap.second $t@434@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@434@01))
    ($Snap.second ($Snap.second $t@434@01)))))
(assert (= ($Snap.first ($Snap.second $t@434@01)) $Snap.unit))
; [eval] diz.channel_hist_value == value
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@434@01))
  (Seq_append
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))))
    __flatten_87__33@433@01)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; __flatten_89__34 := Seq(0)
; [eval] Seq(0)
(assert (= (Seq_length (Seq_singleton 0)) 1))
(declare-const __flatten_89__34@435@01 Seq<Int>)
(assert (Seq_equal __flatten_89__34@435@01 (Seq_singleton 0)))
; [exec]
; __flatten_45__29 := __flatten_89__34
; [exec]
; hist_set_results(f__24, current_thread_id, f__24.results_hist_value ++ __flatten_45__29)
; [eval] f__24.results_hist_value ++ __flatten_45__29
; [eval] diz != null
; [eval] 0 <= current_thread_id
(declare-const $t@436@01 $Snap)
(assert (= $t@436@01 ($Snap.combine ($Snap.first $t@436@01) ($Snap.second $t@436@01))))
(assert (=
  ($Snap.second $t@436@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@436@01))
    ($Snap.second ($Snap.second $t@436@01)))))
(assert (= ($Snap.first ($Snap.second $t@436@01)) $Snap.unit))
; [eval] diz.results_hist_value == value
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first $t@436@01))
  (Seq_append
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))))))))
    __flatten_89__34@435@01)))
; State saturation: after contract
(check-sat)
; unknown
; [exec]
; i__27 := i__27 + 1
; [eval] i__27 + 1
(declare-const i__27@437@01 Int)
(assert (= i__27@437@01 (+ i__27@421@01 1)))
; Loop head block: Re-establish invariant
; [eval] 0 < size
; [eval] 0 < max
; [eval] |xs| == size
; [eval] |xs|
; [eval] (forall j__37: Int, k__38: Int :: { xs[k__38],xs[j__37] } 0 <= j__37 && (j__37 < |xs| && (0 <= k__38 && (k__38 < |xs| && j__37 != k__38))) ==> xs[j__37] != xs[k__38])
(declare-const j__37@438@01 Int)
(declare-const k__38@439@01 Int)
(push) ; 6
; [eval] 0 <= j__37 && (j__37 < |xs| && (0 <= k__38 && (k__38 < |xs| && j__37 != k__38))) ==> xs[j__37] != xs[k__38]
; [eval] 0 <= j__37 && (j__37 < |xs| && (0 <= k__38 && (k__38 < |xs| && j__37 != k__38)))
; [eval] 0 <= j__37
(push) ; 7
; [then-branch: 158 | 0 <= j__37@438@01 | live]
; [else-branch: 158 | !(0 <= j__37@438@01) | live]
(push) ; 8
; [then-branch: 158 | 0 <= j__37@438@01]
(assert (<= 0 j__37@438@01))
; [eval] j__37 < |xs|
; [eval] |xs|
(push) ; 9
; [then-branch: 159 | j__37@438@01 < |xs@391@01| | live]
; [else-branch: 159 | !(j__37@438@01 < |xs@391@01|) | live]
(push) ; 10
; [then-branch: 159 | j__37@438@01 < |xs@391@01|]
(assert (< j__37@438@01 (Seq_length xs@391@01)))
; [eval] 0 <= k__38
(push) ; 11
; [then-branch: 160 | 0 <= k__38@439@01 | live]
; [else-branch: 160 | !(0 <= k__38@439@01) | live]
(push) ; 12
; [then-branch: 160 | 0 <= k__38@439@01]
(assert (<= 0 k__38@439@01))
; [eval] k__38 < |xs|
; [eval] |xs|
(push) ; 13
; [then-branch: 161 | k__38@439@01 < |xs@391@01| | live]
; [else-branch: 161 | !(k__38@439@01 < |xs@391@01|) | live]
(push) ; 14
; [then-branch: 161 | k__38@439@01 < |xs@391@01|]
(assert (< k__38@439@01 (Seq_length xs@391@01)))
; [eval] j__37 != k__38
(pop) ; 14
(push) ; 14
; [else-branch: 161 | !(k__38@439@01 < |xs@391@01|)]
(assert (not (< k__38@439@01 (Seq_length xs@391@01))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 160 | !(0 <= k__38@439@01)]
(assert (not (<= 0 k__38@439@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 159 | !(j__37@438@01 < |xs@391@01|)]
(assert (not (< j__37@438@01 (Seq_length xs@391@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 158 | !(0 <= j__37@438@01)]
(assert (not (<= 0 j__37@438@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 162 | j__37@438@01 != k__38@439@01 && k__38@439@01 < |xs@391@01| && 0 <= k__38@439@01 && j__37@438@01 < |xs@391@01| && 0 <= j__37@438@01 | live]
; [else-branch: 162 | !(j__37@438@01 != k__38@439@01 && k__38@439@01 < |xs@391@01| && 0 <= k__38@439@01 && j__37@438@01 < |xs@391@01| && 0 <= j__37@438@01) | live]
(push) ; 8
; [then-branch: 162 | j__37@438@01 != k__38@439@01 && k__38@439@01 < |xs@391@01| && 0 <= k__38@439@01 && j__37@438@01 < |xs@391@01| && 0 <= j__37@438@01]
(assert (and
  (and
    (and
      (and
        (not (= j__37@438@01 k__38@439@01))
        (< k__38@439@01 (Seq_length xs@391@01)))
      (<= 0 k__38@439@01))
    (< j__37@438@01 (Seq_length xs@391@01)))
  (<= 0 j__37@438@01)))
; [eval] xs[j__37] != xs[k__38]
; [eval] xs[j__37]
(set-option :timeout 0)
(push) ; 9
(assert (not (>= j__37@438@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] xs[k__38]
(push) ; 9
(assert (not (>= k__38@439@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 162 | !(j__37@438@01 != k__38@439@01 && k__38@439@01 < |xs@391@01| && 0 <= k__38@439@01 && j__37@438@01 < |xs@391@01| && 0 <= j__37@438@01)]
(assert (not
  (and
    (and
      (and
        (and
          (not (= j__37@438@01 k__38@439@01))
          (< k__38@439@01 (Seq_length xs@391@01)))
        (<= 0 k__38@439@01))
      (< j__37@438@01 (Seq_length xs@391@01)))
    (<= 0 j__37@438@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (implies
  (and
    (and
      (and
        (and
          (not (= j__37@438@01 k__38@439@01))
          (< k__38@439@01 (Seq_length xs@391@01)))
        (<= 0 k__38@439@01))
      (< j__37@438@01 (Seq_length xs@391@01)))
    (<= 0 j__37@438@01))
  (and
    (not (= j__37@438@01 k__38@439@01))
    (< k__38@439@01 (Seq_length xs@391@01))
    (<= 0 k__38@439@01)
    (< j__37@438@01 (Seq_length xs@391@01))
    (<= 0 j__37@438@01))))
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j__37@438@01 Int) (k__38@439@01 Int)) (!
  (implies
    (and
      (and
        (and
          (and
            (not (= j__37@438@01 k__38@439@01))
            (< k__38@439@01 (Seq_length xs@391@01)))
          (<= 0 k__38@439@01))
        (< j__37@438@01 (Seq_length xs@391@01)))
      (<= 0 j__37@438@01))
    (and
      (not (= j__37@438@01 k__38@439@01))
      (< k__38@439@01 (Seq_length xs@391@01))
      (<= 0 k__38@439@01)
      (< j__37@438@01 (Seq_length xs@391@01))
      (<= 0 j__37@438@01)))
  :pattern ((Seq_index xs@391@01 k__38@439@01) (Seq_index xs@391@01 j__37@438@01))
  :qid |prog.l887-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 6
(assert (not (forall ((j__37@438@01 Int) (k__38@439@01 Int)) (!
  (implies
    (and
      (and
        (and
          (and
            (not (= j__37@438@01 k__38@439@01))
            (< k__38@439@01 (Seq_length xs@391@01)))
          (<= 0 k__38@439@01))
        (< j__37@438@01 (Seq_length xs@391@01)))
      (<= 0 j__37@438@01))
    (not
      (= (Seq_index xs@391@01 j__37@438@01) (Seq_index xs@391@01 k__38@439@01))))
  :pattern ((Seq_index xs@391@01 k__38@439@01) (Seq_index xs@391@01 j__37@438@01))
  :qid |prog.l887|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((j__37@438@01 Int) (k__38@439@01 Int)) (!
  (implies
    (and
      (and
        (and
          (and
            (not (= j__37@438@01 k__38@439@01))
            (< k__38@439@01 (Seq_length xs@391@01)))
          (<= 0 k__38@439@01))
        (< j__37@438@01 (Seq_length xs@391@01)))
      (<= 0 j__37@438@01))
    (not
      (= (Seq_index xs@391@01 j__37@438@01) (Seq_index xs@391@01 k__38@439@01))))
  :pattern ((Seq_index xs@391@01 k__38@439@01) (Seq_index xs@391@01 j__37@438@01))
  :qid |prog.l887|)))
; [eval] (forall j__39: Int :: { xs[j__39] } 0 <= j__39 && j__39 < |xs| ==> 0 <= xs[j__39] && xs[j__39] < max)
(declare-const j__39@440@01 Int)
(push) ; 6
; [eval] 0 <= j__39 && j__39 < |xs| ==> 0 <= xs[j__39] && xs[j__39] < max
; [eval] 0 <= j__39 && j__39 < |xs|
; [eval] 0 <= j__39
(push) ; 7
; [then-branch: 163 | 0 <= j__39@440@01 | live]
; [else-branch: 163 | !(0 <= j__39@440@01) | live]
(push) ; 8
; [then-branch: 163 | 0 <= j__39@440@01]
(assert (<= 0 j__39@440@01))
; [eval] j__39 < |xs|
; [eval] |xs|
(pop) ; 8
(push) ; 8
; [else-branch: 163 | !(0 <= j__39@440@01)]
(assert (not (<= 0 j__39@440@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 164 | j__39@440@01 < |xs@391@01| && 0 <= j__39@440@01 | live]
; [else-branch: 164 | !(j__39@440@01 < |xs@391@01| && 0 <= j__39@440@01) | live]
(push) ; 8
; [then-branch: 164 | j__39@440@01 < |xs@391@01| && 0 <= j__39@440@01]
(assert (and (< j__39@440@01 (Seq_length xs@391@01)) (<= 0 j__39@440@01)))
; [eval] 0 <= xs[j__39] && xs[j__39] < max
; [eval] 0 <= xs[j__39]
; [eval] xs[j__39]
(push) ; 9
(assert (not (>= j__39@440@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch: 165 | 0 <= xs@391@01[j__39@440@01] | live]
; [else-branch: 165 | !(0 <= xs@391@01[j__39@440@01]) | live]
(push) ; 10
; [then-branch: 165 | 0 <= xs@391@01[j__39@440@01]]
(assert (<= 0 (Seq_index xs@391@01 j__39@440@01)))
; [eval] xs[j__39] < max
; [eval] xs[j__39]
(push) ; 11
(assert (not (>= j__39@440@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(push) ; 10
; [else-branch: 165 | !(0 <= xs@391@01[j__39@440@01])]
(assert (not (<= 0 (Seq_index xs@391@01 j__39@440@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 164 | !(j__39@440@01 < |xs@391@01| && 0 <= j__39@440@01)]
(assert (not (and (< j__39@440@01 (Seq_length xs@391@01)) (<= 0 j__39@440@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 6
(assert (not (forall ((j__39@440@01 Int)) (!
  (implies
    (and (< j__39@440@01 (Seq_length xs@391@01)) (<= 0 j__39@440@01))
    (and
      (< (Seq_index xs@391@01 j__39@440@01) max@390@01)
      (<= 0 (Seq_index xs@391@01 j__39@440@01))))
  :pattern ((Seq_index xs@391@01 j__39@440@01))
  :qid |prog.l888|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((j__39@440@01 Int)) (!
  (implies
    (and (< j__39@440@01 (Seq_length xs@391@01)) (<= 0 j__39@440@01))
    (and
      (< (Seq_index xs@391@01 j__39@440@01) max@390@01)
      (<= 0 (Seq_index xs@391@01 j__39@440@01))))
  :pattern ((Seq_index xs@391@01 j__39@440@01))
  :qid |prog.l888|)))
; [eval] 0 <= i__27
(push) ; 6
(assert (not (<= 0 i__27@437@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 i__27@437@01))
; [eval] i__27 <= size
(push) ; 6
(assert (not (<= i__27@437@01 size@389@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (<= i__27@437@01 size@389@01))
; [eval] |f__24.channel_hist_value| == i__27
; [eval] |f__24.channel_hist_value|
(push) ; 6
(assert (not (=
  (Seq_length ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@434@01)))
  i__27@437@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@434@01)))
  i__27@437@01))
; [eval] (forall j__40: Int :: { f__24.channel_hist_value[j__40] } 0 <= j__40 && j__40 < i__27 ==> |f__24.channel_hist_value[j__40]| == 0)
(declare-const j__40@441@01 Int)
(push) ; 6
; [eval] 0 <= j__40 && j__40 < i__27 ==> |f__24.channel_hist_value[j__40]| == 0
; [eval] 0 <= j__40 && j__40 < i__27
; [eval] 0 <= j__40
(push) ; 7
; [then-branch: 166 | 0 <= j__40@441@01 | live]
; [else-branch: 166 | !(0 <= j__40@441@01) | live]
(push) ; 8
; [then-branch: 166 | 0 <= j__40@441@01]
(assert (<= 0 j__40@441@01))
; [eval] j__40 < i__27
(pop) ; 8
(push) ; 8
; [else-branch: 166 | !(0 <= j__40@441@01)]
(assert (not (<= 0 j__40@441@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 167 | j__40@441@01 < i__27@437@01 && 0 <= j__40@441@01 | live]
; [else-branch: 167 | !(j__40@441@01 < i__27@437@01 && 0 <= j__40@441@01) | live]
(push) ; 8
; [then-branch: 167 | j__40@441@01 < i__27@437@01 && 0 <= j__40@441@01]
(assert (and (< j__40@441@01 i__27@437@01) (<= 0 j__40@441@01)))
; [eval] |f__24.channel_hist_value[j__40]| == 0
; [eval] |f__24.channel_hist_value[j__40]|
; [eval] f__24.channel_hist_value[j__40]
(push) ; 9
(assert (not (>= j__40@441@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (<
  j__40@441@01
  (Seq_length ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@434@01))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 167 | !(j__40@441@01 < i__27@437@01 && 0 <= j__40@441@01)]
(assert (not (and (< j__40@441@01 i__27@437@01) (<= 0 j__40@441@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 6
(assert (not (forall ((j__40@441@01 Int)) (!
  (implies
    (and (< j__40@441@01 i__27@437@01) (<= 0 j__40@441@01))
    (=
      (Seq_length
        (Seq_index
          ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@434@01))
          j__40@441@01))
      0))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@434@01))
    j__40@441@01))
  :qid |prog.l897|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((j__40@441@01 Int)) (!
  (implies
    (and (< j__40@441@01 i__27@437@01) (<= 0 j__40@441@01))
    (=
      (Seq_length
        (Seq_index
          ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@434@01))
          j__40@441@01))
      0))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@434@01))
    j__40@441@01))
  :qid |prog.l897|)))
; [eval] |f__24.results_hist_value| == i__27
; [eval] |f__24.results_hist_value|
(push) ; 6
(assert (not (=
  (Seq_length ($SortWrappers.$SnapToSeq<Int> ($Snap.first $t@436@01)))
  i__27@437@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length ($SortWrappers.$SnapToSeq<Int> ($Snap.first $t@436@01)))
  i__27@437@01))
; [eval] (forall j__41: Int :: { f__24.results_hist_value[j__41] } 0 <= j__41 && j__41 < i__27 ==> f__24.results_hist_value[j__41] == 0)
(declare-const j__41@442@01 Int)
(push) ; 6
; [eval] 0 <= j__41 && j__41 < i__27 ==> f__24.results_hist_value[j__41] == 0
; [eval] 0 <= j__41 && j__41 < i__27
; [eval] 0 <= j__41
(push) ; 7
; [then-branch: 168 | 0 <= j__41@442@01 | live]
; [else-branch: 168 | !(0 <= j__41@442@01) | live]
(push) ; 8
; [then-branch: 168 | 0 <= j__41@442@01]
(assert (<= 0 j__41@442@01))
; [eval] j__41 < i__27
(pop) ; 8
(push) ; 8
; [else-branch: 168 | !(0 <= j__41@442@01)]
(assert (not (<= 0 j__41@442@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 169 | j__41@442@01 < i__27@437@01 && 0 <= j__41@442@01 | live]
; [else-branch: 169 | !(j__41@442@01 < i__27@437@01 && 0 <= j__41@442@01) | live]
(push) ; 8
; [then-branch: 169 | j__41@442@01 < i__27@437@01 && 0 <= j__41@442@01]
(assert (and (< j__41@442@01 i__27@437@01) (<= 0 j__41@442@01)))
; [eval] f__24.results_hist_value[j__41] == 0
; [eval] f__24.results_hist_value[j__41]
(push) ; 9
(assert (not (>= j__41@442@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (<
  j__41@442@01
  (Seq_length ($SortWrappers.$SnapToSeq<Int> ($Snap.first $t@436@01))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 169 | !(j__41@442@01 < i__27@437@01 && 0 <= j__41@442@01)]
(assert (not (and (< j__41@442@01 i__27@437@01) (<= 0 j__41@442@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 6
(assert (not (forall ((j__41@442@01 Int)) (!
  (implies
    (and (< j__41@442@01 i__27@437@01) (<= 0 j__41@442@01))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first $t@436@01))
        j__41@442@01)
      0))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first $t@436@01))
    j__41@442@01))
  :qid |prog.l899|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((j__41@442@01 Int)) (!
  (implies
    (and (< j__41@442@01 i__27@437@01) (<= 0 j__41@442@01))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first $t@436@01))
        j__41@442@01)
      0))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first $t@436@01))
    j__41@442@01))
  :qid |prog.l899|)))
(pop) ; 5
(push) ; 5
; [else-branch: 157 | !(i__27@421@01 < size@389@01)]
(assert (not (< i__27@421@01 size@389@01)))
(pop) ; 5
; [eval] !(i__27 < size)
; [eval] i__27 < size
(set-option :timeout 10)
(push) ; 5
(assert (not (< i__27@421@01 size@389@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (not (< i__27@421@01 size@389@01))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 170 | !(i__27@421@01 < size@389@01) | live]
; [else-branch: 170 | i__27@421@01 < size@389@01 | live]
(push) ; 5
; [then-branch: 170 | !(i__27@421@01 < size@389@01)]
(assert (not (< i__27@421@01 size@389@01)))
; [exec]
; begin_future_1(f__24, current_thread_id, size, xs, max)
; [eval] diz != null
; [eval] 0 <= current_thread_id
; [eval] 0 < size
; [eval] |diz.channel_hist_value| == size
; [eval] |diz.channel_hist_value|
(set-option :timeout 0)
(push) ; 6
(assert (not (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))))))
  size@389@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))))))
  size@389@01))
; [eval] |diz.results_hist_value| == size
; [eval] |diz.results_hist_value|
(push) ; 6
(assert (not (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))))))))
  size@389@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))))))))
  size@389@01))
; [eval] |xs| == size
; [eval] |xs|
; [eval] (forall i: Int, j: Int :: { xs[j],xs[i] } 0 <= i && (i < |xs| && (0 <= j && (j < |xs| && i != j))) ==> xs[i] != xs[j])
(declare-const i@443@01 Int)
(declare-const j@444@01 Int)
(push) ; 6
; [eval] 0 <= i && (i < |xs| && (0 <= j && (j < |xs| && i != j))) ==> xs[i] != xs[j]
; [eval] 0 <= i && (i < |xs| && (0 <= j && (j < |xs| && i != j)))
; [eval] 0 <= i
(push) ; 7
; [then-branch: 171 | 0 <= i@443@01 | live]
; [else-branch: 171 | !(0 <= i@443@01) | live]
(push) ; 8
; [then-branch: 171 | 0 <= i@443@01]
(assert (<= 0 i@443@01))
; [eval] i < |xs|
; [eval] |xs|
(push) ; 9
; [then-branch: 172 | i@443@01 < |xs@391@01| | live]
; [else-branch: 172 | !(i@443@01 < |xs@391@01|) | live]
(push) ; 10
; [then-branch: 172 | i@443@01 < |xs@391@01|]
(assert (< i@443@01 (Seq_length xs@391@01)))
; [eval] 0 <= j
(push) ; 11
; [then-branch: 173 | 0 <= j@444@01 | live]
; [else-branch: 173 | !(0 <= j@444@01) | live]
(push) ; 12
; [then-branch: 173 | 0 <= j@444@01]
(assert (<= 0 j@444@01))
; [eval] j < |xs|
; [eval] |xs|
(push) ; 13
; [then-branch: 174 | j@444@01 < |xs@391@01| | live]
; [else-branch: 174 | !(j@444@01 < |xs@391@01|) | live]
(push) ; 14
; [then-branch: 174 | j@444@01 < |xs@391@01|]
(assert (< j@444@01 (Seq_length xs@391@01)))
; [eval] i != j
(pop) ; 14
(push) ; 14
; [else-branch: 174 | !(j@444@01 < |xs@391@01|)]
(assert (not (< j@444@01 (Seq_length xs@391@01))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 173 | !(0 <= j@444@01)]
(assert (not (<= 0 j@444@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 172 | !(i@443@01 < |xs@391@01|)]
(assert (not (< i@443@01 (Seq_length xs@391@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 171 | !(0 <= i@443@01)]
(assert (not (<= 0 i@443@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 175 | i@443@01 != j@444@01 && j@444@01 < |xs@391@01| && 0 <= j@444@01 && i@443@01 < |xs@391@01| && 0 <= i@443@01 | live]
; [else-branch: 175 | !(i@443@01 != j@444@01 && j@444@01 < |xs@391@01| && 0 <= j@444@01 && i@443@01 < |xs@391@01| && 0 <= i@443@01) | live]
(push) ; 8
; [then-branch: 175 | i@443@01 != j@444@01 && j@444@01 < |xs@391@01| && 0 <= j@444@01 && i@443@01 < |xs@391@01| && 0 <= i@443@01]
(assert (and
  (and
    (and
      (and (not (= i@443@01 j@444@01)) (< j@444@01 (Seq_length xs@391@01)))
      (<= 0 j@444@01))
    (< i@443@01 (Seq_length xs@391@01)))
  (<= 0 i@443@01)))
; [eval] xs[i] != xs[j]
; [eval] xs[i]
(push) ; 9
(assert (not (>= i@443@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] xs[j]
(push) ; 9
(assert (not (>= j@444@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 175 | !(i@443@01 != j@444@01 && j@444@01 < |xs@391@01| && 0 <= j@444@01 && i@443@01 < |xs@391@01| && 0 <= i@443@01)]
(assert (not
  (and
    (and
      (and
        (and (not (= i@443@01 j@444@01)) (< j@444@01 (Seq_length xs@391@01)))
        (<= 0 j@444@01))
      (< i@443@01 (Seq_length xs@391@01)))
    (<= 0 i@443@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (implies
  (and
    (and
      (and
        (and (not (= i@443@01 j@444@01)) (< j@444@01 (Seq_length xs@391@01)))
        (<= 0 j@444@01))
      (< i@443@01 (Seq_length xs@391@01)))
    (<= 0 i@443@01))
  (and
    (not (= i@443@01 j@444@01))
    (< j@444@01 (Seq_length xs@391@01))
    (<= 0 j@444@01)
    (< i@443@01 (Seq_length xs@391@01))
    (<= 0 i@443@01))))
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@443@01 Int) (j@444@01 Int)) (!
  (implies
    (and
      (and
        (and
          (and (not (= i@443@01 j@444@01)) (< j@444@01 (Seq_length xs@391@01)))
          (<= 0 j@444@01))
        (< i@443@01 (Seq_length xs@391@01)))
      (<= 0 i@443@01))
    (and
      (not (= i@443@01 j@444@01))
      (< j@444@01 (Seq_length xs@391@01))
      (<= 0 j@444@01)
      (< i@443@01 (Seq_length xs@391@01))
      (<= 0 i@443@01)))
  :pattern ((Seq_index xs@391@01 j@444@01) (Seq_index xs@391@01 i@443@01))
  :qid |prog.l517-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 6
(assert (not (forall ((i@443@01 Int) (j@444@01 Int)) (!
  (implies
    (and
      (and
        (and
          (and (not (= i@443@01 j@444@01)) (< j@444@01 (Seq_length xs@391@01)))
          (<= 0 j@444@01))
        (< i@443@01 (Seq_length xs@391@01)))
      (<= 0 i@443@01))
    (not (= (Seq_index xs@391@01 i@443@01) (Seq_index xs@391@01 j@444@01))))
  :pattern ((Seq_index xs@391@01 j@444@01) (Seq_index xs@391@01 i@443@01))
  :qid |prog.l517|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((i@443@01 Int) (j@444@01 Int)) (!
  (implies
    (and
      (and
        (and
          (and (not (= i@443@01 j@444@01)) (< j@444@01 (Seq_length xs@391@01)))
          (<= 0 j@444@01))
        (< i@443@01 (Seq_length xs@391@01)))
      (<= 0 i@443@01))
    (not (= (Seq_index xs@391@01 i@443@01) (Seq_index xs@391@01 j@444@01))))
  :pattern ((Seq_index xs@391@01 j@444@01) (Seq_index xs@391@01 i@443@01))
  :qid |prog.l517|)))
; [eval] (forall i: Int :: { xs[i] } 0 <= i && i < |xs| ==> 0 <= xs[i] && xs[i] < max)
(declare-const i@445@01 Int)
(push) ; 6
; [eval] 0 <= i && i < |xs| ==> 0 <= xs[i] && xs[i] < max
; [eval] 0 <= i && i < |xs|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 176 | 0 <= i@445@01 | live]
; [else-branch: 176 | !(0 <= i@445@01) | live]
(push) ; 8
; [then-branch: 176 | 0 <= i@445@01]
(assert (<= 0 i@445@01))
; [eval] i < |xs|
; [eval] |xs|
(pop) ; 8
(push) ; 8
; [else-branch: 176 | !(0 <= i@445@01)]
(assert (not (<= 0 i@445@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 177 | i@445@01 < |xs@391@01| && 0 <= i@445@01 | live]
; [else-branch: 177 | !(i@445@01 < |xs@391@01| && 0 <= i@445@01) | live]
(push) ; 8
; [then-branch: 177 | i@445@01 < |xs@391@01| && 0 <= i@445@01]
(assert (and (< i@445@01 (Seq_length xs@391@01)) (<= 0 i@445@01)))
; [eval] 0 <= xs[i] && xs[i] < max
; [eval] 0 <= xs[i]
; [eval] xs[i]
(push) ; 9
(assert (not (>= i@445@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch: 178 | 0 <= xs@391@01[i@445@01] | live]
; [else-branch: 178 | !(0 <= xs@391@01[i@445@01]) | live]
(push) ; 10
; [then-branch: 178 | 0 <= xs@391@01[i@445@01]]
(assert (<= 0 (Seq_index xs@391@01 i@445@01)))
; [eval] xs[i] < max
; [eval] xs[i]
(push) ; 11
(assert (not (>= i@445@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(push) ; 10
; [else-branch: 178 | !(0 <= xs@391@01[i@445@01])]
(assert (not (<= 0 (Seq_index xs@391@01 i@445@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 177 | !(i@445@01 < |xs@391@01| && 0 <= i@445@01)]
(assert (not (and (< i@445@01 (Seq_length xs@391@01)) (<= 0 i@445@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 6
(assert (not (forall ((i@445@01 Int)) (!
  (implies
    (and (< i@445@01 (Seq_length xs@391@01)) (<= 0 i@445@01))
    (and
      (< (Seq_index xs@391@01 i@445@01) max@390@01)
      (<= 0 (Seq_index xs@391@01 i@445@01))))
  :pattern ((Seq_index xs@391@01 i@445@01))
  :qid |prog.l518|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((i@445@01 Int)) (!
  (implies
    (and (< i@445@01 (Seq_length xs@391@01)) (<= 0 i@445@01))
    (and
      (< (Seq_index xs@391@01 i@445@01) max@390@01)
      (<= 0 (Seq_index xs@391@01 i@445@01))))
  :pattern ((Seq_index xs@391@01 i@445@01))
  :qid |prog.l518|)))
(declare-const $t@446@01 $Snap)
(assert (= $t@446@01 ($Snap.combine ($Snap.first $t@446@01) ($Snap.second $t@446@01))))
(assert (=
  ($Snap.second $t@446@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@446@01))
    ($Snap.second ($Snap.second $t@446@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@446@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@446@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@446@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@446@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@446@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@446@01))))
  $Snap.unit))
; [eval] diz.channel_hist_value == old(diz.channel_hist_value)
; [eval] old(diz.channel_hist_value)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@446@01))
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01))))))))
  $Snap.unit))
; [eval] diz.results_hist_value == old(diz.results_hist_value)
; [eval] old(diz.results_hist_value)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01))))))
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@422@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01)))))))))
  $Snap.unit))
; [eval] 0 < size
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01))))))))))
  $Snap.unit))
; [eval] |diz.channel_hist_init| == size
; [eval] |diz.channel_hist_init|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@446@01)))))
  size@389@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01)))))))))))
  $Snap.unit))
; [eval] |diz.results_hist_init| == size
; [eval] |diz.results_hist_init|
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01)))))))))
  size@389@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01))))))))))))
  $Snap.unit))
; [eval] |xs| == size
; [eval] |xs|
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01)))))))))))))
  $Snap.unit))
; [eval] (forall i: Int :: { diz.results_hist_init[i] } 0 <= i && i < |diz.results_hist_init| ==> diz.results_hist_init[i] == diz.results_hist_init[method_Program_maxint__Sequence$Integer$__Integer__Integer(xs, 0, 0)])
(declare-const i@447@01 Int)
(push) ; 6
; [eval] 0 <= i && i < |diz.results_hist_init| ==> diz.results_hist_init[i] == diz.results_hist_init[method_Program_maxint__Sequence$Integer$__Integer__Integer(xs, 0, 0)]
; [eval] 0 <= i && i < |diz.results_hist_init|
; [eval] 0 <= i
(push) ; 7
; [then-branch: 179 | 0 <= i@447@01 | live]
; [else-branch: 179 | !(0 <= i@447@01) | live]
(push) ; 8
; [then-branch: 179 | 0 <= i@447@01]
(assert (<= 0 i@447@01))
; [eval] i < |diz.results_hist_init|
; [eval] |diz.results_hist_init|
(pop) ; 8
(push) ; 8
; [else-branch: 179 | !(0 <= i@447@01)]
(assert (not (<= 0 i@447@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 180 | i@447@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@446@01)))))))| && 0 <= i@447@01 | live]
; [else-branch: 180 | !(i@447@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@446@01)))))))| && 0 <= i@447@01) | live]
(push) ; 8
; [then-branch: 180 | i@447@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@446@01)))))))| && 0 <= i@447@01]
(assert (and
  (<
    i@447@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01))))))))))
  (<= 0 i@447@01)))
; [eval] diz.results_hist_init[i] == diz.results_hist_init[method_Program_maxint__Sequence$Integer$__Integer__Integer(xs, 0, 0)]
; [eval] diz.results_hist_init[i]
(push) ; 9
(assert (not (>= i@447@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] diz.results_hist_init[method_Program_maxint__Sequence$Integer$__Integer__Integer(xs, 0, 0)]
; [eval] method_Program_maxint__Sequence$Integer$__Integer__Integer(xs, 0, 0)
(push) ; 9
; [eval] 0 <= i
; [eval] i <= |xs|
; [eval] |xs|
(push) ; 10
(assert (not (<= 0 (Seq_length xs@391@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 (Seq_length xs@391@01)))
; [eval] 0 <= j
; [eval] j < |xs|
; [eval] |xs|
(push) ; 10
(assert (not (< 0 (Seq_length xs@391@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (< 0 (Seq_length xs@391@01)))
; [eval] (forall l: Int :: 0 <= l && l < i ==> xs[l] <= xs[j])
(declare-const l@448@01 Int)
(push) ; 10
; [eval] 0 <= l && l < i ==> xs[l] <= xs[j]
; [eval] 0 <= l && l < i
; [eval] 0 <= l
(push) ; 11
; [then-branch: 181 | 0 <= l@448@01 | live]
; [else-branch: 181 | !(0 <= l@448@01) | live]
(push) ; 12
; [then-branch: 181 | 0 <= l@448@01]
(assert (<= 0 l@448@01))
; [eval] l < i
(pop) ; 12
(push) ; 12
; [else-branch: 181 | !(0 <= l@448@01)]
(assert (not (<= 0 l@448@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
; [then-branch: 182 | l@448@01 < 0 && 0 <= l@448@01 | live]
; [else-branch: 182 | !(l@448@01 < 0 && 0 <= l@448@01) | live]
(push) ; 12
; [then-branch: 182 | l@448@01 < 0 && 0 <= l@448@01]
(assert (and (< l@448@01 0) (<= 0 l@448@01)))
; [eval] xs[l] <= xs[j]
; [eval] xs[l]
(push) ; 13
(assert (not (>= l@448@01 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (< l@448@01 (Seq_length xs@391@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] xs[j]
(pop) ; 12
(push) ; 12
; [else-branch: 182 | !(l@448@01 < 0 && 0 <= l@448@01)]
(assert (not (and (< l@448@01 0) (<= 0 l@448@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 10
(assert (not (forall ((l@448@01 Int)) (!
  (implies
    (and (< l@448@01 0) (<= 0 l@448@01))
    (<= (Seq_index xs@391@01 l@448@01) (Seq_index xs@391@01 0)))
  
  :qid |prog.l217|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((l@448@01 Int)) (!
  (implies
    (and (< l@448@01 0) (<= 0 l@448@01))
    (<= (Seq_index xs@391@01 l@448@01) (Seq_index xs@391@01 0)))
  
  :qid |prog.l217|)))
(pop) ; 9
; Joined path conditions
(assert (and
  (<= 0 (Seq_length xs@391@01))
  (< 0 (Seq_length xs@391@01))
  (forall ((l@448@01 Int)) (!
    (implies
      (and (< l@448@01 0) (<= 0 l@448@01))
      (<= (Seq_index xs@391@01 l@448@01) (Seq_index xs@391@01 0)))
    
    :qid |prog.l217|))))
(push) ; 9
(assert (not (>=
  (method_Program_maxint__Sequence$Integer$__Integer__Integer ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) xs@391@01 0 0)
  0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (<
  (method_Program_maxint__Sequence$Integer$__Integer__Integer ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) xs@391@01 0 0)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 180 | !(i@447@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@446@01)))))))| && 0 <= i@447@01)]
(assert (not
  (and
    (<
      i@447@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01))))))))))
    (<= 0 i@447@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (implies
  (and
    (<
      i@447@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01))))))))))
    (<= 0 i@447@01))
  (and
    (<
      i@447@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01))))))))))
    (<= 0 i@447@01)
    (<= 0 (Seq_length xs@391@01))
    (< 0 (Seq_length xs@391@01))
    (forall ((l@448@01 Int)) (!
      (implies
        (and (< l@448@01 0) (<= 0 l@448@01))
        (<= (Seq_index xs@391@01 l@448@01) (Seq_index xs@391@01 0)))
      
      :qid |prog.l217|)))))
; Joined path conditions
; [eval] diz.results_hist_init[i]
(push) ; 7
(assert (not (>= i@447@01 0)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@447@01 Int)) (!
  (implies
    (and
      (<
        i@447@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01))))))))))
      (<= 0 i@447@01))
    (and
      (<
        i@447@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01))))))))))
      (<= 0 i@447@01)
      (<= 0 (Seq_length xs@391@01))
      (< 0 (Seq_length xs@391@01))
      (forall ((l@448@01 Int)) (!
        (implies
          (and (< l@448@01 0) (<= 0 l@448@01))
          (<= (Seq_index xs@391@01 l@448@01) (Seq_index xs@391@01 0)))
        
        :qid |prog.l217|))))
  :pattern ()
  :qid |prog.l531-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((l@448@01 Int)) (!
  (implies
    (and (< l@448@01 0) (<= 0 l@448@01))
    (<= (Seq_index xs@391@01 l@448@01) (Seq_index xs@391@01 0)))
  
  :qid |prog.l217|)))
(assert (forall ((i@447@01 Int)) (!
  (implies
    (and
      (<
        i@447@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01))))))))))
      (<= 0 i@447@01))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01))))))))
        i@447@01)
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01))))))))
        (method_Program_maxint__Sequence$Integer$__Integer__Integer ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) xs@391@01 0 0))))
  :pattern ()
  :qid |prog.l531|)))
; [eval] new_frac(write)
(push) ; 6
; [eval] 0 / 1 < x
(push) ; 7
(assert (not (not (= 1 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (< $Perm.No $Perm.Write)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (< $Perm.No $Perm.Write))
; [eval] x <= 1 / 1
(push) ; 7
(assert (not (not (= 1 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
; Joined path conditions
(assert (< $Perm.No $Perm.Write))
; [eval] p_method_Future_Start__Integer__Sequence$Integer$__Integer(size, xs, max)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; assert acc(hist_idle(f__24, new_frac(write), p_method_Future_Spawn__Integer__Integer__Sequence$Integer$__Integer(0, size, xs, max)), write)
; [eval] new_frac(write)
(push) ; 6
; [eval] 0 / 1 < x
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 1 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] x <= 1 / 1
(push) ; 7
(assert (not (not (= 1 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
; Joined path conditions
; [eval] p_method_Future_Spawn__Integer__Integer__Sequence$Integer$__Integer(0, size, xs, max)
(set-option :timeout 10)
(push) ; 6
(assert (not (=
  (p_method_Future_Start__Integer__Sequence$Integer$__Integer<Process> size@389@01 xs@391@01 max@390@01)
  (p_method_Future_Spawn__Integer__Integer__Sequence$Integer$__Integer<Process> 0 size@389@01 xs@391@01 max@390@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [exec]
; pr__30 := constructor_Program_Program__Future__Integer__Integer(current_thread_id, globals, f__24, size, max)
; [eval] 0 <= current_thread_id
; [eval] 0 < max
; [eval] f != null
; [eval] |f.results_hist_value| == |f.channel_hist_value|
; [eval] |f.results_hist_value|
; [eval] |f.channel_hist_value|
(set-option :timeout 0)
(push) ; 6
(assert (not (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01)))))))
  (Seq_length ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@446@01))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01)))))))
  (Seq_length ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@446@01)))))
; [eval] |f.channel_hist_value| == size
; [eval] |f.channel_hist_value|
(push) ; 6
(assert (not (=
  (Seq_length ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@446@01)))
  size@389@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@446@01)))
  size@389@01))
; [eval] (forall i: Int, j: Int :: { f.channel_hist_value[i][j] } 0 <= i && (i < |f.channel_hist_value| && (0 <= j && j < |f.channel_hist_value[i]|)) ==> 0 <= f.channel_hist_value[i][j] && f.channel_hist_value[i][j] < max)
(declare-const i@449@01 Int)
(declare-const j@450@01 Int)
(push) ; 6
; [eval] 0 <= i && (i < |f.channel_hist_value| && (0 <= j && j < |f.channel_hist_value[i]|)) ==> 0 <= f.channel_hist_value[i][j] && f.channel_hist_value[i][j] < max
; [eval] 0 <= i && (i < |f.channel_hist_value| && (0 <= j && j < |f.channel_hist_value[i]|))
; [eval] 0 <= i
(push) ; 7
; [then-branch: 183 | 0 <= i@449@01 | live]
; [else-branch: 183 | !(0 <= i@449@01) | live]
(push) ; 8
; [then-branch: 183 | 0 <= i@449@01]
(assert (<= 0 i@449@01))
; [eval] i < |f.channel_hist_value|
; [eval] |f.channel_hist_value|
(push) ; 9
; [then-branch: 184 | i@449@01 < |First:($t@446@01)| | live]
; [else-branch: 184 | !(i@449@01 < |First:($t@446@01)|) | live]
(push) ; 10
; [then-branch: 184 | i@449@01 < |First:($t@446@01)|]
(assert (<
  i@449@01
  (Seq_length ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@446@01)))))
; [eval] 0 <= j
(push) ; 11
; [then-branch: 185 | 0 <= j@450@01 | live]
; [else-branch: 185 | !(0 <= j@450@01) | live]
(push) ; 12
; [then-branch: 185 | 0 <= j@450@01]
(assert (<= 0 j@450@01))
; [eval] j < |f.channel_hist_value[i]|
; [eval] |f.channel_hist_value[i]|
; [eval] f.channel_hist_value[i]
(push) ; 13
(assert (not (>= i@449@01 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
(push) ; 12
; [else-branch: 185 | !(0 <= j@450@01)]
(assert (not (<= 0 j@450@01)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 184 | !(i@449@01 < |First:($t@446@01)|)]
(assert (not
  (<
    i@449@01
    (Seq_length ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@446@01))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 183 | !(0 <= i@449@01)]
(assert (not (<= 0 i@449@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 186 | j@450@01 < |First:($t@446@01)[i@449@01]| && 0 <= j@450@01 && i@449@01 < |First:($t@446@01)| && 0 <= i@449@01 | live]
; [else-branch: 186 | !(j@450@01 < |First:($t@446@01)[i@449@01]| && 0 <= j@450@01 && i@449@01 < |First:($t@446@01)| && 0 <= i@449@01) | live]
(push) ; 8
; [then-branch: 186 | j@450@01 < |First:($t@446@01)[i@449@01]| && 0 <= j@450@01 && i@449@01 < |First:($t@446@01)| && 0 <= i@449@01]
(assert (and
  (and
    (and
      (<
        j@450@01
        (Seq_length
          (Seq_index
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@446@01))
            i@449@01)))
      (<= 0 j@450@01))
    (<
      i@449@01
      (Seq_length ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@446@01)))))
  (<= 0 i@449@01)))
; [eval] 0 <= f.channel_hist_value[i][j] && f.channel_hist_value[i][j] < max
; [eval] 0 <= f.channel_hist_value[i][j]
; [eval] f.channel_hist_value[i][j]
; [eval] f.channel_hist_value[i]
(push) ; 9
(assert (not (>= i@449@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= j@450@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch: 187 | 0 <= First:($t@446@01)[i@449@01][j@450@01] | live]
; [else-branch: 187 | !(0 <= First:($t@446@01)[i@449@01][j@450@01]) | live]
(push) ; 10
; [then-branch: 187 | 0 <= First:($t@446@01)[i@449@01][j@450@01]]
(assert (<=
  0
  (Seq_index
    (Seq_index
      ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@446@01))
      i@449@01)
    j@450@01)))
; [eval] f.channel_hist_value[i][j] < max
; [eval] f.channel_hist_value[i][j]
; [eval] f.channel_hist_value[i]
(push) ; 11
(assert (not (>= i@449@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>= j@450@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(push) ; 10
; [else-branch: 187 | !(0 <= First:($t@446@01)[i@449@01][j@450@01])]
(assert (not
  (<=
    0
    (Seq_index
      (Seq_index
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@446@01))
        i@449@01)
      j@450@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 186 | !(j@450@01 < |First:($t@446@01)[i@449@01]| && 0 <= j@450@01 && i@449@01 < |First:($t@446@01)| && 0 <= i@449@01)]
(assert (not
  (and
    (and
      (and
        (<
          j@450@01
          (Seq_length
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@446@01))
              i@449@01)))
        (<= 0 j@450@01))
      (<
        i@449@01
        (Seq_length ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@446@01)))))
    (<= 0 i@449@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (implies
  (and
    (and
      (and
        (<
          j@450@01
          (Seq_length
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@446@01))
              i@449@01)))
        (<= 0 j@450@01))
      (<
        i@449@01
        (Seq_length ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@446@01)))))
    (<= 0 i@449@01))
  (and
    (<
      j@450@01
      (Seq_length
        (Seq_index
          ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@446@01))
          i@449@01)))
    (<= 0 j@450@01)
    (<
      i@449@01
      (Seq_length ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@446@01))))
    (<= 0 i@449@01))))
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@449@01 Int) (j@450@01 Int)) (!
  (implies
    (and
      (and
        (and
          (<
            j@450@01
            (Seq_length
              (Seq_index
                ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@446@01))
                i@449@01)))
          (<= 0 j@450@01))
        (<
          i@449@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@446@01)))))
      (<= 0 i@449@01))
    (and
      (<
        j@450@01
        (Seq_length
          (Seq_index
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@446@01))
            i@449@01)))
      (<= 0 j@450@01)
      (<
        i@449@01
        (Seq_length ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@446@01))))
      (<= 0 i@449@01)))
  :pattern ((Seq_index
    (Seq_index
      ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@446@01))
      i@449@01)
    j@450@01))
  :qid |prog.l547-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 6
(assert (not (forall ((i@449@01 Int) (j@450@01 Int)) (!
  (implies
    (and
      (and
        (and
          (<
            j@450@01
            (Seq_length
              (Seq_index
                ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@446@01))
                i@449@01)))
          (<= 0 j@450@01))
        (<
          i@449@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@446@01)))))
      (<= 0 i@449@01))
    (and
      (<
        (Seq_index
          (Seq_index
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@446@01))
            i@449@01)
          j@450@01)
        max@390@01)
      (<=
        0
        (Seq_index
          (Seq_index
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@446@01))
            i@449@01)
          j@450@01))))
  :pattern ((Seq_index
    (Seq_index
      ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@446@01))
      i@449@01)
    j@450@01))
  :qid |prog.l547|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((i@449@01 Int) (j@450@01 Int)) (!
  (implies
    (and
      (and
        (and
          (<
            j@450@01
            (Seq_length
              (Seq_index
                ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@446@01))
                i@449@01)))
          (<= 0 j@450@01))
        (<
          i@449@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@446@01)))))
      (<= 0 i@449@01))
    (and
      (<
        (Seq_index
          (Seq_index
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@446@01))
            i@449@01)
          j@450@01)
        max@390@01)
      (<=
        0
        (Seq_index
          (Seq_index
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@446@01))
            i@449@01)
          j@450@01))))
  :pattern ((Seq_index
    (Seq_index
      ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@446@01))
      i@449@01)
    j@450@01))
  :qid |prog.l547|)))
(declare-const sys__result@451@01 $Ref)
(declare-const $t@452@01 $Snap)
(assert (= $t@452@01 ($Snap.combine ($Snap.first $t@452@01) ($Snap.second $t@452@01))))
(assert (= ($Snap.first $t@452@01) $Snap.unit))
; [eval] sys__result != null
(assert (not (= sys__result@451@01 $Ref.null)))
(assert (=
  ($Snap.second $t@452@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@452@01))
    ($Snap.second ($Snap.second $t@452@01)))))
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second $t@452@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@452@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@452@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@452@01))) $Snap.unit))
; [eval] sys__result.field_Program_f == f
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@452@01)))
  sys__result@413@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@452@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@452@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@452@01)))))))
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@452@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@452@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@452@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@452@01)))))
  $Snap.unit))
; [eval] sys__result.field_Program_size == size
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@452@01)))))
  size@389@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@452@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@452@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@452@01)))))))))
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@452@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@452@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@452@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@452@01)))))))
  $Snap.unit))
; [eval] sys__result.field_Program_maxvalue == max
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@452@01)))))))
  max@390@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@452@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@452@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@452@01)))))))))))
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@452@01))))))))
  $Snap.unit))
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@452@01))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; __flatten_93__35 := new_frac(1 / 2)
; [eval] new_frac(1 / 2)
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [eval] 0 / 1 < x
(push) ; 7
(assert (not (not (= 1 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (< $Perm.No (/ (to_real 1) (to_real 2)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (< $Perm.No (/ (to_real 1) (to_real 2))))
; [eval] x <= 1 / 1
(push) ; 7
(assert (not (not (= 1 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<= (/ (to_real 1) (to_real 2)) $Perm.Write)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<= (/ (to_real 1) (to_real 2)) $Perm.Write))
(pop) ; 6
; Joined path conditions
(assert (and
  (< $Perm.No (/ (to_real 1) (to_real 2)))
  (<= (/ (to_real 1) (to_real 2)) $Perm.Write)))
(declare-const __flatten_93__35@453@01 frac)
(assert (=
  __flatten_93__35@453@01
  (new_frac ($Snap.combine $Snap.unit $Snap.unit) (/ (to_real 1) (to_real 2)))))
; [exec]
; __flatten_94__36 := new_frac(write)
; [eval] new_frac(write)
(push) ; 6
; [eval] 0 / 1 < x
(push) ; 7
(assert (not (not (= 1 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] x <= 1 / 1
(push) ; 7
(assert (not (not (= 1 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
; Joined path conditions
(declare-const __flatten_94__36@454@01 frac)
(assert (=
  __flatten_94__36@454@01
  (new_frac ($Snap.combine $Snap.unit $Snap.unit) $Perm.Write)))
; [exec]
; method_Main_spawn__Integer__Program__Sequence$Integer$(current_thread_id, globals, 0, pr__30, xs, __flatten_93__35, __flatten_94__36)
; [eval] frac_val(q1) != none
; [eval] frac_val(q1)
(push) ; 6
(assert (not (not (= (frac_val<Perm> __flatten_93__35@453@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (not (= (frac_val<Perm> __flatten_93__35@453@01) $Perm.No)))
; [eval] frac_val(q2) != none
; [eval] frac_val(q2)
(push) ; 6
(assert (not (not (= (frac_val<Perm> __flatten_94__36@454@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (not (= (frac_val<Perm> __flatten_94__36@454@01) $Perm.No)))
; [eval] pr != null
; [eval] frac_val(q1)
(push) ; 6
(assert (not (or
  (= (frac_val<Perm> __flatten_93__35@453@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> __flatten_93__35@453@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 6
(assert (not (=
  (-
    (/ (to_real 1) (to_real 2))
    ($Perm.min
      (/ (to_real 1) (to_real 2))
      (frac_val<Perm> __flatten_93__35@453@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(assert (not (or
  (=
    (-
      (frac_val<Perm> __flatten_93__35@453@01)
      ($Perm.min
        (/ (to_real 1) (to_real 2))
        (frac_val<Perm> __flatten_93__35@453@01)))
    $Perm.No)
  (<
    (-
      (frac_val<Perm> __flatten_93__35@453@01)
      ($Perm.min
        (/ (to_real 1) (to_real 2))
        (frac_val<Perm> __flatten_93__35@453@01)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] frac_val(q1)
(push) ; 6
(assert (not (or
  (= (frac_val<Perm> __flatten_93__35@453@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> __flatten_93__35@453@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 6
(assert (not (=
  (-
    (/ (to_real 1) (to_real 2))
    ($Perm.min
      (/ (to_real 1) (to_real 2))
      (frac_val<Perm> __flatten_93__35@453@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(assert (not (or
  (=
    (-
      (frac_val<Perm> __flatten_93__35@453@01)
      ($Perm.min
        (/ (to_real 1) (to_real 2))
        (frac_val<Perm> __flatten_93__35@453@01)))
    $Perm.No)
  (<
    (-
      (frac_val<Perm> __flatten_93__35@453@01)
      ($Perm.min
        (/ (to_real 1) (to_real 2))
        (frac_val<Perm> __flatten_93__35@453@01)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] pr.field_Program_f != null
(push) ; 6
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@452@01)))
    $Ref.null))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@452@01)))
    $Ref.null)))
; [eval] frac_val(q1)
(push) ; 6
(assert (not (or
  (= (frac_val<Perm> __flatten_93__35@453@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> __flatten_93__35@453@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 6
(assert (not (=
  (-
    (/ (to_real 1) (to_real 2))
    ($Perm.min
      (/ (to_real 1) (to_real 2))
      (frac_val<Perm> __flatten_93__35@453@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(assert (not (or
  (=
    (-
      (frac_val<Perm> __flatten_93__35@453@01)
      ($Perm.min
        (/ (to_real 1) (to_real 2))
        (frac_val<Perm> __flatten_93__35@453@01)))
    $Perm.No)
  (<
    (-
      (frac_val<Perm> __flatten_93__35@453@01)
      ($Perm.min
        (/ (to_real 1) (to_real 2))
        (frac_val<Perm> __flatten_93__35@453@01)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] frac_val(q1)
(push) ; 6
(assert (not (or
  (= (frac_val<Perm> __flatten_93__35@453@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> __flatten_93__35@453@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 6
(assert (not (=
  (-
    (/ (to_real 1) (to_real 2))
    ($Perm.min
      (/ (to_real 1) (to_real 2))
      (frac_val<Perm> __flatten_93__35@453@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(assert (not (or
  (=
    (-
      (frac_val<Perm> __flatten_93__35@453@01)
      ($Perm.min
        (/ (to_real 1) (to_real 2))
        (frac_val<Perm> __flatten_93__35@453@01)))
    $Perm.No)
  (<
    (-
      (frac_val<Perm> __flatten_93__35@453@01)
      ($Perm.min
        (/ (to_real 1) (to_real 2))
        (frac_val<Perm> __flatten_93__35@453@01)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= rank
; [eval] rank <= pr.field_Program_size
(push) ; 6
(assert (not (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@452@01))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@452@01)))))))
; [eval] |xs| == pr.field_Program_size
; [eval] |xs|
(push) ; 6
(assert (not (=
  (Seq_length xs@391@01)
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@452@01))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length xs@391@01)
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@452@01)))))))
; [eval] (forall j: Int :: { xs[j] } 0 <= j && j < |xs| ==> 0 <= xs[j] && xs[j] < pr.field_Program_maxvalue)
(declare-const j@455@01 Int)
(push) ; 6
; [eval] 0 <= j && j < |xs| ==> 0 <= xs[j] && xs[j] < pr.field_Program_maxvalue
; [eval] 0 <= j && j < |xs|
; [eval] 0 <= j
(push) ; 7
; [then-branch: 188 | 0 <= j@455@01 | live]
; [else-branch: 188 | !(0 <= j@455@01) | live]
(push) ; 8
; [then-branch: 188 | 0 <= j@455@01]
(assert (<= 0 j@455@01))
; [eval] j < |xs|
; [eval] |xs|
(pop) ; 8
(push) ; 8
; [else-branch: 188 | !(0 <= j@455@01)]
(assert (not (<= 0 j@455@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 189 | j@455@01 < |xs@391@01| && 0 <= j@455@01 | live]
; [else-branch: 189 | !(j@455@01 < |xs@391@01| && 0 <= j@455@01) | live]
(push) ; 8
; [then-branch: 189 | j@455@01 < |xs@391@01| && 0 <= j@455@01]
(assert (and (< j@455@01 (Seq_length xs@391@01)) (<= 0 j@455@01)))
; [eval] 0 <= xs[j] && xs[j] < pr.field_Program_maxvalue
; [eval] 0 <= xs[j]
; [eval] xs[j]
(push) ; 9
(assert (not (>= j@455@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch: 190 | 0 <= xs@391@01[j@455@01] | live]
; [else-branch: 190 | !(0 <= xs@391@01[j@455@01]) | live]
(push) ; 10
; [then-branch: 190 | 0 <= xs@391@01[j@455@01]]
(assert (<= 0 (Seq_index xs@391@01 j@455@01)))
; [eval] xs[j] < pr.field_Program_maxvalue
; [eval] xs[j]
(push) ; 11
(assert (not (>= j@455@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(push) ; 10
; [else-branch: 190 | !(0 <= xs@391@01[j@455@01])]
(assert (not (<= 0 (Seq_index xs@391@01 j@455@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 189 | !(j@455@01 < |xs@391@01| && 0 <= j@455@01)]
(assert (not (and (< j@455@01 (Seq_length xs@391@01)) (<= 0 j@455@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 6
(assert (not (forall ((j@455@01 Int)) (!
  (implies
    (and (< j@455@01 (Seq_length xs@391@01)) (<= 0 j@455@01))
    (and
      (<
        (Seq_index xs@391@01 j@455@01)
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@452@01))))))))
      (<= 0 (Seq_index xs@391@01 j@455@01))))
  :pattern ((Seq_index xs@391@01 j@455@01))
  :qid |prog.l940|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((j@455@01 Int)) (!
  (implies
    (and (< j@455@01 (Seq_length xs@391@01)) (<= 0 j@455@01))
    (and
      (<
        (Seq_index xs@391@01 j@455@01)
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@452@01))))))))
      (<= 0 (Seq_index xs@391@01 j@455@01))))
  :pattern ((Seq_index xs@391@01 j@455@01))
  :qid |prog.l940|)))
; [eval] 0 <= current_thread_id
; [eval] p_method_Future_Spawn__Integer__Integer__Sequence$Integer$__Integer(rank, pr.field_Program_size, xs, pr.field_Program_maxvalue)
(set-option :timeout 10)
(push) ; 6
(assert (not (and
  (=
    sys__result@413@01
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@452@01))))
  (=
    (new_frac ($Snap.combine $Snap.unit $Snap.unit) $Perm.Write)
    __flatten_94__36@454@01)
  (=
    (p_method_Future_Start__Integer__Sequence$Integer$__Integer<Process> size@389@01 xs@391@01 max@390@01)
    (p_method_Future_Spawn__Integer__Integer__Sequence$Integer$__Integer<Process> 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@452@01))))) xs@391@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@452@01))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const $t@456@01 $Snap)
(assert (= $t@456@01 ($Snap.combine ($Snap.first $t@456@01) ($Snap.second $t@456@01))))
(assert (= ($Snap.first $t@456@01) $Snap.unit))
; [eval] frac_val(q1) != none
; [eval] frac_val(q1)
(assert (=
  ($Snap.second $t@456@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@456@01))
    ($Snap.second ($Snap.second $t@456@01)))))
(assert (= ($Snap.first ($Snap.second $t@456@01)) $Snap.unit))
; [eval] frac_val(q2) != none
; [eval] frac_val(q2)
(assert (=
  ($Snap.second ($Snap.second $t@456@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@456@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@456@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@456@01))) $Snap.unit))
; [eval] pr != null
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@456@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@456@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01)))))))
; [eval] frac_val(q1)
(assert (<= $Perm.No (frac_val<Perm> __flatten_93__35@453@01)))
(assert (<= (frac_val<Perm> __flatten_93__35@453@01) $Perm.Write))
(assert (implies
  (< $Perm.No (frac_val<Perm> __flatten_93__35@453@01))
  (not (= sys__result@451@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01))))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01))))))
  $Snap.unit))
; [eval] pr.field_Program_f != null
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> __flatten_93__35@453@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01))))))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01)))))))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01)))))))))
  $Snap.unit))
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> __flatten_93__35@453@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01))))))))))
  $Snap.unit))
; [eval] 0 <= rank
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01)))))))))))
  $Snap.unit))
; [eval] rank <= pr.field_Program_size
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> __flatten_93__35@453@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@456@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01))))))))))))
  $Snap.unit))
; [eval] |xs| == pr.field_Program_size
; [eval] |xs|
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> __flatten_93__35@453@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length xs@391@01)
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@456@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01)))))))))))))
  $Snap.unit))
; [eval] (forall j: Int :: { xs[j] } 0 <= j && j < |xs| ==> 0 <= xs[j] && xs[j] < pr.field_Program_maxvalue)
(declare-const j@457@01 Int)
(push) ; 6
; [eval] 0 <= j && j < |xs| ==> 0 <= xs[j] && xs[j] < pr.field_Program_maxvalue
; [eval] 0 <= j && j < |xs|
; [eval] 0 <= j
(push) ; 7
; [then-branch: 191 | 0 <= j@457@01 | live]
; [else-branch: 191 | !(0 <= j@457@01) | live]
(push) ; 8
; [then-branch: 191 | 0 <= j@457@01]
(assert (<= 0 j@457@01))
; [eval] j < |xs|
; [eval] |xs|
(pop) ; 8
(push) ; 8
; [else-branch: 191 | !(0 <= j@457@01)]
(assert (not (<= 0 j@457@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 192 | j@457@01 < |xs@391@01| && 0 <= j@457@01 | live]
; [else-branch: 192 | !(j@457@01 < |xs@391@01| && 0 <= j@457@01) | live]
(push) ; 8
; [then-branch: 192 | j@457@01 < |xs@391@01| && 0 <= j@457@01]
(assert (and (< j@457@01 (Seq_length xs@391@01)) (<= 0 j@457@01)))
; [eval] 0 <= xs[j] && xs[j] < pr.field_Program_maxvalue
; [eval] 0 <= xs[j]
; [eval] xs[j]
(set-option :timeout 0)
(push) ; 9
(assert (not (>= j@457@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch: 193 | 0 <= xs@391@01[j@457@01] | live]
; [else-branch: 193 | !(0 <= xs@391@01[j@457@01]) | live]
(push) ; 10
; [then-branch: 193 | 0 <= xs@391@01[j@457@01]]
(assert (<= 0 (Seq_index xs@391@01 j@457@01)))
; [eval] xs[j] < pr.field_Program_maxvalue
; [eval] xs[j]
(push) ; 11
(assert (not (>= j@457@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 11
(assert (not (< $Perm.No (frac_val<Perm> __flatten_93__35@453@01))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(push) ; 10
; [else-branch: 193 | !(0 <= xs@391@01[j@457@01])]
(assert (not (<= 0 (Seq_index xs@391@01 j@457@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 192 | !(j@457@01 < |xs@391@01| && 0 <= j@457@01)]
(assert (not (and (< j@457@01 (Seq_length xs@391@01)) (<= 0 j@457@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((j@457@01 Int)) (!
  (implies
    (and (< j@457@01 (Seq_length xs@391@01)) (<= 0 j@457@01))
    (and
      (<
        (Seq_index xs@391@01 j@457@01)
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01)))))))))
      (<= 0 (Seq_index xs@391@01 j@457@01))))
  :pattern ((Seq_index xs@391@01 j@457@01))
  :qid |prog.l953|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01))))))))))))))
  $Snap.unit))
; [eval] pr == old(pr)
; [eval] old(pr)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01)))))))))))))))
  $Snap.unit))
; [eval] pr.field_Program_size == old(pr.field_Program_size)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> __flatten_93__35@453@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] old(pr.field_Program_size)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@456@01)))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@452@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01))))))))))))))))
  $Snap.unit))
; [eval] pr.field_Program_maxvalue == old(pr.field_Program_maxvalue)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> __flatten_93__35@453@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] old(pr.field_Program_maxvalue)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01))))))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@452@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01)))))))))))))))))
  $Snap.unit))
; [eval] pr.field_Program_f == old(pr.field_Program_f)
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> __flatten_93__35@453@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] old(pr.field_Program_f)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second $t@452@01)))))
(push) ; 6
(assert (not (< $Perm.No (frac_val<Perm> __flatten_93__35@453@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] p_empty()
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(method_Program_lock_invariant(pr__30, globals), write)
(declare-const $t@458@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(method_Program_lock_invariant(pr__30, globals), write)
(assert (= $t@458@01 ($Snap.combine ($Snap.first $t@458@01) ($Snap.second $t@458@01))))
(assert (= ($Snap.first $t@458@01) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@458@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@458@01))
    ($Snap.second ($Snap.second $t@458@01)))))
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (< $Perm.No (frac_val<Perm> __flatten_93__35@453@01))
  (=
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@458@01)))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01))))))))))))
(assert (<=
  $Perm.No
  (+ (frac_val<Perm> __flatten_93__35@453@01) (/ (to_real 1) (to_real 2)))))
(assert (<=
  (+ (frac_val<Perm> __flatten_93__35@453@01) (/ (to_real 1) (to_real 2)))
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (+ (frac_val<Perm> __flatten_93__35@453@01) (/ (to_real 1) (to_real 2))))
  (not (= sys__result@451@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@458@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@458@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@458@01))))))
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (< $Perm.No (frac_val<Perm> __flatten_93__35@453@01))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@458@01))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@456@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@458@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@458@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01)))))))
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (< $Perm.No (frac_val<Perm> __flatten_93__35@453@01))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@458@01)))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01)))))
  $Snap.unit))
; [eval] 0 < diz.field_Program_maxvalue
(set-option :timeout 10)
(push) ; 6
(assert (not (<
  $Perm.No
  (+ (frac_val<Perm> __flatten_93__35@453@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (<
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@458@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01)))))))))
(push) ; 6
(assert (not (<
  $Perm.No
  (+ (frac_val<Perm> __flatten_93__35@453@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@458@01))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@458@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 194 | First:(Second:($t@458@01)) | live]
; [else-branch: 194 | !(First:(Second:($t@458@01))) | dead]
(push) ; 6
; [then-branch: 194 | First:(Second:($t@458@01))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@458@01))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01)))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01))))))))))
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (< $Perm.No (frac_val<Perm> __flatten_93__35@453@01))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01)))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01)))))))
  $Snap.unit))
; [eval] diz.field_Program_f != null
(set-option :timeout 10)
(push) ; 7
(assert (not (<
  $Perm.No
  (+ (frac_val<Perm> __flatten_93__35@453@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01))))))))))
(push) ; 7
(assert (not (<
  $Perm.No
  (+ (frac_val<Perm> __flatten_93__35@453@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@458@01))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 195 | First:(Second:($t@458@01)) | live]
; [else-branch: 195 | !(First:(Second:($t@458@01))) | dead]
(push) ; 7
; [then-branch: 195 | First:(Second:($t@458@01))]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01)))))))))))
(push) ; 8
(assert (not (<
  $Perm.No
  (+ (frac_val<Perm> __flatten_93__35@453@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01)))))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01))))))))))))
(push) ; 8
(assert (not (<
  $Perm.No
  (+ (frac_val<Perm> __flatten_93__35@453@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01)))))))))
  $Snap.unit))
; [eval] diz.field_Program_size == |diz.field_Program_f.channel_hist_value|
(push) ; 8
(assert (not (<
  $Perm.No
  (+ (frac_val<Perm> __flatten_93__35@453@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] |diz.field_Program_f.channel_hist_value|
(push) ; 8
(assert (not (<
  $Perm.No
  (+ (frac_val<Perm> __flatten_93__35@453@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@458@01))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01)))))))))))
(push) ; 8
(assert (not (<
  $Perm.No
  (+ (frac_val<Perm> __flatten_93__35@453@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@458@01))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 196 | First:(Second:($t@458@01)) | live]
; [else-branch: 196 | !(First:(Second:($t@458@01))) | dead]
(push) ; 8
; [then-branch: 196 | First:(Second:($t@458@01))]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01)))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01))))))))))))
(push) ; 9
(assert (not (<
  $Perm.No
  (+ (frac_val<Perm> __flatten_93__35@453@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01))))))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01)))))))))))))
(push) ; 9
(assert (not (<
  $Perm.No
  (+ (frac_val<Perm> __flatten_93__35@453@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01))))))))))
  $Snap.unit))
; [eval] diz.field_Program_size == |diz.field_Program_f.results_hist_value|
(push) ; 9
(assert (not (<
  $Perm.No
  (+ (frac_val<Perm> __flatten_93__35@453@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] |diz.field_Program_f.results_hist_value|
(push) ; 9
(assert (not (<
  $Perm.No
  (+ (frac_val<Perm> __flatten_93__35@453@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@458@01))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01))))))))
  $Snap.unit))
; [eval] diz.field_Program_initialised ==> (forall i: Int, j: Int :: { diz.field_Program_f.channel_hist_value[i][j] } 0 <= i && (i < diz.field_Program_size && (0 <= j && j < |diz.field_Program_f.channel_hist_value[i]|)) ==> 0 <= diz.field_Program_f.channel_hist_value[i][j] && diz.field_Program_f.channel_hist_value[i][j] < diz.field_Program_maxvalue)
(push) ; 9
(assert (not (<
  $Perm.No
  (+ (frac_val<Perm> __flatten_93__35@453@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(push) ; 10
(assert (not (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@458@01))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 197 | First:(Second:($t@458@01)) | live]
; [else-branch: 197 | !(First:(Second:($t@458@01))) | dead]
(push) ; 10
; [then-branch: 197 | First:(Second:($t@458@01))]
; [eval] (forall i: Int, j: Int :: { diz.field_Program_f.channel_hist_value[i][j] } 0 <= i && (i < diz.field_Program_size && (0 <= j && j < |diz.field_Program_f.channel_hist_value[i]|)) ==> 0 <= diz.field_Program_f.channel_hist_value[i][j] && diz.field_Program_f.channel_hist_value[i][j] < diz.field_Program_maxvalue)
(declare-const i@459@01 Int)
(declare-const j@460@01 Int)
(push) ; 11
; [eval] 0 <= i && (i < diz.field_Program_size && (0 <= j && j < |diz.field_Program_f.channel_hist_value[i]|)) ==> 0 <= diz.field_Program_f.channel_hist_value[i][j] && diz.field_Program_f.channel_hist_value[i][j] < diz.field_Program_maxvalue
; [eval] 0 <= i && (i < diz.field_Program_size && (0 <= j && j < |diz.field_Program_f.channel_hist_value[i]|))
; [eval] 0 <= i
(push) ; 12
; [then-branch: 198 | 0 <= i@459@01 | live]
; [else-branch: 198 | !(0 <= i@459@01) | live]
(push) ; 13
; [then-branch: 198 | 0 <= i@459@01]
(assert (<= 0 i@459@01))
; [eval] i < diz.field_Program_size
(push) ; 14
(assert (not (<
  $Perm.No
  (+ (frac_val<Perm> __flatten_93__35@453@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
; [then-branch: 199 | i@459@01 < First:(Second:(Second:($t@458@01))) | live]
; [else-branch: 199 | !(i@459@01 < First:(Second:(Second:($t@458@01)))) | live]
(push) ; 15
; [then-branch: 199 | i@459@01 < First:(Second:(Second:($t@458@01)))]
(assert (<
  i@459@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@458@01))))))
; [eval] 0 <= j
(push) ; 16
; [then-branch: 200 | 0 <= j@460@01 | live]
; [else-branch: 200 | !(0 <= j@460@01) | live]
(push) ; 17
; [then-branch: 200 | 0 <= j@460@01]
(assert (<= 0 j@460@01))
; [eval] j < |diz.field_Program_f.channel_hist_value[i]|
; [eval] |diz.field_Program_f.channel_hist_value[i]|
; [eval] diz.field_Program_f.channel_hist_value[i]
(push) ; 18
(assert (not (<
  $Perm.No
  (+ (frac_val<Perm> __flatten_93__35@453@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(assert (not (>= i@459@01 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(assert (not (<
  i@459@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01)))))))))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(pop) ; 17
(push) ; 17
; [else-branch: 200 | !(0 <= j@460@01)]
(assert (not (<= 0 j@460@01)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(push) ; 15
; [else-branch: 199 | !(i@459@01 < First:(Second:(Second:($t@458@01))))]
(assert (not
  (<
    i@459@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@458@01)))))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(push) ; 13
; [else-branch: 198 | !(0 <= i@459@01)]
(assert (not (<= 0 i@459@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
; [then-branch: 201 | j@460@01 < |First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@458@01))))))))[i@459@01]| && 0 <= j@460@01 && i@459@01 < First:(Second:(Second:($t@458@01))) && 0 <= i@459@01 | live]
; [else-branch: 201 | !(j@460@01 < |First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@458@01))))))))[i@459@01]| && 0 <= j@460@01 && i@459@01 < First:(Second:(Second:($t@458@01))) && 0 <= i@459@01) | live]
(push) ; 13
; [then-branch: 201 | j@460@01 < |First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@458@01))))))))[i@459@01]| && 0 <= j@460@01 && i@459@01 < First:(Second:(Second:($t@458@01))) && 0 <= i@459@01]
(assert (and
  (and
    (and
      (<
        j@460@01
        (Seq_length
          (Seq_index
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01)))))))))
            i@459@01)))
      (<= 0 j@460@01))
    (<
      i@459@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@458@01))))))
  (<= 0 i@459@01)))
; [eval] 0 <= diz.field_Program_f.channel_hist_value[i][j] && diz.field_Program_f.channel_hist_value[i][j] < diz.field_Program_maxvalue
; [eval] 0 <= diz.field_Program_f.channel_hist_value[i][j]
; [eval] diz.field_Program_f.channel_hist_value[i][j]
; [eval] diz.field_Program_f.channel_hist_value[i]
(set-option :timeout 10)
(push) ; 14
(assert (not (<
  $Perm.No
  (+ (frac_val<Perm> __flatten_93__35@453@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i@459@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (<
  i@459@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01)))))))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= j@460@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
; [then-branch: 202 | 0 <= First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@458@01))))))))[i@459@01][j@460@01] | live]
; [else-branch: 202 | !(0 <= First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@458@01))))))))[i@459@01][j@460@01]) | live]
(push) ; 15
; [then-branch: 202 | 0 <= First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@458@01))))))))[i@459@01][j@460@01]]
(assert (<=
  0
  (Seq_index
    (Seq_index
      ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01)))))))))
      i@459@01)
    j@460@01)))
; [eval] diz.field_Program_f.channel_hist_value[i][j] < diz.field_Program_maxvalue
; [eval] diz.field_Program_f.channel_hist_value[i][j]
; [eval] diz.field_Program_f.channel_hist_value[i]
(set-option :timeout 10)
(push) ; 16
(assert (not (<
  $Perm.No
  (+ (frac_val<Perm> __flatten_93__35@453@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i@459@01 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(assert (not (<
  i@459@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01)))))))))))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(assert (not (>= j@460@01 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 16
(assert (not (<
  $Perm.No
  (+ (frac_val<Perm> __flatten_93__35@453@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
(push) ; 15
; [else-branch: 202 | !(0 <= First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@458@01))))))))[i@459@01][j@460@01])]
(assert (not
  (<=
    0
    (Seq_index
      (Seq_index
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01)))))))))
        i@459@01)
      j@460@01))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(push) ; 13
; [else-branch: 201 | !(j@460@01 < |First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@458@01))))))))[i@459@01]| && 0 <= j@460@01 && i@459@01 < First:(Second:(Second:($t@458@01))) && 0 <= i@459@01)]
(assert (not
  (and
    (and
      (and
        (<
          j@460@01
          (Seq_length
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01)))))))))
              i@459@01)))
        (<= 0 j@460@01))
      (<
        i@459@01
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@458@01))))))
    (<= 0 i@459@01))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (implies
  (and
    (and
      (and
        (<
          j@460@01
          (Seq_length
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01)))))))))
              i@459@01)))
        (<= 0 j@460@01))
      (<
        i@459@01
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@458@01))))))
    (<= 0 i@459@01))
  (and
    (<
      j@460@01
      (Seq_length
        (Seq_index
          ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01)))))))))
          i@459@01)))
    (<= 0 j@460@01)
    (<
      i@459@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@458@01)))))
    (<= 0 i@459@01))))
; Joined path conditions
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@459@01 Int) (j@460@01 Int)) (!
  (implies
    (and
      (and
        (and
          (<
            j@460@01
            (Seq_length
              (Seq_index
                ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01)))))))))
                i@459@01)))
          (<= 0 j@460@01))
        (<
          i@459@01
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@458@01))))))
      (<= 0 i@459@01))
    (and
      (<
        j@460@01
        (Seq_length
          (Seq_index
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01)))))))))
            i@459@01)))
      (<= 0 j@460@01)
      (<
        i@459@01
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@458@01)))))
      (<= 0 i@459@01)))
  :pattern ((Seq_index
    (Seq_index
      ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01)))))))))
      i@459@01)
    j@460@01))
  :qid |prog.l266-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (implies
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@458@01)))
  (forall ((i@459@01 Int) (j@460@01 Int)) (!
    (implies
      (and
        (and
          (and
            (<
              j@460@01
              (Seq_length
                (Seq_index
                  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01)))))))))
                  i@459@01)))
            (<= 0 j@460@01))
          (<
            i@459@01
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@458@01))))))
        (<= 0 i@459@01))
      (and
        (<
          j@460@01
          (Seq_length
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01)))))))))
              i@459@01)))
        (<= 0 j@460@01)
        (<
          i@459@01
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@458@01)))))
        (<= 0 i@459@01)))
    :pattern ((Seq_index
      (Seq_index
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01)))))))))
        i@459@01)
      j@460@01))
    :qid |prog.l266-aux|))))
(assert (implies
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@458@01)))
  (forall ((i@459@01 Int) (j@460@01 Int)) (!
    (implies
      (and
        (and
          (and
            (<
              j@460@01
              (Seq_length
                (Seq_index
                  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01)))))))))
                  i@459@01)))
            (<= 0 j@460@01))
          (<
            i@459@01
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@458@01))))))
        (<= 0 i@459@01))
      (and
        (<
          (Seq_index
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01)))))))))
              i@459@01)
            j@460@01)
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@458@01))))))
        (<=
          0
          (Seq_index
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01)))))))))
              i@459@01)
            j@460@01))))
    :pattern ((Seq_index
      (Seq_index
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01)))))))))
        i@459@01)
      j@460@01))
    :qid |prog.l266|))))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (method_Program_lock_invariant%trigger $t@458@01 sys__result@451@01 globals@388@01))
; [exec]
; inhale acc(method_Program_lock_held(pr__30, globals), write)
(declare-const $t@461@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; pr__30.field_Program_initialised := false
(set-option :timeout 10)
(push) ; 9
(assert (not (=
  (-
    (+ (frac_val<Perm> __flatten_93__35@453@01) (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+ (frac_val<Perm> __flatten_93__35@453@01) (/ (to_real 1) (to_real 2)))
      $Perm.Write))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (or
  (=
    (-
      $Perm.Write
      ($Perm.min
        (+ (frac_val<Perm> __flatten_93__35@453@01) (/ (to_real 1) (to_real 2)))
        $Perm.Write))
    $Perm.No)
  (<
    (-
      $Perm.Write
      ($Perm.min
        (+ (frac_val<Perm> __flatten_93__35@453@01) (/ (to_real 1) (to_real 2)))
        $Perm.Write))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [exec]
; exhale acc(method_Program_lock_held(pr__30, globals), write)
; [exec]
; fold acc(method_Program_lock_invariant(pr__30, globals), write)
; [eval] diz != null
(push) ; 9
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 9
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 9
(assert (not (=
  (-
    (+ (frac_val<Perm> __flatten_93__35@453@01) (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+ (frac_val<Perm> __flatten_93__35@453@01) (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (-
    (+ (frac_val<Perm> __flatten_93__35@453@01) (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+ (frac_val<Perm> __flatten_93__35@453@01) (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2))))))
(assert (<=
  (-
    (+ (frac_val<Perm> __flatten_93__35@453@01) (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+ (frac_val<Perm> __flatten_93__35@453@01) (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2))))
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+ (frac_val<Perm> __flatten_93__35@453@01) (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+ (frac_val<Perm> __flatten_93__35@453@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2)))))
  (not (= sys__result@451@01 $Ref.null))))
(set-option :timeout 0)
(push) ; 9
(assert (not (or
  (=
    (-
      (/ (to_real 1) (to_real 2))
      ($Perm.min
        (+ (frac_val<Perm> __flatten_93__35@453@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    $Perm.No)
  (<
    (-
      (/ (to_real 1) (to_real 2))
      ($Perm.min
        (+ (frac_val<Perm> __flatten_93__35@453@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 9
(assert (not (=
  (-
    (+ (frac_val<Perm> __flatten_93__35@453@01) (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+ (frac_val<Perm> __flatten_93__35@453@01) (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (or
  (=
    (-
      (/ (to_real 1) (to_real 2))
      ($Perm.min
        (+ (frac_val<Perm> __flatten_93__35@453@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    $Perm.No)
  (<
    (-
      (/ (to_real 1) (to_real 2))
      ($Perm.min
        (+ (frac_val<Perm> __flatten_93__35@453@01) (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] 0 < diz.field_Program_maxvalue
(set-option :timeout 10)
(push) ; 9
(assert (not (<
  $Perm.No
  (+ (frac_val<Perm> __flatten_93__35@453@01) (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 203 | False | dead]
; [else-branch: 203 | True | live]
(push) ; 9
; [else-branch: 203 | True]
; [then-branch: 204 | False | dead]
; [else-branch: 204 | True | live]
(push) ; 10
; [else-branch: 204 | True]
; [then-branch: 205 | False | dead]
; [else-branch: 205 | True | live]
(push) ; 11
; [else-branch: 205 | True]
; [eval] diz.field_Program_initialised ==> (forall i: Int, j: Int :: { diz.field_Program_f.channel_hist_value[i][j] } 0 <= i && (i < diz.field_Program_size && (0 <= j && j < |diz.field_Program_f.channel_hist_value[i]|)) ==> 0 <= diz.field_Program_f.channel_hist_value[i][j] && diz.field_Program_f.channel_hist_value[i][j] < diz.field_Program_maxvalue)
(push) ; 12
; [then-branch: 206 | False | dead]
; [else-branch: 206 | True | live]
(push) ; 13
; [else-branch: 206 | True]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (method_Program_lock_invariant%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($SortWrappers.BoolTo$Snap false)
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@458@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@458@01))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))))))) sys__result@451@01 globals@388@01))
; [exec]
; exhale acc(method_Program_lock_invariant(pr__30, globals), write)
; [exec]
; end_future(f__24, current_thread_id)
; [eval] diz != null
; [eval] 0 <= current_thread_id
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01))))))))
  sys__result@413@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01))))))))
  sys__result@413@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01))))))))
  sys__result@413@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01))))))))
  sys__result@413@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] new_frac(write)
(push) ; 12
; [eval] 0 / 1 < x
(set-option :timeout 0)
(push) ; 13
(assert (not (not (= 1 0))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] x <= 1 / 1
(push) ; 13
(assert (not (not (= 1 0))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Joined path conditions
; [eval] p_empty()
(set-option :timeout 10)
(push) ; 12
(assert (not (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@456@01))))))
    sys__result@413@01)
  (=
    __flatten_94__36@454@01
    (new_frac ($Snap.combine $Snap.unit $Snap.unit) $Perm.Write)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(declare-const $t@462@01 $Snap)
(assert (= $t@462@01 ($Snap.combine ($Snap.first $t@462@01) ($Snap.second $t@462@01))))
(assert (=
  ($Snap.second $t@462@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@462@01))
    ($Snap.second ($Snap.second $t@462@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@462@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@462@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@462@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@462@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@462@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@462@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@462@01))))
  $Snap.unit))
; [eval] diz.channel_hist_value == old(diz.channel_hist_value)
; [eval] old(diz.channel_hist_value)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01))))))))
  sys__result@413@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@462@01))
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@462@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@462@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@462@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@462@01)))))
  $Snap.unit))
; [eval] diz.channel_hist_value == old(diz.channel_hist_init)
; [eval] old(diz.channel_hist_init)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@462@01))
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second $t@446@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@462@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@462@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@462@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@462@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@462@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@462@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@462@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@462@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@462@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@462@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@462@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@462@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@462@01)))))))))
  $Snap.unit))
; [eval] diz.results_hist_value == old(diz.results_hist_value)
; [eval] old(diz.results_hist_value)
(push) ; 12
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01))))))))
  sys__result@413@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@462@01)))))))
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@458@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@462@01)))))))))
  $Snap.unit))
; [eval] diz.results_hist_value == old(diz.results_hist_init)
; [eval] old(diz.results_hist_init)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@462@01)))))))
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@446@01))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; assert (forall i__42: Int :: { f__24.results_hist_value[i__42] } 0 <= i__42 && i__42 < |f__24.results_hist_value| ==> f__24.results_hist_value[i__42] == f__24.results_hist_value[method_Program_maxint__Sequence$Integer$__Integer__Integer(xs, 0, 0)])
; [eval] (forall i__42: Int :: { f__24.results_hist_value[i__42] } 0 <= i__42 && i__42 < |f__24.results_hist_value| ==> f__24.results_hist_value[i__42] == f__24.results_hist_value[method_Program_maxint__Sequence$Integer$__Integer__Integer(xs, 0, 0)])
(declare-const i__42@463@01 Int)
(push) ; 12
; [eval] 0 <= i__42 && i__42 < |f__24.results_hist_value| ==> f__24.results_hist_value[i__42] == f__24.results_hist_value[method_Program_maxint__Sequence$Integer$__Integer__Integer(xs, 0, 0)]
; [eval] 0 <= i__42 && i__42 < |f__24.results_hist_value|
; [eval] 0 <= i__42
(push) ; 13
; [then-branch: 207 | 0 <= i__42@463@01 | live]
; [else-branch: 207 | !(0 <= i__42@463@01) | live]
(push) ; 14
; [then-branch: 207 | 0 <= i__42@463@01]
(assert (<= 0 i__42@463@01))
; [eval] i__42 < |f__24.results_hist_value|
; [eval] |f__24.results_hist_value|
(pop) ; 14
(push) ; 14
; [else-branch: 207 | !(0 <= i__42@463@01)]
(assert (not (<= 0 i__42@463@01)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
; [then-branch: 208 | i__42@463@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@462@01))))))| && 0 <= i__42@463@01 | live]
; [else-branch: 208 | !(i__42@463@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@462@01))))))| && 0 <= i__42@463@01) | live]
(push) ; 14
; [then-branch: 208 | i__42@463@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@462@01))))))| && 0 <= i__42@463@01]
(assert (and
  (<
    i__42@463@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@462@01)))))))))
  (<= 0 i__42@463@01)))
; [eval] f__24.results_hist_value[i__42] == f__24.results_hist_value[method_Program_maxint__Sequence$Integer$__Integer__Integer(xs, 0, 0)]
; [eval] f__24.results_hist_value[i__42]
(set-option :timeout 0)
(push) ; 15
(assert (not (>= i__42@463@01 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] f__24.results_hist_value[method_Program_maxint__Sequence$Integer$__Integer__Integer(xs, 0, 0)]
; [eval] method_Program_maxint__Sequence$Integer$__Integer__Integer(xs, 0, 0)
(push) ; 15
; [eval] 0 <= i
; [eval] i <= |xs|
; [eval] |xs|
(push) ; 16
(assert (not (<= 0 (Seq_length xs@391@01))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 (Seq_length xs@391@01)))
; [eval] 0 <= j
; [eval] j < |xs|
; [eval] |xs|
(push) ; 16
(assert (not (< 0 (Seq_length xs@391@01))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (< 0 (Seq_length xs@391@01)))
; [eval] (forall l: Int :: 0 <= l && l < i ==> xs[l] <= xs[j])
(declare-const l@464@01 Int)
(push) ; 16
; [eval] 0 <= l && l < i ==> xs[l] <= xs[j]
; [eval] 0 <= l && l < i
; [eval] 0 <= l
(push) ; 17
; [then-branch: 209 | 0 <= l@464@01 | live]
; [else-branch: 209 | !(0 <= l@464@01) | live]
(push) ; 18
; [then-branch: 209 | 0 <= l@464@01]
(assert (<= 0 l@464@01))
; [eval] l < i
(pop) ; 18
(push) ; 18
; [else-branch: 209 | !(0 <= l@464@01)]
(assert (not (<= 0 l@464@01)))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(push) ; 17
; [then-branch: 210 | l@464@01 < 0 && 0 <= l@464@01 | live]
; [else-branch: 210 | !(l@464@01 < 0 && 0 <= l@464@01) | live]
(push) ; 18
; [then-branch: 210 | l@464@01 < 0 && 0 <= l@464@01]
(assert (and (< l@464@01 0) (<= 0 l@464@01)))
; [eval] xs[l] <= xs[j]
; [eval] xs[l]
(push) ; 19
(assert (not (>= l@464@01 0)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(push) ; 19
(assert (not (< l@464@01 (Seq_length xs@391@01))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [eval] xs[j]
(pop) ; 18
(push) ; 18
; [else-branch: 210 | !(l@464@01 < 0 && 0 <= l@464@01)]
(assert (not (and (< l@464@01 0) (<= 0 l@464@01))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 16
(assert (not (forall ((l@464@01 Int)) (!
  (implies
    (and (< l@464@01 0) (<= 0 l@464@01))
    (<= (Seq_index xs@391@01 l@464@01) (Seq_index xs@391@01 0)))
  
  :qid |prog.l217|))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (forall ((l@464@01 Int)) (!
  (implies
    (and (< l@464@01 0) (<= 0 l@464@01))
    (<= (Seq_index xs@391@01 l@464@01) (Seq_index xs@391@01 0)))
  
  :qid |prog.l217|)))
(pop) ; 15
; Joined path conditions
(assert (and
  (<= 0 (Seq_length xs@391@01))
  (< 0 (Seq_length xs@391@01))
  (forall ((l@464@01 Int)) (!
    (implies
      (and (< l@464@01 0) (<= 0 l@464@01))
      (<= (Seq_index xs@391@01 l@464@01) (Seq_index xs@391@01 0)))
    
    :qid |prog.l217|))))
(push) ; 15
(assert (not (>=
  (method_Program_maxint__Sequence$Integer$__Integer__Integer ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) xs@391@01 0 0)
  0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
(assert (not (<
  (method_Program_maxint__Sequence$Integer$__Integer__Integer ($Snap.combine
    $Snap.unit
    ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) xs@391@01 0 0)
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@462@01)))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
(push) ; 14
; [else-branch: 208 | !(i__42@463@01 < |First:(Second:(Second:(Second:(Second:(Second:($t@462@01))))))| && 0 <= i__42@463@01)]
(assert (not
  (and
    (<
      i__42@463@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@462@01)))))))))
    (<= 0 i__42@463@01))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (implies
  (and
    (<
      i__42@463@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@462@01)))))))))
    (<= 0 i__42@463@01))
  (and
    (<
      i__42@463@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@462@01)))))))))
    (<= 0 i__42@463@01)
    (<= 0 (Seq_length xs@391@01))
    (< 0 (Seq_length xs@391@01))
    (forall ((l@464@01 Int)) (!
      (implies
        (and (< l@464@01 0) (<= 0 l@464@01))
        (<= (Seq_index xs@391@01 l@464@01) (Seq_index xs@391@01 0)))
      
      :qid |prog.l217|)))))
; Joined path conditions
; [eval] f__24.results_hist_value[i__42]
(push) ; 13
(assert (not (>= i__42@463@01 0)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i__42@463@01 Int)) (!
  (implies
    (and
      (<
        i__42@463@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@462@01)))))))))
      (<= 0 i__42@463@01))
    (and
      (<
        i__42@463@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@462@01)))))))))
      (<= 0 i__42@463@01)
      (<= 0 (Seq_length xs@391@01))
      (< 0 (Seq_length xs@391@01))
      (forall ((l@464@01 Int)) (!
        (implies
          (and (< l@464@01 0) (<= 0 l@464@01))
          (<= (Seq_index xs@391@01 l@464@01) (Seq_index xs@391@01 0)))
        
        :qid |prog.l217|))))
  :pattern ()
  :qid |prog.l925-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((l@464@01 Int)) (!
  (implies
    (and (< l@464@01 0) (<= 0 l@464@01))
    (<= (Seq_index xs@391@01 l@464@01) (Seq_index xs@391@01 0)))
  
  :qid |prog.l217|)))
(push) ; 12
(assert (not (forall ((i__42@463@01 Int)) (!
  (implies
    (and
      (<
        i__42@463@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@462@01)))))))))
      (<= 0 i__42@463@01))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@462@01)))))))
        i__42@463@01)
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@462@01)))))))
        (method_Program_maxint__Sequence$Integer$__Integer__Integer ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) xs@391@01 0 0))))
  :pattern ()
  :qid |prog.l925|))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (forall ((i__42@463@01 Int)) (!
  (implies
    (and
      (<
        i__42@463@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@462@01)))))))))
      (<= 0 i__42@463@01))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@462@01)))))))
        i__42@463@01)
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@462@01)))))))
        (method_Program_maxint__Sequence$Integer$__Integer__Integer ($Snap.combine
          $Snap.unit
          ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)))) xs@391@01 0 0))))
  :pattern ()
  :qid |prog.l925|)))
; [exec]
; label method_end_method_Main_main__Integer__Integer__Sequence$Integer$_9
; [eval] 0 < size
; [eval] 0 < max
; [eval] |xs| == size
; [eval] |xs|
; [eval] (forall j: Int, k: Int :: { xs[k],xs[j] } 0 <= j && (j < |xs| && (0 <= k && (k < |xs| && j != k))) ==> xs[j] != xs[k])
(declare-const j@465@01 Int)
(declare-const k@466@01 Int)
(push) ; 12
; [eval] 0 <= j && (j < |xs| && (0 <= k && (k < |xs| && j != k))) ==> xs[j] != xs[k]
; [eval] 0 <= j && (j < |xs| && (0 <= k && (k < |xs| && j != k)))
; [eval] 0 <= j
(push) ; 13
; [then-branch: 211 | 0 <= j@465@01 | live]
; [else-branch: 211 | !(0 <= j@465@01) | live]
(push) ; 14
; [then-branch: 211 | 0 <= j@465@01]
(assert (<= 0 j@465@01))
; [eval] j < |xs|
; [eval] |xs|
(push) ; 15
; [then-branch: 212 | j@465@01 < |xs@391@01| | live]
; [else-branch: 212 | !(j@465@01 < |xs@391@01|) | live]
(push) ; 16
; [then-branch: 212 | j@465@01 < |xs@391@01|]
(assert (< j@465@01 (Seq_length xs@391@01)))
; [eval] 0 <= k
(push) ; 17
; [then-branch: 213 | 0 <= k@466@01 | live]
; [else-branch: 213 | !(0 <= k@466@01) | live]
(push) ; 18
; [then-branch: 213 | 0 <= k@466@01]
(assert (<= 0 k@466@01))
; [eval] k < |xs|
; [eval] |xs|
(push) ; 19
; [then-branch: 214 | k@466@01 < |xs@391@01| | live]
; [else-branch: 214 | !(k@466@01 < |xs@391@01|) | live]
(push) ; 20
; [then-branch: 214 | k@466@01 < |xs@391@01|]
(assert (< k@466@01 (Seq_length xs@391@01)))
; [eval] j != k
(pop) ; 20
(push) ; 20
; [else-branch: 214 | !(k@466@01 < |xs@391@01|)]
(assert (not (< k@466@01 (Seq_length xs@391@01))))
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(push) ; 18
; [else-branch: 213 | !(0 <= k@466@01)]
(assert (not (<= 0 k@466@01)))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(pop) ; 16
(push) ; 16
; [else-branch: 212 | !(j@465@01 < |xs@391@01|)]
(assert (not (< j@465@01 (Seq_length xs@391@01))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(push) ; 14
; [else-branch: 211 | !(0 <= j@465@01)]
(assert (not (<= 0 j@465@01)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
; [then-branch: 215 | j@465@01 != k@466@01 && k@466@01 < |xs@391@01| && 0 <= k@466@01 && j@465@01 < |xs@391@01| && 0 <= j@465@01 | live]
; [else-branch: 215 | !(j@465@01 != k@466@01 && k@466@01 < |xs@391@01| && 0 <= k@466@01 && j@465@01 < |xs@391@01| && 0 <= j@465@01) | live]
(push) ; 14
; [then-branch: 215 | j@465@01 != k@466@01 && k@466@01 < |xs@391@01| && 0 <= k@466@01 && j@465@01 < |xs@391@01| && 0 <= j@465@01]
(assert (and
  (and
    (and
      (and (not (= j@465@01 k@466@01)) (< k@466@01 (Seq_length xs@391@01)))
      (<= 0 k@466@01))
    (< j@465@01 (Seq_length xs@391@01)))
  (<= 0 j@465@01)))
; [eval] xs[j] != xs[k]
; [eval] xs[j]
(push) ; 15
(assert (not (>= j@465@01 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] xs[k]
(push) ; 15
(assert (not (>= k@466@01 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
(push) ; 14
; [else-branch: 215 | !(j@465@01 != k@466@01 && k@466@01 < |xs@391@01| && 0 <= k@466@01 && j@465@01 < |xs@391@01| && 0 <= j@465@01)]
(assert (not
  (and
    (and
      (and
        (and (not (= j@465@01 k@466@01)) (< k@466@01 (Seq_length xs@391@01)))
        (<= 0 k@466@01))
      (< j@465@01 (Seq_length xs@391@01)))
    (<= 0 j@465@01))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (implies
  (and
    (and
      (and
        (and (not (= j@465@01 k@466@01)) (< k@466@01 (Seq_length xs@391@01)))
        (<= 0 k@466@01))
      (< j@465@01 (Seq_length xs@391@01)))
    (<= 0 j@465@01))
  (and
    (not (= j@465@01 k@466@01))
    (< k@466@01 (Seq_length xs@391@01))
    (<= 0 k@466@01)
    (< j@465@01 (Seq_length xs@391@01))
    (<= 0 j@465@01))))
; Joined path conditions
(pop) ; 12
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j@465@01 Int) (k@466@01 Int)) (!
  (implies
    (and
      (and
        (and
          (and (not (= j@465@01 k@466@01)) (< k@466@01 (Seq_length xs@391@01)))
          (<= 0 k@466@01))
        (< j@465@01 (Seq_length xs@391@01)))
      (<= 0 j@465@01))
    (and
      (not (= j@465@01 k@466@01))
      (< k@466@01 (Seq_length xs@391@01))
      (<= 0 k@466@01)
      (< j@465@01 (Seq_length xs@391@01))
      (<= 0 j@465@01)))
  :pattern ((Seq_index xs@391@01 k@466@01) (Seq_index xs@391@01 j@465@01))
  :qid |prog.l859-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 12
(assert (not (forall ((j@465@01 Int) (k@466@01 Int)) (!
  (implies
    (and
      (and
        (and
          (and (not (= j@465@01 k@466@01)) (< k@466@01 (Seq_length xs@391@01)))
          (<= 0 k@466@01))
        (< j@465@01 (Seq_length xs@391@01)))
      (<= 0 j@465@01))
    (not (= (Seq_index xs@391@01 j@465@01) (Seq_index xs@391@01 k@466@01))))
  :pattern ((Seq_index xs@391@01 k@466@01) (Seq_index xs@391@01 j@465@01))
  :qid |prog.l859|))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (forall ((j@465@01 Int) (k@466@01 Int)) (!
  (implies
    (and
      (and
        (and
          (and (not (= j@465@01 k@466@01)) (< k@466@01 (Seq_length xs@391@01)))
          (<= 0 k@466@01))
        (< j@465@01 (Seq_length xs@391@01)))
      (<= 0 j@465@01))
    (not (= (Seq_index xs@391@01 j@465@01) (Seq_index xs@391@01 k@466@01))))
  :pattern ((Seq_index xs@391@01 k@466@01) (Seq_index xs@391@01 j@465@01))
  :qid |prog.l859|)))
; [eval] (forall j: Int :: { xs[j] } 0 <= j && j < |xs| ==> 0 <= xs[j] && xs[j] < max)
(declare-const j@467@01 Int)
(push) ; 12
; [eval] 0 <= j && j < |xs| ==> 0 <= xs[j] && xs[j] < max
; [eval] 0 <= j && j < |xs|
; [eval] 0 <= j
(push) ; 13
; [then-branch: 216 | 0 <= j@467@01 | live]
; [else-branch: 216 | !(0 <= j@467@01) | live]
(push) ; 14
; [then-branch: 216 | 0 <= j@467@01]
(assert (<= 0 j@467@01))
; [eval] j < |xs|
; [eval] |xs|
(pop) ; 14
(push) ; 14
; [else-branch: 216 | !(0 <= j@467@01)]
(assert (not (<= 0 j@467@01)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
; [then-branch: 217 | j@467@01 < |xs@391@01| && 0 <= j@467@01 | live]
; [else-branch: 217 | !(j@467@01 < |xs@391@01| && 0 <= j@467@01) | live]
(push) ; 14
; [then-branch: 217 | j@467@01 < |xs@391@01| && 0 <= j@467@01]
(assert (and (< j@467@01 (Seq_length xs@391@01)) (<= 0 j@467@01)))
; [eval] 0 <= xs[j] && xs[j] < max
; [eval] 0 <= xs[j]
; [eval] xs[j]
(push) ; 15
(assert (not (>= j@467@01 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
; [then-branch: 218 | 0 <= xs@391@01[j@467@01] | live]
; [else-branch: 218 | !(0 <= xs@391@01[j@467@01]) | live]
(push) ; 16
; [then-branch: 218 | 0 <= xs@391@01[j@467@01]]
(assert (<= 0 (Seq_index xs@391@01 j@467@01)))
; [eval] xs[j] < max
; [eval] xs[j]
(push) ; 17
(assert (not (>= j@467@01 0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(pop) ; 16
(push) ; 16
; [else-branch: 218 | !(0 <= xs@391@01[j@467@01])]
(assert (not (<= 0 (Seq_index xs@391@01 j@467@01))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(pop) ; 14
(push) ; 14
; [else-branch: 217 | !(j@467@01 < |xs@391@01| && 0 <= j@467@01)]
(assert (not (and (< j@467@01 (Seq_length xs@391@01)) (<= 0 j@467@01))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(push) ; 12
(assert (not (forall ((j@467@01 Int)) (!
  (implies
    (and (< j@467@01 (Seq_length xs@391@01)) (<= 0 j@467@01))
    (and
      (< (Seq_index xs@391@01 j@467@01) max@390@01)
      (<= 0 (Seq_index xs@391@01 j@467@01))))
  :pattern ((Seq_index xs@391@01 j@467@01))
  :qid |prog.l860|))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (forall ((j@467@01 Int)) (!
  (implies
    (and (< j@467@01 (Seq_length xs@391@01)) (<= 0 j@467@01))
    (and
      (< (Seq_index xs@391@01 j@467@01) max@390@01)
      (<= 0 (Seq_index xs@391@01 j@467@01))))
  :pattern ((Seq_index xs@391@01 j@467@01))
  :qid |prog.l860|)))
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 170 | i__27@421@01 < size@389@01]
(assert (< i__27@421@01 size@389@01))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- method_Main_spawn__Integer__Program__Sequence$Integer$ ----------
(declare-const current_thread_id@468@01 Int)
(declare-const globals@469@01 $Ref)
(declare-const rank@470@01 Int)
(declare-const pr@471@01 $Ref)
(declare-const xs@472@01 Seq<Int>)
(declare-const q1@473@01 frac)
(declare-const q2@474@01 frac)
(declare-const current_thread_id@475@01 Int)
(declare-const globals@476@01 $Ref)
(declare-const rank@477@01 Int)
(declare-const pr@478@01 $Ref)
(declare-const xs@479@01 Seq<Int>)
(declare-const q1@480@01 frac)
(declare-const q2@481@01 frac)
(push) ; 1
(declare-const $t@482@01 $Snap)
(assert (= $t@482@01 ($Snap.combine ($Snap.first $t@482@01) ($Snap.second $t@482@01))))
(assert (= ($Snap.first $t@482@01) $Snap.unit))
; [eval] frac_val(q1) != none
; [eval] frac_val(q1)
(assert (not (= (frac_val<Perm> q1@480@01) $Perm.No)))
(assert (=
  ($Snap.second $t@482@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@482@01))
    ($Snap.second ($Snap.second $t@482@01)))))
(assert (= ($Snap.first ($Snap.second $t@482@01)) $Snap.unit))
; [eval] frac_val(q2) != none
; [eval] frac_val(q2)
(assert (not (= (frac_val<Perm> q2@481@01) $Perm.No)))
(assert (=
  ($Snap.second ($Snap.second $t@482@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@482@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@482@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@482@01))) $Snap.unit))
; [eval] pr != null
(assert (not (= pr@478@01 $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@482@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@482@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01)))))))
; [eval] frac_val(q1)
(assert (<= $Perm.No (frac_val<Perm> q1@480@01)))
(assert (<= (frac_val<Perm> q1@480@01) $Perm.Write))
(assert (implies (< $Perm.No (frac_val<Perm> q1@480@01)) (not (= pr@478@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01))))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01))))))
  $Snap.unit))
; [eval] pr.field_Program_f != null
(set-option :timeout 10)
(push) ; 2
(assert (not (< $Perm.No (frac_val<Perm> q1@480@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01))))))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01)))))))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01)))))))))
  $Snap.unit))
(push) ; 2
(assert (not (< $Perm.No (frac_val<Perm> q1@480@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01))))))))))
  $Snap.unit))
; [eval] 0 <= rank
(assert (<= 0 rank@477@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01)))))))))))
  $Snap.unit))
; [eval] rank <= pr.field_Program_size
(push) ; 2
(assert (not (< $Perm.No (frac_val<Perm> q1@480@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (<=
  rank@477@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@482@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01))))))))))))
  $Snap.unit))
; [eval] |xs| == pr.field_Program_size
; [eval] |xs|
(push) ; 2
(assert (not (< $Perm.No (frac_val<Perm> q1@480@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length xs@479@01)
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@482@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01)))))))))))))
  $Snap.unit))
; [eval] (forall j: Int :: { xs[j] } 0 <= j && j < |xs| ==> 0 <= xs[j] && xs[j] < pr.field_Program_maxvalue)
(declare-const j@483@01 Int)
(push) ; 2
; [eval] 0 <= j && j < |xs| ==> 0 <= xs[j] && xs[j] < pr.field_Program_maxvalue
; [eval] 0 <= j && j < |xs|
; [eval] 0 <= j
(push) ; 3
; [then-branch: 219 | 0 <= j@483@01 | live]
; [else-branch: 219 | !(0 <= j@483@01) | live]
(push) ; 4
; [then-branch: 219 | 0 <= j@483@01]
(assert (<= 0 j@483@01))
; [eval] j < |xs|
; [eval] |xs|
(pop) ; 4
(push) ; 4
; [else-branch: 219 | !(0 <= j@483@01)]
(assert (not (<= 0 j@483@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
; [then-branch: 220 | j@483@01 < |xs@479@01| && 0 <= j@483@01 | live]
; [else-branch: 220 | !(j@483@01 < |xs@479@01| && 0 <= j@483@01) | live]
(push) ; 4
; [then-branch: 220 | j@483@01 < |xs@479@01| && 0 <= j@483@01]
(assert (and (< j@483@01 (Seq_length xs@479@01)) (<= 0 j@483@01)))
; [eval] 0 <= xs[j] && xs[j] < pr.field_Program_maxvalue
; [eval] 0 <= xs[j]
; [eval] xs[j]
(set-option :timeout 0)
(push) ; 5
(assert (not (>= j@483@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
; [then-branch: 221 | 0 <= xs@479@01[j@483@01] | live]
; [else-branch: 221 | !(0 <= xs@479@01[j@483@01]) | live]
(push) ; 6
; [then-branch: 221 | 0 <= xs@479@01[j@483@01]]
(assert (<= 0 (Seq_index xs@479@01 j@483@01)))
; [eval] xs[j] < pr.field_Program_maxvalue
; [eval] xs[j]
(push) ; 7
(assert (not (>= j@483@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 7
(assert (not (< $Perm.No (frac_val<Perm> q1@480@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 221 | !(0 <= xs@479@01[j@483@01])]
(assert (not (<= 0 (Seq_index xs@479@01 j@483@01))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
(push) ; 4
; [else-branch: 220 | !(j@483@01 < |xs@479@01| && 0 <= j@483@01)]
(assert (not (and (< j@483@01 (Seq_length xs@479@01)) (<= 0 j@483@01))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((j@483@01 Int)) (!
  (implies
    (and (< j@483@01 (Seq_length xs@479@01)) (<= 0 j@483@01))
    (and
      (<
        (Seq_index xs@479@01 j@483@01)
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01)))))))))
      (<= 0 (Seq_index xs@479@01 j@483@01))))
  :pattern ((Seq_index xs@479@01 j@483@01))
  :qid |prog.l940|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01))))))))))))))
  $Snap.unit))
; [eval] 0 <= current_thread_id
(assert (<= 0 current_thread_id@475@01))
(push) ; 2
(assert (not (< $Perm.No (frac_val<Perm> q1@480@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; [eval] p_method_Future_Spawn__Integer__Integer__Sequence$Integer$__Integer(rank, pr.field_Program_size, xs, pr.field_Program_maxvalue)
(push) ; 2
(assert (not (< $Perm.No (frac_val<Perm> q1@480@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(push) ; 2
(assert (not (< $Perm.No (frac_val<Perm> q1@480@01))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@484@01 $Snap)
(assert (= $t@484@01 ($Snap.combine ($Snap.first $t@484@01) ($Snap.second $t@484@01))))
(assert (= ($Snap.first $t@484@01) $Snap.unit))
; [eval] frac_val(q1) != none
; [eval] frac_val(q1)
(assert (=
  ($Snap.second $t@484@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@484@01))
    ($Snap.second ($Snap.second $t@484@01)))))
(assert (= ($Snap.first ($Snap.second $t@484@01)) $Snap.unit))
; [eval] frac_val(q2) != none
; [eval] frac_val(q2)
(assert (=
  ($Snap.second ($Snap.second $t@484@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@484@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@484@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@484@01))) $Snap.unit))
; [eval] pr != null
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@484@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@484@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01)))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01))))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01))))))
  $Snap.unit))
; [eval] pr.field_Program_f != null
(set-option :timeout 10)
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@480@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01))))))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01)))))))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01)))))))))
  $Snap.unit))
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@480@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01))))))))))
  $Snap.unit))
; [eval] 0 <= rank
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01)))))))))))
  $Snap.unit))
; [eval] rank <= pr.field_Program_size
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@480@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<=
  rank@477@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@484@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01))))))))))))
  $Snap.unit))
; [eval] |xs| == pr.field_Program_size
; [eval] |xs|
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@480@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length xs@479@01)
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@484@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01)))))))))))))
  $Snap.unit))
; [eval] (forall j: Int :: { xs[j] } 0 <= j && j < |xs| ==> 0 <= xs[j] && xs[j] < pr.field_Program_maxvalue)
(declare-const j@485@01 Int)
(push) ; 3
; [eval] 0 <= j && j < |xs| ==> 0 <= xs[j] && xs[j] < pr.field_Program_maxvalue
; [eval] 0 <= j && j < |xs|
; [eval] 0 <= j
(push) ; 4
; [then-branch: 222 | 0 <= j@485@01 | live]
; [else-branch: 222 | !(0 <= j@485@01) | live]
(push) ; 5
; [then-branch: 222 | 0 <= j@485@01]
(assert (<= 0 j@485@01))
; [eval] j < |xs|
; [eval] |xs|
(pop) ; 5
(push) ; 5
; [else-branch: 222 | !(0 <= j@485@01)]
(assert (not (<= 0 j@485@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
; [then-branch: 223 | j@485@01 < |xs@479@01| && 0 <= j@485@01 | live]
; [else-branch: 223 | !(j@485@01 < |xs@479@01| && 0 <= j@485@01) | live]
(push) ; 5
; [then-branch: 223 | j@485@01 < |xs@479@01| && 0 <= j@485@01]
(assert (and (< j@485@01 (Seq_length xs@479@01)) (<= 0 j@485@01)))
; [eval] 0 <= xs[j] && xs[j] < pr.field_Program_maxvalue
; [eval] 0 <= xs[j]
; [eval] xs[j]
(set-option :timeout 0)
(push) ; 6
(assert (not (>= j@485@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 224 | 0 <= xs@479@01[j@485@01] | live]
; [else-branch: 224 | !(0 <= xs@479@01[j@485@01]) | live]
(push) ; 7
; [then-branch: 224 | 0 <= xs@479@01[j@485@01]]
(assert (<= 0 (Seq_index xs@479@01 j@485@01)))
; [eval] xs[j] < pr.field_Program_maxvalue
; [eval] xs[j]
(push) ; 8
(assert (not (>= j@485@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 8
(assert (not (< $Perm.No (frac_val<Perm> q1@480@01))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(push) ; 7
; [else-branch: 224 | !(0 <= xs@479@01[j@485@01])]
(assert (not (<= 0 (Seq_index xs@479@01 j@485@01))))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(pop) ; 5
(push) ; 5
; [else-branch: 223 | !(j@485@01 < |xs@479@01| && 0 <= j@485@01)]
(assert (not (and (< j@485@01 (Seq_length xs@479@01)) (<= 0 j@485@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((j@485@01 Int)) (!
  (implies
    (and (< j@485@01 (Seq_length xs@479@01)) (<= 0 j@485@01))
    (and
      (<
        (Seq_index xs@479@01 j@485@01)
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01)))))))))
      (<= 0 (Seq_index xs@479@01 j@485@01))))
  :pattern ((Seq_index xs@479@01 j@485@01))
  :qid |prog.l953|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01))))))))))))))
  $Snap.unit))
; [eval] pr == old(pr)
; [eval] old(pr)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01)))))))))))))))
  $Snap.unit))
; [eval] pr.field_Program_size == old(pr.field_Program_size)
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@480@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] old(pr.field_Program_size)
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@480@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@484@01)))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@482@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01))))))))))))))))
  $Snap.unit))
; [eval] pr.field_Program_maxvalue == old(pr.field_Program_maxvalue)
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@480@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] old(pr.field_Program_maxvalue)
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@480@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01))))))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01)))))))))))))))))
  $Snap.unit))
; [eval] pr.field_Program_f == old(pr.field_Program_f)
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@480@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] old(pr.field_Program_f)
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@480@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@484@01))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01))))))))
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@480@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] p_empty()
(pop) ; 2
(push) ; 2
; [exec]
; var m__63: Ref
(declare-const m__63@486@01 $Ref)
; [exec]
; var __flatten_52__43: Process
(declare-const __flatten_52__43@487@01 Process)
; [exec]
; var __flatten_53__44: Process
(declare-const __flatten_53__44@488@01 Process)
; [exec]
; var __flatten_58__45: Process
(declare-const __flatten_58__45@489@01 Process)
; [exec]
; var __flatten_59__46: Process
(declare-const __flatten_59__46@490@01 Process)
; [exec]
; var __flatten_97__47: Perm
(declare-const __flatten_97__47@491@01 $Perm)
; [exec]
; var __flatten_98__48: frac
(declare-const __flatten_98__48@492@01 frac)
; [exec]
; var __flatten_99__49: Perm
(declare-const __flatten_99__49@493@01 $Perm)
; [exec]
; var __flatten_100__50: frac
(declare-const __flatten_100__50@494@01 frac)
; [exec]
; var __flatten_104__51: Perm
(declare-const __flatten_104__51@495@01 $Perm)
; [exec]
; var __flatten_105__52: frac
(declare-const __flatten_105__52@496@01 frac)
; [exec]
; var __flatten_106__53: Perm
(declare-const __flatten_106__53@497@01 $Perm)
; [exec]
; var __flatten_107__54: frac
(declare-const __flatten_107__54@498@01 frac)
; [exec]
; var __flatten_110__55: Perm
(declare-const __flatten_110__55@499@01 $Perm)
; [exec]
; var __flatten_111__56: frac
(declare-const __flatten_111__56@500@01 frac)
; [exec]
; var __flatten_112__57: Perm
(declare-const __flatten_112__57@501@01 $Perm)
; [exec]
; var __flatten_113__58: frac
(declare-const __flatten_113__58@502@01 frac)
; [exec]
; var __flatten_118__59: Perm
(declare-const __flatten_118__59@503@01 $Perm)
; [exec]
; var __flatten_119__60: frac
(declare-const __flatten_119__60@504@01 frac)
; [exec]
; var __flatten_120__61: Perm
(declare-const __flatten_120__61@505@01 $Perm)
; [exec]
; var __flatten_121__62: frac
(declare-const __flatten_121__62@506@01 frac)
; [eval] rank < pr.field_Program_size
(push) ; 3
(assert (not (< $Perm.No (frac_val<Perm> q1@480@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (not
  (<
    rank@477@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@482@01)))))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (<
  rank@477@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@482@01))))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 225 | rank@477@01 < First:(Second:(Second:(Second:($t@482@01)))) | live]
; [else-branch: 225 | !(rank@477@01 < First:(Second:(Second:(Second:($t@482@01))))) | live]
(push) ; 3
; [then-branch: 225 | rank@477@01 < First:(Second:(Second:(Second:($t@482@01))))]
(assert (<
  rank@477@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@482@01)))))))
; [exec]
; __flatten_97__47 := frac_val(q1)
; [eval] frac_val(q1)
(declare-const __flatten_97__47@507@01 $Perm)
(assert (= __flatten_97__47@507@01 (frac_val<Perm> q1@480@01)))
; [exec]
; __flatten_98__48 := new_frac(__flatten_97__47 / 2)
; [eval] new_frac(__flatten_97__47 / 2)
; [eval] __flatten_97__47 / 2
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
; [eval] 0 / 1 < x
(push) ; 5
(assert (not (not (= 1 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< $Perm.No (/ __flatten_97__47@507@01 (to_real 2)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (< $Perm.No (/ __flatten_97__47@507@01 (to_real 2))))
; [eval] x <= 1 / 1
(push) ; 5
(assert (not (not (= 1 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<= (/ __flatten_97__47@507@01 (to_real 2)) $Perm.Write)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (<= (/ __flatten_97__47@507@01 (to_real 2)) $Perm.Write))
(pop) ; 4
; Joined path conditions
(assert (and
  (< $Perm.No (/ __flatten_97__47@507@01 (to_real 2)))
  (<= (/ __flatten_97__47@507@01 (to_real 2)) $Perm.Write)))
(declare-const __flatten_98__48@508@01 frac)
(assert (=
  __flatten_98__48@508@01
  (new_frac ($Snap.combine $Snap.unit $Snap.unit) (/
    __flatten_97__47@507@01
    (to_real 2)))))
; [exec]
; __flatten_99__49 := frac_val(q2)
; [eval] frac_val(q2)
(declare-const __flatten_99__49@509@01 $Perm)
(assert (= __flatten_99__49@509@01 (frac_val<Perm> q2@481@01)))
; [exec]
; __flatten_100__50 := new_frac(__flatten_99__49 / 2)
; [eval] new_frac(__flatten_99__49 / 2)
; [eval] __flatten_99__49 / 2
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
; [eval] 0 / 1 < x
(push) ; 5
(assert (not (not (= 1 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< $Perm.No (/ __flatten_99__49@509@01 (to_real 2)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (< $Perm.No (/ __flatten_99__49@509@01 (to_real 2))))
; [eval] x <= 1 / 1
(push) ; 5
(assert (not (not (= 1 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<= (/ __flatten_99__49@509@01 (to_real 2)) $Perm.Write)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (<= (/ __flatten_99__49@509@01 (to_real 2)) $Perm.Write))
(pop) ; 4
; Joined path conditions
(assert (and
  (< $Perm.No (/ __flatten_99__49@509@01 (to_real 2)))
  (<= (/ __flatten_99__49@509@01 (to_real 2)) $Perm.Write)))
(declare-const __flatten_100__50@510@01 frac)
(assert (=
  __flatten_100__50@510@01
  (new_frac ($Snap.combine $Snap.unit $Snap.unit) (/
    __flatten_99__49@509@01
    (to_real 2)))))
; [exec]
; m__63 := constructor_Main_Main__Program__Integer__Integer__Fraction__Fraction(current_thread_id, globals, pr, rank, xs[rank], __flatten_98__48, __flatten_100__50)
; [eval] xs[rank]
(push) ; 4
(assert (not (>= rank@477@01 0)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (< rank@477@01 (Seq_length xs@479@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= current_thread_id
; [eval] frac_val(r1) != none
; [eval] frac_val(r1)
(push) ; 4
(assert (not (not (= (frac_val<Perm> __flatten_98__48@508@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (not (= (frac_val<Perm> __flatten_98__48@508@01) $Perm.No)))
; [eval] frac_val(r2) != none
; [eval] frac_val(r2)
(push) ; 4
(assert (not (not (= (frac_val<Perm> __flatten_100__50@510@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (not (= (frac_val<Perm> __flatten_100__50@510@01) $Perm.No)))
(declare-const sys__result@511@01 $Ref)
(declare-const $t@512@01 $Snap)
(assert (= $t@512@01 ($Snap.combine ($Snap.first $t@512@01) ($Snap.second $t@512@01))))
(assert (= ($Snap.first $t@512@01) $Snap.unit))
; [eval] sys__result != null
(assert (not (= sys__result@511@01 $Ref.null)))
(assert (=
  ($Snap.second $t@512@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@512@01))
    ($Snap.second ($Snap.second $t@512@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@512@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@512@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@512@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@512@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@512@01))))
  $Snap.unit))
; [eval] sys__result.field_Main_pr == pr
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@512@01))))
  pr@478@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))
  $Snap.unit))
; [eval] sys__result.field_Main_rank == rank
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))
  rank@477@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))
  $Snap.unit))
; [eval] sys__result.field_Main_val == val
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))
  (Seq_index xs@479@01 rank@477@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))))
  $Snap.unit))
; [eval] frac_val(sys__result.field_Main_r1) == frac_val(r1)
; [eval] frac_val(sys__result.field_Main_r1)
; [eval] frac_val(r1)
(assert (=
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))
  (frac_val<Perm> __flatten_98__48@508@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))
  $Snap.unit))
; [eval] frac_val(sys__result.field_Main_r2) == frac_val(r2)
; [eval] frac_val(sys__result.field_Main_r2)
; [eval] frac_val(r2)
(assert (=
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))
  (frac_val<Perm> __flatten_100__50@510@01)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; assert acc(hist_idle(pr.field_Program_f, q2, p_method_Future_Spawn__Integer__Integer__Sequence$Integer$__Integer(rank, pr.field_Program_size, xs, pr.field_Program_maxvalue)), write)
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@480@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] p_method_Future_Spawn__Integer__Integer__Sequence$Integer$__Integer(rank, pr.field_Program_size, xs, pr.field_Program_maxvalue)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@480@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@480@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [exec]
; assert acc(hist_idle(pr.field_Program_f, q2, p_merge(p_method_Future_Elect__Integer__Integer__Integer__Integer__Integer(rank, pr.field_Program_size, xs[rank], pr.field_Program_maxvalue, 0), p_method_Future_Spawn__Integer__Integer__Sequence$Integer$__Integer(rank + 1, pr.field_Program_size, xs, pr.field_Program_maxvalue))), write)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@480@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] p_merge(p_method_Future_Elect__Integer__Integer__Integer__Integer__Integer(rank, pr.field_Program_size, xs[rank], pr.field_Program_maxvalue, 0), p_method_Future_Spawn__Integer__Integer__Sequence$Integer$__Integer(rank + 1, pr.field_Program_size, xs, pr.field_Program_maxvalue))
; [eval] p_method_Future_Elect__Integer__Integer__Integer__Integer__Integer(rank, pr.field_Program_size, xs[rank], pr.field_Program_maxvalue, 0)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@480@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] xs[rank]
(set-option :timeout 0)
(push) ; 4
(assert (not (>= rank@477@01 0)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (< rank@477@01 (Seq_length xs@479@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@480@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] p_method_Future_Spawn__Integer__Integer__Sequence$Integer$__Integer(rank + 1, pr.field_Program_size, xs, pr.field_Program_maxvalue)
; [eval] rank + 1
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@480@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@480@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (=
  (p_method_Future_Spawn__Integer__Integer__Sequence$Integer$__Integer<Process> rank@477@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@482@01))))) xs@479@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01)))))))))
  (p_merge<Process> (p_method_Future_Elect__Integer__Integer__Integer__Integer__Integer<Process> rank@477@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@482@01))))) (Seq_index
    xs@479@01
    rank@477@01) ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01)))))))) 0) (p_method_Future_Spawn__Integer__Integer__Sequence$Integer$__Integer<Process> (+
    rank@477@01
    1) ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@482@01))))) xs@479@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01)))))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [exec]
; __flatten_52__43 := p_method_Future_Elect__Integer__Integer__Integer__Integer__Integer(rank, pr.field_Program_size, xs[rank], pr.field_Program_maxvalue, 0)
; [eval] p_method_Future_Elect__Integer__Integer__Integer__Integer__Integer(rank, pr.field_Program_size, xs[rank], pr.field_Program_maxvalue, 0)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@480@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] xs[rank]
(set-option :timeout 0)
(push) ; 4
(assert (not (>= rank@477@01 0)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (< rank@477@01 (Seq_length xs@479@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@480@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const __flatten_52__43@513@01 Process)
(assert (=
  __flatten_52__43@513@01
  (p_method_Future_Elect__Integer__Integer__Integer__Integer__Integer<Process> rank@477@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@482@01))))) (Seq_index
    xs@479@01
    rank@477@01) ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01)))))))) 0)))
; [exec]
; __flatten_53__44 := p_method_Future_Spawn__Integer__Integer__Sequence$Integer$__Integer(rank + 1, pr.field_Program_size, xs, pr.field_Program_maxvalue)
; [eval] p_method_Future_Spawn__Integer__Integer__Sequence$Integer$__Integer(rank + 1, pr.field_Program_size, xs, pr.field_Program_maxvalue)
; [eval] rank + 1
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@480@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@480@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const __flatten_53__44@514@01 Process)
(assert (=
  __flatten_53__44@514@01
  (p_method_Future_Spawn__Integer__Integer__Sequence$Integer$__Integer<Process> (+
    rank@477@01
    1) ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@482@01))))) xs@479@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01)))))))))))
; [exec]
; __flatten_104__51 := frac_val(q2)
; [eval] frac_val(q2)
(declare-const __flatten_104__51@515@01 $Perm)
(assert (= __flatten_104__51@515@01 (frac_val<Perm> q2@481@01)))
; [exec]
; __flatten_105__52 := new_frac(__flatten_104__51 / 2)
; [eval] new_frac(__flatten_104__51 / 2)
; [eval] __flatten_104__51 / 2
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
; [eval] 0 / 1 < x
(push) ; 5
(assert (not (not (= 1 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< $Perm.No (/ __flatten_104__51@515@01 (to_real 2)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (< $Perm.No (/ __flatten_104__51@515@01 (to_real 2))))
; [eval] x <= 1 / 1
(push) ; 5
(assert (not (not (= 1 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<= (/ __flatten_104__51@515@01 (to_real 2)) $Perm.Write)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (<= (/ __flatten_104__51@515@01 (to_real 2)) $Perm.Write))
(pop) ; 4
; Joined path conditions
(assert (and
  (< $Perm.No (/ __flatten_104__51@515@01 (to_real 2)))
  (<= (/ __flatten_104__51@515@01 (to_real 2)) $Perm.Write)))
(declare-const __flatten_105__52@516@01 frac)
(assert (=
  __flatten_105__52@516@01
  (new_frac ($Snap.combine $Snap.unit $Snap.unit) (/
    __flatten_104__51@515@01
    (to_real 2)))))
; [exec]
; __flatten_106__53 := frac_val(q2)
; [eval] frac_val(q2)
(declare-const __flatten_106__53@517@01 $Perm)
(assert (= __flatten_106__53@517@01 (frac_val<Perm> q2@481@01)))
; [exec]
; __flatten_107__54 := new_frac(__flatten_106__53 / 2)
; [eval] new_frac(__flatten_106__53 / 2)
; [eval] __flatten_106__53 / 2
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
; [eval] 0 / 1 < x
(push) ; 5
(assert (not (not (= 1 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< $Perm.No (/ __flatten_106__53@517@01 (to_real 2)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (< $Perm.No (/ __flatten_106__53@517@01 (to_real 2))))
; [eval] x <= 1 / 1
(push) ; 5
(assert (not (not (= 1 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<= (/ __flatten_106__53@517@01 (to_real 2)) $Perm.Write)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (<= (/ __flatten_106__53@517@01 (to_real 2)) $Perm.Write))
(pop) ; 4
; Joined path conditions
(assert (and
  (< $Perm.No (/ __flatten_106__53@517@01 (to_real 2)))
  (<= (/ __flatten_106__53@517@01 (to_real 2)) $Perm.Write)))
(declare-const __flatten_107__54@518@01 frac)
(assert (=
  __flatten_107__54@518@01
  (new_frac ($Snap.combine $Snap.unit $Snap.unit) (/
    __flatten_106__53@517@01
    (to_real 2)))))
; [exec]
; split(pr.field_Program_f, current_thread_id, __flatten_105__52, __flatten_52__43, __flatten_107__54, __flatten_53__44)
(set-option :timeout 10)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@480@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] diz != null
; [eval] 0 <= current_thread_id
; [eval] frac_val(frac1) + frac_val(frac2) <= write
; [eval] frac_val(frac1) + frac_val(frac2)
; [eval] frac_val(frac1)
; [eval] frac_val(frac2)
(set-option :timeout 0)
(push) ; 4
(assert (not (<=
  (+
    (frac_val<Perm> __flatten_105__52@516@01)
    (frac_val<Perm> __flatten_107__54@518@01))
  $Perm.Write)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (<=
  (+
    (frac_val<Perm> __flatten_105__52@516@01)
    (frac_val<Perm> __flatten_107__54@518@01))
  $Perm.Write))
; [eval] new_frac(frac_val(frac1) + frac_val(frac2))
; [eval] frac_val(frac1) + frac_val(frac2)
; [eval] frac_val(frac1)
; [eval] frac_val(frac2)
(push) ; 4
; [eval] 0 / 1 < x
(push) ; 5
(assert (not (not (= 1 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (frac_val<Perm> __flatten_105__52@516@01)
    (frac_val<Perm> __flatten_107__54@518@01)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (<
  $Perm.No
  (+
    (frac_val<Perm> __flatten_105__52@516@01)
    (frac_val<Perm> __flatten_107__54@518@01))))
; [eval] x <= 1 / 1
(push) ; 5
(assert (not (not (= 1 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
; Joined path conditions
(assert (<
  $Perm.No
  (+
    (frac_val<Perm> __flatten_105__52@516@01)
    (frac_val<Perm> __flatten_107__54@518@01))))
; [eval] p_merge(proc1, proc2)
(set-option :timeout 10)
(push) ; 4
(assert (not (and
  (=
    q2@481@01
    (new_frac ($Snap.combine $Snap.unit $Snap.unit) (+
      (frac_val<Perm> __flatten_105__52@516@01)
      (frac_val<Perm> __flatten_107__54@518@01))))
  (=
    (p_method_Future_Spawn__Integer__Integer__Sequence$Integer$__Integer<Process> rank@477@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@482@01))))) xs@479@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01)))))))))
    (p_merge<Process> __flatten_52__43@513@01 __flatten_53__44@514@01)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const $t@519@01 $Snap)
(assert (= $t@519@01 ($Snap.combine ($Snap.first $t@519@01) ($Snap.second $t@519@01))))
(push) ; 4
(assert (not (and
  (= __flatten_105__52@516@01 __flatten_107__54@518@01)
  (= __flatten_52__43@513@01 __flatten_53__44@514@01))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; method_Main_forkOperator(m__63, current_thread_id, globals)
; [eval] diz != null
; [eval] 0 <= current_thread_id
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 4
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 4
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 4
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
; [eval] diz.field_Main_pr != null
(set-option :timeout 0)
(push) ; 4
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@512@01))))
    $Ref.null))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@512@01))))
    $Ref.null)))
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 4
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
; [eval] frac_val(diz.field_Main_r1) != none
; [eval] frac_val(diz.field_Main_r1)
(set-option :timeout 0)
(push) ; 4
(assert (not (not
  (=
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))
    $Perm.No)))
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 4
(assert (not (= (/ (to_real 1) (to_real 2)) $Perm.No)))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
; [eval] frac_val(diz.field_Main_r2) != none
; [eval] frac_val(diz.field_Main_r2)
(set-option :timeout 0)
(push) ; 4
(assert (not (not
  (=
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))
    $Perm.No)))
; [eval] frac_val(diz.field_Main_r1)
(push) ; 4
(assert (not (or
  (=
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))
    $Perm.No)
  (<
    $Perm.No
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 4
(assert (not (=
  pr@478@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@512@01)))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (=
  (-
    (frac_val<Perm> q1@480@01)
    ($Perm.min
      (frac_val<Perm> q1@480@01)
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (-
    (frac_val<Perm> q1@480@01)
    ($Perm.min
      (frac_val<Perm> q1@480@01)
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))))
(assert (<=
  (-
    (frac_val<Perm> q1@480@01)
    ($Perm.min
      (frac_val<Perm> q1@480@01)
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (frac_val<Perm> q1@480@01)
      ($Perm.min
        (frac_val<Perm> q1@480@01)
        (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))))))))
  (not (= pr@478@01 $Ref.null))))
(set-option :timeout 0)
(push) ; 4
(assert (not (or
  (=
    (-
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))
      ($Perm.min
        (frac_val<Perm> q1@480@01)
        (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))
    $Perm.No)
  (<
    (-
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))
      ($Perm.min
        (frac_val<Perm> q1@480@01)
        (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Main_pr.field_Program_f != null
(set-option :timeout 10)
(push) ; 4
(assert (not (=
  pr@478@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@512@01)))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@480@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] frac_val(diz.field_Main_r1)
(set-option :timeout 0)
(push) ; 4
(assert (not (or
  (=
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))
    $Perm.No)
  (<
    $Perm.No
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 4
(assert (not (=
  pr@478@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@512@01)))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (=
  (-
    (frac_val<Perm> q1@480@01)
    ($Perm.min
      (frac_val<Perm> q1@480@01)
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (or
  (=
    (-
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))
      ($Perm.min
        (frac_val<Perm> q1@480@01)
        (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))
    $Perm.No)
  (<
    (-
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))
      ($Perm.min
        (frac_val<Perm> q1@480@01)
        (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] frac_val(diz.field_Main_r1)
(push) ; 4
(assert (not (or
  (=
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))
    $Perm.No)
  (<
    $Perm.No
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 4
(assert (not (=
  pr@478@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@512@01)))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (=
  (-
    (frac_val<Perm> q1@480@01)
    ($Perm.min
      (frac_val<Perm> q1@480@01)
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (or
  (=
    (-
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))
      ($Perm.min
        (frac_val<Perm> q1@480@01)
        (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))
    $Perm.No)
  (<
    (-
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))
      ($Perm.min
        (frac_val<Perm> q1@480@01)
        (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] frac_val(diz.field_Main_r1)
(push) ; 4
(assert (not (or
  (=
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))
    $Perm.No)
  (<
    $Perm.No
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 4
(assert (not (=
  pr@478@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@512@01)))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (=
  (-
    (frac_val<Perm> q1@480@01)
    ($Perm.min
      (frac_val<Perm> q1@480@01)
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (or
  (=
    (-
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))
      ($Perm.min
        (frac_val<Perm> q1@480@01)
        (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))
    $Perm.No)
  (<
    (-
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))
      ($Perm.min
        (frac_val<Perm> q1@480@01)
        (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 4
(assert (not (=
  pr@478@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@512@01)))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@480@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= diz.field_Main_rank
(set-option :timeout 0)
(push) ; 4
(assert (not (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))
; [eval] diz.field_Main_rank < diz.field_Main_pr.field_Program_size
(set-option :timeout 10)
(push) ; 4
(assert (not (=
  pr@478@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@512@01)))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@480@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@482@01))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@482@01)))))))
; [eval] 0 <= diz.field_Main_val
(push) ; 4
(assert (not (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))))
; [eval] diz.field_Main_val < diz.field_Main_pr.field_Program_maxvalue
(set-option :timeout 10)
(push) ; 4
(assert (not (=
  pr@478@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@512@01)))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@480@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01)))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01))))))))))
(set-option :timeout 10)
(push) ; 4
(assert (not (=
  pr@478@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@512@01)))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@480@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] p_method_Future_Elect__Integer__Integer__Integer__Integer__Integer(diz.field_Main_rank, diz.field_Main_pr.field_Program_size, diz.field_Main_val, diz.field_Main_pr.field_Program_maxvalue, 0)
(push) ; 4
(assert (not (=
  pr@478@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@512@01)))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@480@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (=
  pr@478@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@512@01)))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> q1@480@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (and
  (=
    __flatten_107__54@518@01
    ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))
  (=
    __flatten_53__44@514@01
    (p_method_Future_Elect__Integer__Integer__Integer__Integer__Integer<Process> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))) ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@482@01))))) ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))) ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01)))))))) 0)))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(push) ; 4
(assert (not (and
  (=
    __flatten_105__52@516@01
    ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))
  (=
    __flatten_52__43@513@01
    (p_method_Future_Elect__Integer__Integer__Integer__Integer__Integer<Process> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))) ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@482@01))))) ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))) ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01)))))))) 0)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const $t@520@01 $Snap)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; __flatten_110__55 := frac_val(q1)
; [eval] frac_val(q1)
(declare-const __flatten_110__55@521@01 $Perm)
(assert (= __flatten_110__55@521@01 (frac_val<Perm> q1@480@01)))
; [exec]
; __flatten_111__56 := new_frac(__flatten_110__55 / 2)
; [eval] new_frac(__flatten_110__55 / 2)
; [eval] __flatten_110__55 / 2
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
; [eval] 0 / 1 < x
(push) ; 5
(assert (not (not (= 1 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< $Perm.No (/ __flatten_110__55@521@01 (to_real 2)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (< $Perm.No (/ __flatten_110__55@521@01 (to_real 2))))
; [eval] x <= 1 / 1
(push) ; 5
(assert (not (not (= 1 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<= (/ __flatten_110__55@521@01 (to_real 2)) $Perm.Write)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (<= (/ __flatten_110__55@521@01 (to_real 2)) $Perm.Write))
(pop) ; 4
; Joined path conditions
(assert (and
  (< $Perm.No (/ __flatten_110__55@521@01 (to_real 2)))
  (<= (/ __flatten_110__55@521@01 (to_real 2)) $Perm.Write)))
(declare-const __flatten_111__56@522@01 frac)
(assert (=
  __flatten_111__56@522@01
  (new_frac ($Snap.combine $Snap.unit $Snap.unit) (/
    __flatten_110__55@521@01
    (to_real 2)))))
; [exec]
; __flatten_112__57 := frac_val(q2)
; [eval] frac_val(q2)
(declare-const __flatten_112__57@523@01 $Perm)
(assert (= __flatten_112__57@523@01 (frac_val<Perm> q2@481@01)))
; [exec]
; __flatten_113__58 := new_frac(__flatten_112__57 / 2)
; [eval] new_frac(__flatten_112__57 / 2)
; [eval] __flatten_112__57 / 2
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
; [eval] 0 / 1 < x
(push) ; 5
(assert (not (not (= 1 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (< $Perm.No (/ __flatten_112__57@523@01 (to_real 2)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (< $Perm.No (/ __flatten_112__57@523@01 (to_real 2))))
; [eval] x <= 1 / 1
(push) ; 5
(assert (not (not (= 1 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<= (/ __flatten_112__57@523@01 (to_real 2)) $Perm.Write)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (<= (/ __flatten_112__57@523@01 (to_real 2)) $Perm.Write))
(pop) ; 4
; Joined path conditions
(assert (and
  (< $Perm.No (/ __flatten_112__57@523@01 (to_real 2)))
  (<= (/ __flatten_112__57@523@01 (to_real 2)) $Perm.Write)))
(declare-const __flatten_113__58@524@01 frac)
(assert (=
  __flatten_113__58@524@01
  (new_frac ($Snap.combine $Snap.unit $Snap.unit) (/
    __flatten_112__57@523@01
    (to_real 2)))))
; [exec]
; method_Main_spawn__Integer__Program__Sequence$Integer$(current_thread_id, globals, rank + 1, pr, xs, __flatten_111__56, __flatten_113__58)
; [eval] rank + 1
; [eval] frac_val(q1) != none
; [eval] frac_val(q1)
(push) ; 4
(assert (not (not (= (frac_val<Perm> __flatten_111__56@522@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (not (= (frac_val<Perm> __flatten_111__56@522@01) $Perm.No)))
; [eval] frac_val(q2) != none
; [eval] frac_val(q2)
(push) ; 4
(assert (not (not (= (frac_val<Perm> __flatten_113__58@524@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (not (= (frac_val<Perm> __flatten_113__58@524@01) $Perm.No)))
; [eval] pr != null
; [eval] frac_val(q1)
(push) ; 4
(assert (not (or
  (= (frac_val<Perm> __flatten_111__56@522@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> __flatten_111__56@522@01)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 4
(assert (not (=
  (-
    (-
      (frac_val<Perm> q1@480@01)
      ($Perm.min
        (frac_val<Perm> q1@480@01)
        (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))
    ($Perm.min
      (-
        (frac_val<Perm> q1@480@01)
        ($Perm.min
          (frac_val<Perm> q1@480@01)
          (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))
      (frac_val<Perm> __flatten_111__56@522@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (or
  (=
    (-
      (frac_val<Perm> __flatten_111__56@522@01)
      ($Perm.min
        (-
          (frac_val<Perm> q1@480@01)
          ($Perm.min
            (frac_val<Perm> q1@480@01)
            (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))
        (frac_val<Perm> __flatten_111__56@522@01)))
    $Perm.No)
  (<
    (-
      (frac_val<Perm> __flatten_111__56@522@01)
      ($Perm.min
        (-
          (frac_val<Perm> q1@480@01)
          ($Perm.min
            (frac_val<Perm> q1@480@01)
            (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))
        (frac_val<Perm> __flatten_111__56@522@01)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] frac_val(q1)
(push) ; 4
(assert (not (or
  (= (frac_val<Perm> __flatten_111__56@522@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> __flatten_111__56@522@01)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 4
(assert (not (=
  (-
    (-
      (frac_val<Perm> q1@480@01)
      ($Perm.min
        (frac_val<Perm> q1@480@01)
        (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))
    ($Perm.min
      (-
        (frac_val<Perm> q1@480@01)
        ($Perm.min
          (frac_val<Perm> q1@480@01)
          (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))
      (frac_val<Perm> __flatten_111__56@522@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (or
  (=
    (-
      (frac_val<Perm> __flatten_111__56@522@01)
      ($Perm.min
        (-
          (frac_val<Perm> q1@480@01)
          ($Perm.min
            (frac_val<Perm> q1@480@01)
            (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))
        (frac_val<Perm> __flatten_111__56@522@01)))
    $Perm.No)
  (<
    (-
      (frac_val<Perm> __flatten_111__56@522@01)
      ($Perm.min
        (-
          (frac_val<Perm> q1@480@01)
          ($Perm.min
            (frac_val<Perm> q1@480@01)
            (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))
        (frac_val<Perm> __flatten_111__56@522@01)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] pr.field_Program_f != null
(set-option :timeout 10)
(push) ; 4
(assert (not (<
  $Perm.No
  (-
    (frac_val<Perm> q1@480@01)
    ($Perm.min
      (frac_val<Perm> q1@480@01)
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] frac_val(q1)
(set-option :timeout 0)
(push) ; 4
(assert (not (or
  (= (frac_val<Perm> __flatten_111__56@522@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> __flatten_111__56@522@01)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 4
(assert (not (=
  (-
    (-
      (frac_val<Perm> q1@480@01)
      ($Perm.min
        (frac_val<Perm> q1@480@01)
        (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))
    ($Perm.min
      (-
        (frac_val<Perm> q1@480@01)
        ($Perm.min
          (frac_val<Perm> q1@480@01)
          (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))
      (frac_val<Perm> __flatten_111__56@522@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (or
  (=
    (-
      (frac_val<Perm> __flatten_111__56@522@01)
      ($Perm.min
        (-
          (frac_val<Perm> q1@480@01)
          ($Perm.min
            (frac_val<Perm> q1@480@01)
            (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))
        (frac_val<Perm> __flatten_111__56@522@01)))
    $Perm.No)
  (<
    (-
      (frac_val<Perm> __flatten_111__56@522@01)
      ($Perm.min
        (-
          (frac_val<Perm> q1@480@01)
          ($Perm.min
            (frac_val<Perm> q1@480@01)
            (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))
        (frac_val<Perm> __flatten_111__56@522@01)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] frac_val(q1)
(push) ; 4
(assert (not (or
  (= (frac_val<Perm> __flatten_111__56@522@01) $Perm.No)
  (< $Perm.No (frac_val<Perm> __flatten_111__56@522@01)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 4
(assert (not (=
  (-
    (-
      (frac_val<Perm> q1@480@01)
      ($Perm.min
        (frac_val<Perm> q1@480@01)
        (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))
    ($Perm.min
      (-
        (frac_val<Perm> q1@480@01)
        ($Perm.min
          (frac_val<Perm> q1@480@01)
          (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))
      (frac_val<Perm> __flatten_111__56@522@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (or
  (=
    (-
      (frac_val<Perm> __flatten_111__56@522@01)
      ($Perm.min
        (-
          (frac_val<Perm> q1@480@01)
          ($Perm.min
            (frac_val<Perm> q1@480@01)
            (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))
        (frac_val<Perm> __flatten_111__56@522@01)))
    $Perm.No)
  (<
    (-
      (frac_val<Perm> __flatten_111__56@522@01)
      ($Perm.min
        (-
          (frac_val<Perm> q1@480@01)
          ($Perm.min
            (frac_val<Perm> q1@480@01)
            (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01)))))))))))))
        (frac_val<Perm> __flatten_111__56@522@01)))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 4
(assert (not (<
  $Perm.No
  (-
    (frac_val<Perm> q1@480@01)
    ($Perm.min
      (frac_val<Perm> q1@480@01)
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= rank
(set-option :timeout 0)
(push) ; 4
(assert (not (<= 0 (+ rank@477@01 1))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 (+ rank@477@01 1)))
; [eval] rank <= pr.field_Program_size
(set-option :timeout 10)
(push) ; 4
(assert (not (<
  $Perm.No
  (-
    (frac_val<Perm> q1@480@01)
    ($Perm.min
      (frac_val<Perm> q1@480@01)
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (<=
  (+ rank@477@01 1)
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@482@01))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (<=
  (+ rank@477@01 1)
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@482@01)))))))
; [eval] |xs| == pr.field_Program_size
; [eval] |xs|
(set-option :timeout 10)
(push) ; 4
(assert (not (<
  $Perm.No
  (-
    (frac_val<Perm> q1@480@01)
    ($Perm.min
      (frac_val<Perm> q1@480@01)
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] (forall j: Int :: { xs[j] } 0 <= j && j < |xs| ==> 0 <= xs[j] && xs[j] < pr.field_Program_maxvalue)
(declare-const j@525@01 Int)
(push) ; 4
; [eval] 0 <= j && j < |xs| ==> 0 <= xs[j] && xs[j] < pr.field_Program_maxvalue
; [eval] 0 <= j && j < |xs|
; [eval] 0 <= j
(push) ; 5
; [then-branch: 226 | 0 <= j@525@01 | live]
; [else-branch: 226 | !(0 <= j@525@01) | live]
(push) ; 6
; [then-branch: 226 | 0 <= j@525@01]
(assert (<= 0 j@525@01))
; [eval] j < |xs|
; [eval] |xs|
(pop) ; 6
(push) ; 6
; [else-branch: 226 | !(0 <= j@525@01)]
(assert (not (<= 0 j@525@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 227 | j@525@01 < |xs@479@01| && 0 <= j@525@01 | live]
; [else-branch: 227 | !(j@525@01 < |xs@479@01| && 0 <= j@525@01) | live]
(push) ; 6
; [then-branch: 227 | j@525@01 < |xs@479@01| && 0 <= j@525@01]
(assert (and (< j@525@01 (Seq_length xs@479@01)) (<= 0 j@525@01)))
; [eval] 0 <= xs[j] && xs[j] < pr.field_Program_maxvalue
; [eval] 0 <= xs[j]
; [eval] xs[j]
(set-option :timeout 0)
(push) ; 7
(assert (not (>= j@525@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch: 228 | 0 <= xs@479@01[j@525@01] | live]
; [else-branch: 228 | !(0 <= xs@479@01[j@525@01]) | live]
(push) ; 8
; [then-branch: 228 | 0 <= xs@479@01[j@525@01]]
(assert (<= 0 (Seq_index xs@479@01 j@525@01)))
; [eval] xs[j] < pr.field_Program_maxvalue
; [eval] xs[j]
(push) ; 9
(assert (not (>= j@525@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 9
(assert (not (<
  $Perm.No
  (-
    (frac_val<Perm> q1@480@01)
    ($Perm.min
      (frac_val<Perm> q1@480@01)
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 228 | !(0 <= xs@479@01[j@525@01])]
(assert (not (<= 0 (Seq_index xs@479@01 j@525@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 227 | !(j@525@01 < |xs@479@01| && 0 <= j@525@01)]
(assert (not (and (< j@525@01 (Seq_length xs@479@01)) (<= 0 j@525@01))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(set-option :timeout 0)
(push) ; 4
(assert (not (forall ((j@525@01 Int)) (!
  (implies
    (and (< j@525@01 (Seq_length xs@479@01)) (<= 0 j@525@01))
    (and
      (<
        (Seq_index xs@479@01 j@525@01)
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01)))))))))
      (<= 0 (Seq_index xs@479@01 j@525@01))))
  :pattern ((Seq_index xs@479@01 j@525@01))
  :qid |prog.l940|))))
(check-sat)
; unsat
(pop) ; 4
; 0.08s
; (get-info :all-statistics)
(assert (forall ((j@525@01 Int)) (!
  (implies
    (and (< j@525@01 (Seq_length xs@479@01)) (<= 0 j@525@01))
    (and
      (<
        (Seq_index xs@479@01 j@525@01)
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01)))))))))
      (<= 0 (Seq_index xs@479@01 j@525@01))))
  :pattern ((Seq_index xs@479@01 j@525@01))
  :qid |prog.l940|)))
; [eval] 0 <= current_thread_id
(set-option :timeout 10)
(push) ; 4
(assert (not (<
  $Perm.No
  (-
    (frac_val<Perm> q1@480@01)
    ($Perm.min
      (frac_val<Perm> q1@480@01)
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] p_method_Future_Spawn__Integer__Integer__Sequence$Integer$__Integer(rank, pr.field_Program_size, xs, pr.field_Program_maxvalue)
(push) ; 4
(assert (not (<
  $Perm.No
  (-
    (frac_val<Perm> q1@480@01)
    ($Perm.min
      (frac_val<Perm> q1@480@01)
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (<
  $Perm.No
  (-
    (frac_val<Perm> q1@480@01)
    ($Perm.min
      (frac_val<Perm> q1@480@01)
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (and
  (= __flatten_107__54@518@01 __flatten_113__58@524@01)
  (=
    __flatten_53__44@514@01
    (p_method_Future_Spawn__Integer__Integer__Sequence$Integer$__Integer<Process> (+
      rank@477@01
      1) ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@482@01))))) xs@479@01 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@482@01)))))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const $t@526@01 $Snap)
(assert (= $t@526@01 ($Snap.combine ($Snap.first $t@526@01) ($Snap.second $t@526@01))))
(assert (= ($Snap.first $t@526@01) $Snap.unit))
; [eval] frac_val(q1) != none
; [eval] frac_val(q1)
(assert (=
  ($Snap.second $t@526@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@526@01))
    ($Snap.second ($Snap.second $t@526@01)))))
(assert (= ($Snap.first ($Snap.second $t@526@01)) $Snap.unit))
; [eval] frac_val(q2) != none
; [eval] frac_val(q2)
(assert (=
  ($Snap.second ($Snap.second $t@526@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@526@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@526@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@526@01))) $Snap.unit))
; [eval] pr != null
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@526@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@526@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@526@01)))))))
; [eval] frac_val(q1)
(assert (<= $Perm.No (frac_val<Perm> __flatten_111__56@522@01)))
(assert (<= (frac_val<Perm> __flatten_111__56@522@01) $Perm.Write))
(assert (implies
  (< $Perm.No (frac_val<Perm> __flatten_111__56@522@01))
  (not (= pr@478@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@526@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@526@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@526@01))))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@526@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@526@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@526@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@526@01))))))
  $Snap.unit))
; [eval] pr.field_Program_f != null
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> __flatten_111__56@522@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@526@01))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@526@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@526@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@526@01))))))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@526@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@526@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@526@01)))))))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@526@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@526@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@526@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@526@01)))))))))
  $Snap.unit))
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> __flatten_111__56@522@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@526@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@526@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@526@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@526@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@526@01))))))))))
  $Snap.unit))
; [eval] 0 <= rank
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@526@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@526@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@526@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@526@01)))))))))))
  $Snap.unit))
; [eval] rank <= pr.field_Program_size
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> __flatten_111__56@522@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (<=
  (+ rank@477@01 1)
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@526@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@526@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@526@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@526@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@526@01))))))))))))
  $Snap.unit))
; [eval] |xs| == pr.field_Program_size
; [eval] |xs|
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> __flatten_111__56@522@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length xs@479@01)
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@526@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@526@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@526@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@526@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@526@01)))))))))))))
  $Snap.unit))
; [eval] (forall j: Int :: { xs[j] } 0 <= j && j < |xs| ==> 0 <= xs[j] && xs[j] < pr.field_Program_maxvalue)
(declare-const j@527@01 Int)
(push) ; 4
; [eval] 0 <= j && j < |xs| ==> 0 <= xs[j] && xs[j] < pr.field_Program_maxvalue
; [eval] 0 <= j && j < |xs|
; [eval] 0 <= j
(push) ; 5
; [then-branch: 229 | 0 <= j@527@01 | live]
; [else-branch: 229 | !(0 <= j@527@01) | live]
(push) ; 6
; [then-branch: 229 | 0 <= j@527@01]
(assert (<= 0 j@527@01))
; [eval] j < |xs|
; [eval] |xs|
(pop) ; 6
(push) ; 6
; [else-branch: 229 | !(0 <= j@527@01)]
(assert (not (<= 0 j@527@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
; [then-branch: 230 | j@527@01 < |xs@479@01| && 0 <= j@527@01 | live]
; [else-branch: 230 | !(j@527@01 < |xs@479@01| && 0 <= j@527@01) | live]
(push) ; 6
; [then-branch: 230 | j@527@01 < |xs@479@01| && 0 <= j@527@01]
(assert (and (< j@527@01 (Seq_length xs@479@01)) (<= 0 j@527@01)))
; [eval] 0 <= xs[j] && xs[j] < pr.field_Program_maxvalue
; [eval] 0 <= xs[j]
; [eval] xs[j]
(set-option :timeout 0)
(push) ; 7
(assert (not (>= j@527@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch: 231 | 0 <= xs@479@01[j@527@01] | live]
; [else-branch: 231 | !(0 <= xs@479@01[j@527@01]) | live]
(push) ; 8
; [then-branch: 231 | 0 <= xs@479@01[j@527@01]]
(assert (<= 0 (Seq_index xs@479@01 j@527@01)))
; [eval] xs[j] < pr.field_Program_maxvalue
; [eval] xs[j]
(push) ; 9
(assert (not (>= j@527@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 9
(assert (not (< $Perm.No (frac_val<Perm> __flatten_111__56@522@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 231 | !(0 <= xs@479@01[j@527@01])]
(assert (not (<= 0 (Seq_index xs@479@01 j@527@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(pop) ; 6
(push) ; 6
; [else-branch: 230 | !(j@527@01 < |xs@479@01| && 0 <= j@527@01)]
(assert (not (and (< j@527@01 (Seq_length xs@479@01)) (<= 0 j@527@01))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
; Nested auxiliary terms: non-globals (tlq)
(assert (forall ((j@527@01 Int)) (!
  (implies
    (and (< j@527@01 (Seq_length xs@479@01)) (<= 0 j@527@01))
    (and
      (<
        (Seq_index xs@479@01 j@527@01)
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@526@01)))))))))
      (<= 0 (Seq_index xs@479@01 j@527@01))))
  :pattern ((Seq_index xs@479@01 j@527@01))
  :qid |prog.l953|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@526@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@526@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@526@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@526@01))))))))))))))
  $Snap.unit))
; [eval] pr == old(pr)
; [eval] old(pr)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@526@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@526@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@526@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@526@01)))))))))))))))
  $Snap.unit))
; [eval] pr.field_Program_size == old(pr.field_Program_size)
(push) ; 4
(assert (not (< $Perm.No (frac_val<Perm> __flatten_111__56@522@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] old(pr.field_Program_size)
(push) ; 4
(assert (not (<
  $Perm.No
  (-
    (frac_val<Perm> q1@480@01)
    ($Perm.min
      (frac_val<Perm> q1@480@01)
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))))))))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(check-sat)
; unknown
; [state consolidation]
; State saturation: before repetition
(check-sat)
; unknown
(push) ; 4
(assert (not (<
  $Perm.No
  (-
    (frac_val<Perm> q1@480@01)
    ($Perm.min
      (frac_val<Perm> q1@480@01)
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@512@01))))))))))))))))
(check-sat)
; unknown
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(check-sat)
; unknown
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- constructor_Main_Main__Program__Integer__Integer__Fraction__Fraction ----------
(declare-const current_thread_id@528@01 Int)
(declare-const globals@529@01 $Ref)
(declare-const pr@530@01 $Ref)
(declare-const rank@531@01 Int)
(declare-const val@532@01 Int)
(declare-const r1@533@01 frac)
(declare-const r2@534@01 frac)
(declare-const sys__result@535@01 $Ref)
(declare-const current_thread_id@536@01 Int)
(declare-const globals@537@01 $Ref)
(declare-const pr@538@01 $Ref)
(declare-const rank@539@01 Int)
(declare-const val@540@01 Int)
(declare-const r1@541@01 frac)
(declare-const r2@542@01 frac)
(declare-const sys__result@543@01 $Ref)
(push) ; 1
(declare-const $t@544@01 $Snap)
(assert (= $t@544@01 ($Snap.combine ($Snap.first $t@544@01) ($Snap.second $t@544@01))))
(assert (= ($Snap.first $t@544@01) $Snap.unit))
; [eval] 0 <= current_thread_id
(assert (<= 0 current_thread_id@536@01))
(assert (=
  ($Snap.second $t@544@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@544@01))
    ($Snap.second ($Snap.second $t@544@01)))))
(assert (= ($Snap.first ($Snap.second $t@544@01)) $Snap.unit))
; [eval] frac_val(r1) != none
; [eval] frac_val(r1)
(assert (not (= (frac_val<Perm> r1@541@01) $Perm.No)))
(assert (= ($Snap.second ($Snap.second $t@544@01)) $Snap.unit))
; [eval] frac_val(r2) != none
; [eval] frac_val(r2)
(assert (not (= (frac_val<Perm> r2@542@01) $Perm.No)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@545@01 $Snap)
(assert (= $t@545@01 ($Snap.combine ($Snap.first $t@545@01) ($Snap.second $t@545@01))))
(assert (= ($Snap.first $t@545@01) $Snap.unit))
; [eval] sys__result != null
(assert (not (= sys__result@543@01 $Ref.null)))
(assert (=
  ($Snap.second $t@545@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@545@01))
    ($Snap.second ($Snap.second $t@545@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@545@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@545@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@545@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@545@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@545@01))))
  $Snap.unit))
; [eval] sys__result.field_Main_pr == pr
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@545@01))))
  pr@538@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))
  $Snap.unit))
; [eval] sys__result.field_Main_rank == rank
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))
  rank@539@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))))
  $Snap.unit))
; [eval] sys__result.field_Main_val == val
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))))
  val@540@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))))))
  $Snap.unit))
; [eval] frac_val(sys__result.field_Main_r1) == frac_val(r1)
; [eval] frac_val(sys__result.field_Main_r1)
; [eval] frac_val(r1)
(assert (=
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))))))
  (frac_val<Perm> r1@541@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))))))
  $Snap.unit))
; [eval] frac_val(sys__result.field_Main_r2) == frac_val(r2)
; [eval] frac_val(sys__result.field_Main_r2)
; [eval] frac_val(r2)
(assert (=
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@545@01)))))))))))))
  (frac_val<Perm> r2@542@01)))
(pop) ; 2
(push) ; 2
; [exec]
; var diz__64: Ref
(declare-const diz__64@546@01 $Ref)
; [exec]
; diz__64 := new(field_Main_pr, field_Main_rank, field_Main_val, field_Main_r1, field_Main_r2)
(declare-const diz__64@547@01 $Ref)
(assert (not (= diz__64@547@01 $Ref.null)))
(declare-const field_Main_pr@548@01 $Ref)
(declare-const field_Main_rank@549@01 Int)
(declare-const field_Main_val@550@01 Int)
(declare-const field_Main_r1@551@01 frac)
(declare-const field_Main_r2@552@01 frac)
(assert (not (= diz__64@547@01 pr@538@01)))
(assert (not (= diz__64@547@01 sys__result@543@01)))
(assert (not (= diz__64@547@01 globals@537@01)))
(assert (not (= diz__64@547@01 diz__64@546@01)))
; [exec]
; diz__64.field_Main_pr := pr
; [exec]
; diz__64.field_Main_rank := rank
; [exec]
; diz__64.field_Main_val := val
; [exec]
; diz__64.field_Main_r1 := r1
; [exec]
; diz__64.field_Main_r2 := r2
; [exec]
; inhale acc(method_Main_idleToken(diz__64, globals), write)
(declare-const $t@553@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; label method_end_constructor_Main_Main__Program__Integer__Integer__Fraction__Fraction_7
; [exec]
; sys__result := diz__64
; [exec]
; assert sys__result != null && (acc(method_Main_idleToken(sys__result, globals), write) && (acc(sys__result.field_Main_pr, write) && (sys__result.field_Main_pr == pr && (acc(sys__result.field_Main_rank, write) && (sys__result.field_Main_rank == rank && (acc(sys__result.field_Main_val, write) && (sys__result.field_Main_val == val && (acc(sys__result.field_Main_r1, write) && (frac_val(sys__result.field_Main_r1) == frac_val(r1) && (acc(sys__result.field_Main_r2, write) && frac_val(sys__result.field_Main_r2) == frac_val(r2)))))))))))
; [eval] sys__result != null
; [eval] sys__result.field_Main_pr == pr
; [eval] sys__result.field_Main_rank == rank
; [eval] sys__result.field_Main_val == val
; [eval] frac_val(sys__result.field_Main_r1) == frac_val(r1)
; [eval] frac_val(sys__result.field_Main_r1)
; [eval] frac_val(r1)
; [eval] frac_val(sys__result.field_Main_r2) == frac_val(r2)
; [eval] frac_val(sys__result.field_Main_r2)
; [eval] frac_val(r2)
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- method_Main_forkOperator ----------
(declare-const diz@554@01 $Ref)
(declare-const current_thread_id@555@01 Int)
(declare-const globals@556@01 $Ref)
(declare-const diz@557@01 $Ref)
(declare-const current_thread_id@558@01 Int)
(declare-const globals@559@01 $Ref)
(push) ; 1
(declare-const $t@560@01 $Snap)
(assert (= $t@560@01 ($Snap.combine ($Snap.first $t@560@01) ($Snap.second $t@560@01))))
(assert (= ($Snap.first $t@560@01) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@557@01 $Ref.null)))
(assert (=
  ($Snap.second $t@560@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@560@01))
    ($Snap.second ($Snap.second $t@560@01)))))
(assert (= ($Snap.first ($Snap.second $t@560@01)) $Snap.unit))
; [eval] 0 <= current_thread_id
(assert (<= 0 current_thread_id@558@01))
(assert (=
  ($Snap.second ($Snap.second $t@560@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@560@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))
(set-option :timeout 0)
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@560@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))
  $Snap.unit))
; [eval] diz.field_Main_pr != null
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))
  $Snap.unit))
; [eval] frac_val(diz.field_Main_r1) != none
; [eval] frac_val(diz.field_Main_r1)
(assert (not
  (=
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))
    $Perm.No)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))
  $Snap.unit))
; [eval] frac_val(diz.field_Main_r2) != none
; [eval] frac_val(diz.field_Main_r2)
(assert (not
  (=
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))
    $Perm.No)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))
; [eval] frac_val(diz.field_Main_r1)
(assert (<=
  $Perm.No
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))
(assert (<=
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))
  $Snap.unit))
; [eval] diz.field_Main_pr.field_Program_f != null
(set-option :timeout 10)
(push) ; 2
(assert (not (<
  $Perm.No
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))
; [eval] frac_val(diz.field_Main_r1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))
; [eval] frac_val(diz.field_Main_r1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))))
; [eval] frac_val(diz.field_Main_r1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))
  $Snap.unit))
(push) ; 2
(assert (not (<
  $Perm.No
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))
  $Snap.unit))
; [eval] 0 <= diz.field_Main_rank
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@560@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))))
  $Snap.unit))
; [eval] diz.field_Main_rank < diz.field_Main_pr.field_Program_size
(push) ; 2
(assert (not (<
  $Perm.No
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@560@01))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))))
  $Snap.unit))
; [eval] 0 <= diz.field_Main_val
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))))))
  $Snap.unit))
; [eval] diz.field_Main_val < diz.field_Main_pr.field_Program_maxvalue
(push) ; 2
(assert (not (<
  $Perm.No
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))))))))))))))
(push) ; 2
(assert (not (<
  $Perm.No
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; [eval] p_method_Future_Elect__Integer__Integer__Integer__Integer__Integer(diz.field_Main_rank, diz.field_Main_pr.field_Program_size, diz.field_Main_val, diz.field_Main_pr.field_Program_maxvalue, 0)
(push) ; 2
(assert (not (<
  $Perm.No
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(push) ; 2
(assert (not (<
  $Perm.No
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@560@01))))))))))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@561@01 $Snap)
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- method_Main_joinOperator ----------
(declare-const diz@562@01 $Ref)
(declare-const current_thread_id@563@01 Int)
(declare-const globals@564@01 $Ref)
(declare-const diz@565@01 $Ref)
(declare-const current_thread_id@566@01 Int)
(declare-const globals@567@01 $Ref)
(push) ; 1
(declare-const $t@568@01 $Snap)
(assert (= $t@568@01 ($Snap.combine ($Snap.first $t@568@01) ($Snap.second $t@568@01))))
(assert (= ($Snap.first $t@568@01) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@565@01 $Ref.null)))
(assert (=
  ($Snap.second $t@568@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@568@01))
    ($Snap.second ($Snap.second $t@568@01)))))
(assert (= ($Snap.first ($Snap.second $t@568@01)) $Snap.unit))
; [eval] 0 <= current_thread_id
(assert (<= 0 current_thread_id@566@01))
; State saturation: after contract
(check-sat)
; unknown
(push) ; 2
(declare-const $t@569@01 $Snap)
(assert (= $t@569@01 ($Snap.combine ($Snap.first $t@569@01) ($Snap.second $t@569@01))))
(assert (=
  ($Snap.second $t@569@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@569@01))
    ($Snap.second ($Snap.second $t@569@01)))))
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second $t@569@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@569@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@569@01))))))
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@569@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@569@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01)))))))
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01)))))
  $Snap.unit))
; [eval] diz.field_Main_pr != null
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@569@01)))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01)))))))))
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01)))))))
  $Snap.unit))
; [eval] frac_val(diz.field_Main_r1) != none
; [eval] frac_val(diz.field_Main_r1)
(assert (not
  (=
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01))))))))
    $Perm.No)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01)))))))))))
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01)))))))))
  $Snap.unit))
; [eval] frac_val(diz.field_Main_r2) != none
; [eval] frac_val(diz.field_Main_r2)
(assert (not
  (=
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01))))))))))
    $Perm.No)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01)))))))))))))
; [eval] frac_val(diz.field_Main_r1)
(assert (<=
  $Perm.No
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01))))))))))
(assert (<=
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01))))))))
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01)))))))))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@569@01)))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01)))))))))))
  $Snap.unit))
; [eval] diz.field_Main_pr.field_Program_f != null
(set-option :timeout 10)
(push) ; 3
(assert (not (<
  $Perm.No
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01)))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01)))))))))))))))
; [eval] frac_val(diz.field_Main_r1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01))))))))))))))))
; [eval] frac_val(diz.field_Main_r1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01)))))))))))))))))
; [eval] frac_val(diz.field_Main_r1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01)))))))))))))))
  $Snap.unit))
(push) ; 3
(assert (not (<
  $Perm.No
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01))))))))))))))))
  $Snap.unit))
; [eval] 0 <= diz.field_Main_rank
(assert (<= 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@569@01)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01)))))))))))))))))
  $Snap.unit))
; [eval] diz.field_Main_rank < diz.field_Main_pr.field_Program_size
(push) ; 3
(assert (not (<
  $Perm.No
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@569@01)))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01))))))))))))))))))
  $Snap.unit))
; [eval] 0 <= diz.field_Main_val
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@569@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01)))))))))))))))))))
  $Snap.unit))
; [eval] diz.field_Main_val < diz.field_Main_pr.field_Program_maxvalue
(push) ; 3
(assert (not (<
  $Perm.No
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@569@01))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01))))))))))))))))
(push) ; 3
(assert (not (<
  $Perm.No
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@569@01)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] p_empty()
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- method_Main_run ----------
(declare-const diz@570@01 $Ref)
(declare-const current_thread_id@571@01 Int)
(declare-const globals@572@01 $Ref)
(declare-const diz@573@01 $Ref)
(declare-const current_thread_id@574@01 Int)
(declare-const globals@575@01 $Ref)
(push) ; 1
(declare-const $t@576@01 $Snap)
(assert (= $t@576@01 ($Snap.combine ($Snap.first $t@576@01) ($Snap.second $t@576@01))))
(assert (= ($Snap.first $t@576@01) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@573@01 $Ref.null)))
(assert (=
  ($Snap.second $t@576@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@576@01))
    ($Snap.second ($Snap.second $t@576@01)))))
(assert (= ($Snap.first ($Snap.second $t@576@01)) $Snap.unit))
; [eval] 0 <= current_thread_id
(assert (<= 0 current_thread_id@574@01))
(assert (=
  ($Snap.second ($Snap.second $t@576@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@576@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))
(set-option :timeout 0)
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@576@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@576@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))
  $Snap.unit))
; [eval] diz.field_Main_pr != null
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))
  $Snap.unit))
; [eval] frac_val(diz.field_Main_r1) != none
; [eval] frac_val(diz.field_Main_r1)
(assert (not
  (=
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    $Perm.No)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))
(push) ; 2
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))
  $Snap.unit))
; [eval] frac_val(diz.field_Main_r2) != none
; [eval] frac_val(diz.field_Main_r2)
(assert (not
  (=
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))))
    $Perm.No)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))))
; [eval] frac_val(diz.field_Main_r1)
(assert (<=
  $Perm.No
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))))
(assert (<=
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))
  $Snap.unit))
; [eval] diz.field_Main_pr.field_Program_f != null
(set-option :timeout 10)
(push) ; 2
(assert (not (<
  $Perm.No
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))))))
; [eval] frac_val(diz.field_Main_r1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))))))))))
; [eval] frac_val(diz.field_Main_r1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))))))))
; [eval] frac_val(diz.field_Main_r1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))))))
  $Snap.unit))
(push) ; 2
(assert (not (<
  $Perm.No
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))))))))))
  $Snap.unit))
; [eval] 0 <= diz.field_Main_rank
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@576@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))))))))
  $Snap.unit))
; [eval] diz.field_Main_rank < diz.field_Main_pr.field_Program_size
(push) ; 2
(assert (not (<
  $Perm.No
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@576@01))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))))))))))))
  $Snap.unit))
; [eval] 0 <= diz.field_Main_val
(assert (<=
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))))))))))
  $Snap.unit))
; [eval] diz.field_Main_val < diz.field_Main_pr.field_Program_maxvalue
(push) ; 2
(assert (not (<
  $Perm.No
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))))))))))
(push) ; 2
(assert (not (<
  $Perm.No
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; [eval] p_method_Future_Elect__Integer__Integer__Integer__Integer__Integer(diz.field_Main_rank, diz.field_Main_pr.field_Program_size, diz.field_Main_val, diz.field_Main_pr.field_Program_maxvalue, 0)
(push) ; 2
(assert (not (<
  $Perm.No
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(push) ; 2
(assert (not (<
  $Perm.No
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@577@01 $Snap)
(assert (= $t@577@01 ($Snap.combine ($Snap.first $t@577@01) ($Snap.second $t@577@01))))
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second $t@577@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@577@01))
    ($Snap.second ($Snap.second $t@577@01)))))
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second $t@577@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@577@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@577@01))))))
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@577@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@577@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@577@01))))
  $Snap.unit))
; [eval] diz.field_Main_pr != null
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@577@01))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01))))))))
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01))))))
  $Snap.unit))
; [eval] frac_val(diz.field_Main_r1) != none
; [eval] frac_val(diz.field_Main_r1)
(assert (not
  (=
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01)))))))
    $Perm.No)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01))))))))))
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01))))))))
  $Snap.unit))
; [eval] frac_val(diz.field_Main_r2) != none
; [eval] frac_val(diz.field_Main_r2)
(assert (not
  (=
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01)))))))))
    $Perm.No)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01))))))))))))
; [eval] frac_val(diz.field_Main_r1)
(assert (<=
  $Perm.No
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01)))))))))
(assert (<=
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01)))))))
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01))))))))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second $t@577@01))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01))))))))))
  $Snap.unit))
; [eval] diz.field_Main_pr.field_Program_f != null
(set-option :timeout 10)
(push) ; 3
(assert (not (<
  $Perm.No
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01))))))))))))))
; [eval] frac_val(diz.field_Main_r1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01)))))))))))))))
; [eval] frac_val(diz.field_Main_r1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01))))))))))))))))
; [eval] frac_val(diz.field_Main_r1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01))))))))))))))
  $Snap.unit))
(push) ; 3
(assert (not (<
  $Perm.No
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01)))))))))))))))
  $Snap.unit))
; [eval] 0 <= diz.field_Main_rank
(assert (<= 0 ($SortWrappers.$SnapToInt ($Snap.first $t@577@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01))))))))))))))))
  $Snap.unit))
; [eval] diz.field_Main_rank < diz.field_Main_pr.field_Program_size
(push) ; 3
(assert (not (<
  $Perm.No
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<
  ($SortWrappers.$SnapToInt ($Snap.first $t@577@01))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01)))))))))))))))))
  $Snap.unit))
; [eval] 0 <= diz.field_Main_val
(assert (<= 0 ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@577@01)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01))))))))))))))))))
  $Snap.unit))
; [eval] diz.field_Main_val < diz.field_Main_pr.field_Program_maxvalue
(push) ; 3
(assert (not (<
  $Perm.No
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second $t@577@01)))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01)))))))))))))))
(push) ; 3
(assert (not (<
  $Perm.No
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@577@01))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] p_empty()
(pop) ; 2
(push) ; 2
; [exec]
; var res__65: Int
(declare-const res__65@578@01 Int)
; [exec]
; var __flatten_27__66: Ref
(declare-const __flatten_27__66@579@01 $Ref)
; [exec]
; var __flatten_28__67: Process
(declare-const __flatten_28__67@580@01 Process)
; [exec]
; var __flatten_30__68: Ref
(declare-const __flatten_30__68@581@01 $Ref)
; [exec]
; var __flatten_31__69: Ref
(declare-const __flatten_31__69@582@01 $Ref)
; [exec]
; var __flatten_32__70: Ref
(declare-const __flatten_32__70@583@01 $Ref)
; [exec]
; var __flatten_33__71: Seq[Int]
(declare-const __flatten_33__71@584@01 Seq<Int>)
; [exec]
; var __flatten_35__72: Ref
(declare-const __flatten_35__72@585@01 $Ref)
; [exec]
; var __flatten_36__73: Process
(declare-const __flatten_36__73@586@01 Process)
; [exec]
; res__65 := method_Program_elect__Integer__Integer(diz.field_Main_pr, current_thread_id, globals, diz.field_Main_rank, diz.field_Main_val, diz.field_Main_r1, diz.field_Main_r2)
; [eval] diz != null
; [eval] frac_val(q1) != none
; [eval] frac_val(q1)
; [eval] frac_val(q2) != none
; [eval] frac_val(q2)
; [eval] frac_val(q1)
(set-option :timeout 0)
(push) ; 3
(assert (not (or
  (=
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    $Perm.No)
  (<
    $Perm.No
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= rank
; [eval] rank < diz.field_Program_size
(set-option :timeout 10)
(push) ; 3
(assert (not (<
  $Perm.No
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] frac_val(q1)
(set-option :timeout 0)
(push) ; 3
(assert (not (or
  (=
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    $Perm.No)
  (<
    $Perm.No
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 3
(assert (not (<
  $Perm.No
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] frac_val(q1)
(set-option :timeout 0)
(push) ; 3
(assert (not (or
  (=
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    $Perm.No)
  (<
    $Perm.No
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= vArg
; [eval] vArg < diz.field_Program_maxvalue
(set-option :timeout 10)
(push) ; 3
(assert (not (<
  $Perm.No
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= current_thread_id
; [eval] frac_val(q1)
(set-option :timeout 0)
(push) ; 3
(assert (not (or
  (=
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    $Perm.No)
  (<
    $Perm.No
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_f != null
(set-option :timeout 10)
(push) ; 3
(assert (not (<
  $Perm.No
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (<
  $Perm.No
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] p_method_Future_Elect__Integer__Integer__Integer__Integer__Integer(rank, diz.field_Program_size, vArg, diz.field_Program_maxvalue, 0)
(push) ; 3
(assert (not (<
  $Perm.No
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (<
  $Perm.No
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(declare-const sys__result@587@01 Int)
(declare-const $t@588@01 $Snap)
(assert (= $t@588@01 ($Snap.combine ($Snap.first $t@588@01) ($Snap.second $t@588@01))))
(assert (= ($Snap.first $t@588@01) $Snap.unit))
; [eval] frac_val(q1) != none
; [eval] frac_val(q1)
(assert (=
  ($Snap.second $t@588@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@588@01))
    ($Snap.second ($Snap.second $t@588@01)))))
(assert (= ($Snap.first ($Snap.second $t@588@01)) $Snap.unit))
; [eval] frac_val(q2) != none
; [eval] frac_val(q2)
(assert (=
  ($Snap.second ($Snap.second $t@588@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@588@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@588@01))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@588@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@588@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@588@01))))
  $Snap.unit))
; [eval] 0 <= rank
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01)))))
  $Snap.unit))
; [eval] rank < diz.field_Program_size
(push) ; 3
(assert (not (<
  $Perm.No
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@576@01))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@588@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01)))))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01)))))))
  $Snap.unit))
(push) ; 3
(assert (not (<
  $Perm.No
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01)))))))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01)))))))))
  $Snap.unit))
; [eval] 0 <= vArg
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01))))))))))
  $Snap.unit))
; [eval] vArg < diz.field_Program_maxvalue
(push) ; 3
(assert (not (<
  $Perm.No
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01))))))))))))))
; [eval] frac_val(q1)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01))))))))))))
  $Snap.unit))
; [eval] diz.field_Program_f != null
(push) ; 3
(assert (not (<
  $Perm.No
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01))))))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01))))))))))))))))
(push) ; 3
(assert (not (<
  $Perm.No
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] p_method_Future_Done__Integer__Integer(rank, sys__result)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01))))))))))))))
  $Snap.unit))
; [eval] 0 <= sys__result
(assert (<= 0 sys__result@587@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result < diz.field_Program_maxvalue
(push) ; 3
(assert (not (<
  $Perm.No
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<
  sys__result@587@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01))))))))))))))))
  $Snap.unit))
; [eval] diz.field_Program_size == old(diz.field_Program_size)
(push) ; 3
(assert (not (<
  $Perm.No
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_size)
(push) ; 3
(assert (not (<
  $Perm.No
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@588@01))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01)))))))))))))))))
  $Snap.unit))
; [eval] diz.field_Program_maxvalue == old(diz.field_Program_maxvalue)
(push) ; 3
(assert (not (<
  $Perm.No
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_maxvalue)
(push) ; 3
(assert (not (<
  $Perm.No
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01)))))))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01)))))))))))))))))
  $Snap.unit))
; [eval] diz.field_Program_f == old(diz.field_Program_f)
(push) ; 3
(assert (not (<
  $Perm.No
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.field_Program_f)
(push) ; 3
(assert (not (<
  $Perm.No
  (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01))))))))))))
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; inhale acc(method_Program_lock_invariant(diz.field_Main_pr, globals), write)
(declare-const $t@589@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; unfold acc(method_Program_lock_invariant(diz.field_Main_pr, globals), write)
(assert (= $t@589@01 ($Snap.combine ($Snap.first $t@589@01) ($Snap.second $t@589@01))))
(assert (= ($Snap.first $t@589@01) $Snap.unit))
; [eval] diz != null
(assert (=
  ($Snap.second $t@589@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@589@01))
    ($Snap.second ($Snap.second $t@589@01)))))
(set-option :timeout 0)
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (<
    $Perm.No
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))
  (=
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@589@01)))
    ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01))))))))))
(assert (<=
  $Perm.No
  (+
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    (/ (to_real 1) (to_real 2)))))
(assert (<=
  (+
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    (/ (to_real 1) (to_real 2)))
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (+
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
      (/ (to_real 1) (to_real 2))))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second $t@589@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@589@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@589@01))))))
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (<
    $Perm.No
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@589@01))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@588@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@589@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@589@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))
(push) ; 3
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (<
    $Perm.No
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))
  $Snap.unit))
; [eval] 0 < diz.field_Program_maxvalue
(set-option :timeout 10)
(push) ; 3
(assert (not (<
  $Perm.No
  (+
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<
  0
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))
(push) ; 3
(assert (not (<
  $Perm.No
  (+
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@589@01))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(assert (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@589@01)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 232 | First:(Second:($t@589@01)) | live]
; [else-branch: 232 | !(First:(Second:($t@589@01))) | dead]
(push) ; 3
; [then-branch: 232 | First:(Second:($t@589@01))]
(assert ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@589@01))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01))))))))))
(set-option :timeout 0)
(push) ; 4
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (implies
  (<
    $Perm.No
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))))
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01)))))))))))))))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))
  $Snap.unit))
; [eval] diz.field_Program_f != null
(set-option :timeout 10)
(push) ; 4
(assert (not (<
  $Perm.No
  (+
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01))))))))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01))))))))))
(push) ; 4
(assert (not (<
  $Perm.No
  (+
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@589@01))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 233 | First:(Second:($t@589@01)) | live]
; [else-branch: 233 | !(First:(Second:($t@589@01))) | dead]
(push) ; 4
; [then-branch: 233 | First:(Second:($t@589@01))]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01))))))))))))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))
  $Snap.unit))
; [eval] diz.field_Program_size == |diz.field_Program_f.channel_hist_value|
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] |diz.field_Program_f.channel_hist_value|
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@589@01))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@589@01))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 234 | First:(Second:($t@589@01)) | live]
; [else-branch: 234 | !(First:(Second:($t@589@01))) | dead]
(push) ; 5
; [then-branch: 234 | First:(Second:($t@589@01))]
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01))))))))))))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01))))))))))
    ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))))))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01))))))))))
  $Snap.unit))
; [eval] diz.field_Program_size == |diz.field_Program_f.results_hist_value|
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] |diz.field_Program_f.results_hist_value|
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@589@01))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01))))))))
  $Snap.unit))
; [eval] diz.field_Program_initialised ==> (forall i: Int, j: Int :: { diz.field_Program_f.channel_hist_value[i][j] } 0 <= i && (i < diz.field_Program_size && (0 <= j && j < |diz.field_Program_f.channel_hist_value[i]|)) ==> 0 <= diz.field_Program_f.channel_hist_value[i][j] && diz.field_Program_f.channel_hist_value[i][j] < diz.field_Program_maxvalue)
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(push) ; 7
(assert (not (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@589@01))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 235 | First:(Second:($t@589@01)) | live]
; [else-branch: 235 | !(First:(Second:($t@589@01))) | dead]
(push) ; 7
; [then-branch: 235 | First:(Second:($t@589@01))]
; [eval] (forall i: Int, j: Int :: { diz.field_Program_f.channel_hist_value[i][j] } 0 <= i && (i < diz.field_Program_size && (0 <= j && j < |diz.field_Program_f.channel_hist_value[i]|)) ==> 0 <= diz.field_Program_f.channel_hist_value[i][j] && diz.field_Program_f.channel_hist_value[i][j] < diz.field_Program_maxvalue)
(declare-const i@590@01 Int)
(declare-const j@591@01 Int)
(push) ; 8
; [eval] 0 <= i && (i < diz.field_Program_size && (0 <= j && j < |diz.field_Program_f.channel_hist_value[i]|)) ==> 0 <= diz.field_Program_f.channel_hist_value[i][j] && diz.field_Program_f.channel_hist_value[i][j] < diz.field_Program_maxvalue
; [eval] 0 <= i && (i < diz.field_Program_size && (0 <= j && j < |diz.field_Program_f.channel_hist_value[i]|))
; [eval] 0 <= i
(push) ; 9
; [then-branch: 236 | 0 <= i@590@01 | live]
; [else-branch: 236 | !(0 <= i@590@01) | live]
(push) ; 10
; [then-branch: 236 | 0 <= i@590@01]
(assert (<= 0 i@590@01))
; [eval] i < diz.field_Program_size
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
; [then-branch: 237 | i@590@01 < First:(Second:(Second:($t@589@01))) | live]
; [else-branch: 237 | !(i@590@01 < First:(Second:(Second:($t@589@01)))) | live]
(push) ; 12
; [then-branch: 237 | i@590@01 < First:(Second:(Second:($t@589@01)))]
(assert (<
  i@590@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@589@01))))))
; [eval] 0 <= j
(push) ; 13
; [then-branch: 238 | 0 <= j@591@01 | live]
; [else-branch: 238 | !(0 <= j@591@01) | live]
(push) ; 14
; [then-branch: 238 | 0 <= j@591@01]
(assert (<= 0 j@591@01))
; [eval] j < |diz.field_Program_f.channel_hist_value[i]|
; [eval] |diz.field_Program_f.channel_hist_value[i]|
; [eval] diz.field_Program_f.channel_hist_value[i]
(push) ; 15
(assert (not (<
  $Perm.No
  (+
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(assert (not (>= i@590@01 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
(assert (not (<
  i@590@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
(push) ; 14
; [else-branch: 238 | !(0 <= j@591@01)]
(assert (not (<= 0 j@591@01)))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(push) ; 12
; [else-branch: 237 | !(i@590@01 < First:(Second:(Second:($t@589@01))))]
(assert (not
  (<
    i@590@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@589@01)))))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 236 | !(0 <= i@590@01)]
(assert (not (<= 0 i@590@01)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
; [then-branch: 239 | j@591@01 < |First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@589@01))))))))[i@590@01]| && 0 <= j@591@01 && i@590@01 < First:(Second:(Second:($t@589@01))) && 0 <= i@590@01 | live]
; [else-branch: 239 | !(j@591@01 < |First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@589@01))))))))[i@590@01]| && 0 <= j@591@01 && i@590@01 < First:(Second:(Second:($t@589@01))) && 0 <= i@590@01) | live]
(push) ; 10
; [then-branch: 239 | j@591@01 < |First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@589@01))))))))[i@590@01]| && 0 <= j@591@01 && i@590@01 < First:(Second:(Second:($t@589@01))) && 0 <= i@590@01]
(assert (and
  (and
    (and
      (<
        j@591@01
        (Seq_length
          (Seq_index
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))
            i@590@01)))
      (<= 0 j@591@01))
    (<
      i@590@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@589@01))))))
  (<= 0 i@590@01)))
; [eval] 0 <= diz.field_Program_f.channel_hist_value[i][j] && diz.field_Program_f.channel_hist_value[i][j] < diz.field_Program_maxvalue
; [eval] 0 <= diz.field_Program_f.channel_hist_value[i][j]
; [eval] diz.field_Program_f.channel_hist_value[i][j]
; [eval] diz.field_Program_f.channel_hist_value[i]
(set-option :timeout 10)
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(assert (not (>= i@590@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (<
  i@590@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>= j@591@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
; [then-branch: 240 | 0 <= First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@589@01))))))))[i@590@01][j@591@01] | live]
; [else-branch: 240 | !(0 <= First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@589@01))))))))[i@590@01][j@591@01]) | live]
(push) ; 12
; [then-branch: 240 | 0 <= First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@589@01))))))))[i@590@01][j@591@01]]
(assert (<=
  0
  (Seq_index
    (Seq_index
      ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))
      i@590@01)
    j@591@01)))
; [eval] diz.field_Program_f.channel_hist_value[i][j] < diz.field_Program_maxvalue
; [eval] diz.field_Program_f.channel_hist_value[i][j]
; [eval] diz.field_Program_f.channel_hist_value[i]
(set-option :timeout 10)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(assert (not (>= i@590@01 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (<
  i@590@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (>= j@591@01 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
(push) ; 12
; [else-branch: 240 | !(0 <= First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@589@01))))))))[i@590@01][j@591@01])]
(assert (not
  (<=
    0
    (Seq_index
      (Seq_index
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))
        i@590@01)
      j@591@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(push) ; 10
; [else-branch: 239 | !(j@591@01 < |First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@589@01))))))))[i@590@01]| && 0 <= j@591@01 && i@590@01 < First:(Second:(Second:($t@589@01))) && 0 <= i@590@01)]
(assert (not
  (and
    (and
      (and
        (<
          j@591@01
          (Seq_length
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))
              i@590@01)))
        (<= 0 j@591@01))
      (<
        i@590@01
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@589@01))))))
    (<= 0 i@590@01))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (implies
  (and
    (and
      (and
        (<
          j@591@01
          (Seq_length
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))
              i@590@01)))
        (<= 0 j@591@01))
      (<
        i@590@01
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@589@01))))))
    (<= 0 i@590@01))
  (and
    (<
      j@591@01
      (Seq_length
        (Seq_index
          ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))
          i@590@01)))
    (<= 0 j@591@01)
    (<
      i@590@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@589@01)))))
    (<= 0 i@590@01))))
; Joined path conditions
(pop) ; 8
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@590@01 Int) (j@591@01 Int)) (!
  (implies
    (and
      (and
        (and
          (<
            j@591@01
            (Seq_length
              (Seq_index
                ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))
                i@590@01)))
          (<= 0 j@591@01))
        (<
          i@590@01
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@589@01))))))
      (<= 0 i@590@01))
    (and
      (<
        j@591@01
        (Seq_length
          (Seq_index
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))
            i@590@01)))
      (<= 0 j@591@01)
      (<
        i@590@01
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@589@01)))))
      (<= 0 i@590@01)))
  :pattern ((Seq_index
    (Seq_index
      ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))
      i@590@01)
    j@591@01))
  :qid |prog.l266-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (implies
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@589@01)))
  (forall ((i@590@01 Int) (j@591@01 Int)) (!
    (implies
      (and
        (and
          (and
            (<
              j@591@01
              (Seq_length
                (Seq_index
                  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))
                  i@590@01)))
            (<= 0 j@591@01))
          (<
            i@590@01
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@589@01))))))
        (<= 0 i@590@01))
      (and
        (<
          j@591@01
          (Seq_length
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))
              i@590@01)))
        (<= 0 j@591@01)
        (<
          i@590@01
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@589@01)))))
        (<= 0 i@590@01)))
    :pattern ((Seq_index
      (Seq_index
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))
        i@590@01)
      j@591@01))
    :qid |prog.l266-aux|))))
(assert (implies
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@589@01)))
  (forall ((i@590@01 Int) (j@591@01 Int)) (!
    (implies
      (and
        (and
          (and
            (<
              j@591@01
              (Seq_length
                (Seq_index
                  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))
                  i@590@01)))
            (<= 0 j@591@01))
          (<
            i@590@01
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@589@01))))))
        (<= 0 i@590@01))
      (and
        (<
          (Seq_index
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))
              i@590@01)
            j@591@01)
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@589@01))))))
        (<=
          0
          (Seq_index
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))
              i@590@01)
            j@591@01))))
    :pattern ((Seq_index
      (Seq_index
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))
        i@590@01)
      j@591@01))
    :qid |prog.l266|))))
; State saturation: after unfold
(set-option :timeout 40)
(check-sat)
; unknown
(assert (method_Program_lock_invariant%trigger $t@589@01 ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))) globals@575@01))
; [exec]
; inhale acc(method_Program_lock_held(diz.field_Main_pr, globals), write)
(declare-const $t@592@01 $Snap)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; __flatten_27__66 := diz.field_Main_pr
(declare-const __flatten_27__66@593@01 $Ref)
(assert (=
  __flatten_27__66@593@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))
; [exec]
; __flatten_28__67 := p_empty()
; [eval] p_empty()
(declare-const __flatten_28__67@594@01 Process)
(assert (= __flatten_28__67@594@01 (as p_empty<Process>  Process)))
; [exec]
; method_Future_Done__Integer__Integer_begin(__flatten_27__66.field_Program_f, current_thread_id, diz.field_Main_r2, __flatten_28__67, diz.field_Main_rank, res__65)
(set-option :timeout 10)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))
  __flatten_27__66@593@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] diz != null
; [eval] 0 <= current_thread_id
; [eval] frac_val(fr) != none
; [eval] frac_val(fr)
; [eval] p_seq(p_method_Future_Done__Integer__Integer(rank, v), proc)
; [eval] p_method_Future_Done__Integer__Integer(rank, v)
(push) ; 6
(assert (not (and
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@588@01))))))))))))
    ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))
  (=
    (p_method_Future_Done__Integer__Integer<Process> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@576@01)))) sys__result@587@01)
    (p_seq<Process> (p_method_Future_Done__Integer__Integer<Process> ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@576@01)))) sys__result@587@01) __flatten_28__67@594@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] write != none
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= $Perm.Write $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (not (= $Perm.Write $Perm.No)))
; [eval] 0 <= rank
; [eval] rank < |diz.results_hist_value|
; [eval] |diz.results_hist_value|
(push) ; 6
(assert (not (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@576@01))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@576@01))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))))))
(declare-const $t@595@01 $Snap)
(assert (= $t@595@01 ($Snap.combine ($Snap.first $t@595@01) ($Snap.second $t@595@01))))
(assert (= ($Snap.first $t@595@01) $Snap.unit))
; [eval] frac_val(fr) != none
; [eval] frac_val(fr)
(assert (=
  ($Snap.second $t@595@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@595@01))
    ($Snap.second ($Snap.second $t@595@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@595@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@595@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@595@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@595@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@595@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@595@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@595@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@595@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@595@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@595@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@595@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@595@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@595@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@595@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@595@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@595@01)))))))
  $Snap.unit))
; [eval] diz.results_hist_value == diz.results_hist_act
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@595@01)))))
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@595@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@595@01)))))))
  $Snap.unit))
; [eval] diz.results_hist_value == old(diz.results_hist_value)
; [eval] old(diz.results_hist_value)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@595@01)))))
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01))))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; __flatten_30__68 := diz.field_Main_pr
(declare-const __flatten_30__68@596@01 $Ref)
(assert (=
  __flatten_30__68@596@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))
; [exec]
; __flatten_32__70 := diz.field_Main_pr
(declare-const __flatten_32__70@597@01 $Ref)
(assert (=
  __flatten_32__70@597@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))
; [exec]
; __flatten_31__69 := __flatten_32__70.field_Program_f
(set-option :timeout 10)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))
  __flatten_32__70@597@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const __flatten_31__69@598@01 $Ref)
(assert (=
  __flatten_31__69@598@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01))))))))))
; [exec]
; __flatten_33__71 := method_Program_update__Sequence$Integer$__Integer__Integer(__flatten_31__69.results_hist_value, diz.field_Main_rank, res__65)
; [eval] method_Program_update__Sequence$Integer$__Integer__Integer(__flatten_31__69.results_hist_value, diz.field_Main_rank, res__65)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01))))))))
  __flatten_31__69@598@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [eval] 0 <= i
; [eval] i < |xs|
; [eval] |xs|
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@576@01))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@595@01)))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@576@01))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@595@01))))))))
(pop) ; 6
; Joined path conditions
(assert (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@576@01))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@595@01))))))))
(declare-const __flatten_33__71@599@01 Seq<Int>)
(assert (Seq_equal
  __flatten_33__71@599@01
  (method_Program_update__Sequence$Integer$__Integer__Integer ($Snap.combine
    $Snap.unit
    $Snap.unit) ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@595@01))))) ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@576@01)))) sys__result@587@01)))
; [exec]
; hist_set_results(__flatten_30__68.field_Program_f, current_thread_id, __flatten_33__71)
(set-option :timeout 10)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))
  __flatten_30__68@596@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] diz != null
; [eval] 0 <= current_thread_id
(declare-const $t@600@01 $Snap)
(assert (= $t@600@01 ($Snap.combine ($Snap.first $t@600@01) ($Snap.second $t@600@01))))
(assert (=
  ($Snap.second $t@600@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@600@01))
    ($Snap.second ($Snap.second $t@600@01)))))
(assert (= ($Snap.first ($Snap.second $t@600@01)) $Snap.unit))
; [eval] diz.results_hist_value == value
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first $t@600@01))
  __flatten_33__71@599@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; __flatten_35__72 := diz.field_Main_pr
(declare-const __flatten_35__72@601@01 $Ref)
(assert (=
  __flatten_35__72@601@01
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))))
; [exec]
; __flatten_36__73 := p_empty()
; [eval] p_empty()
(declare-const __flatten_36__73@602@01 Process)
(assert (= __flatten_36__73@602@01 (as p_empty<Process>  Process)))
; [exec]
; method_Future_Done__Integer__Integer_commit(__flatten_35__72.field_Program_f, current_thread_id, diz.field_Main_r2, __flatten_36__73, diz.field_Main_rank, res__65)
(set-option :timeout 10)
(push) ; 6
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))
  __flatten_35__72@601@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] diz != null
; [eval] 0 <= current_thread_id
; [eval] frac_val(fr) != none
; [eval] frac_val(fr)
(push) ; 6
(assert (not (= __flatten_28__67@594@01 __flatten_36__73@602@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] write != none
; [eval] 0 <= rank
; [eval] rank < |diz.results_hist_value|
; [eval] |diz.results_hist_value|
(set-option :timeout 0)
(push) ; 6
(assert (not (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@576@01))))
  (Seq_length ($SortWrappers.$SnapToSeq<Int> ($Snap.first $t@600@01))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@576@01))))
  (Seq_length ($SortWrappers.$SnapToSeq<Int> ($Snap.first $t@600@01)))))
; [eval] |diz.results_hist_value| == |diz.results_hist_act|
; [eval] |diz.results_hist_value|
; [eval] |diz.results_hist_act|
(push) ; 6
(assert (not (=
  (Seq_length ($SortWrappers.$SnapToSeq<Int> ($Snap.first $t@600@01)))
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@595@01))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length ($SortWrappers.$SnapToSeq<Int> ($Snap.first $t@600@01)))
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@595@01)))))))
; [eval] diz.results_hist_value[rank] == v
; [eval] diz.results_hist_value[rank]
(push) ; 6
(assert (not (>=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@576@01))))
  0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first $t@600@01))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@576@01)))))
  sys__result@587@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first $t@600@01))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@576@01)))))
  sys__result@587@01))
; [eval] (forall i: Int :: { diz.results_hist_value[i] } { diz.results_hist_act[i] } 0 <= i && (i < |diz.results_hist_value| && i != rank) ==> diz.results_hist_value[i] == diz.results_hist_act[i])
(declare-const i@603@01 Int)
(push) ; 6
; [eval] 0 <= i && (i < |diz.results_hist_value| && i != rank) ==> diz.results_hist_value[i] == diz.results_hist_act[i]
; [eval] 0 <= i && (i < |diz.results_hist_value| && i != rank)
; [eval] 0 <= i
(push) ; 7
; [then-branch: 241 | 0 <= i@603@01 | live]
; [else-branch: 241 | !(0 <= i@603@01) | live]
(push) ; 8
; [then-branch: 241 | 0 <= i@603@01]
(assert (<= 0 i@603@01))
; [eval] i < |diz.results_hist_value|
; [eval] |diz.results_hist_value|
(push) ; 9
; [then-branch: 242 | i@603@01 < |First:($t@600@01)| | live]
; [else-branch: 242 | !(i@603@01 < |First:($t@600@01)|) | live]
(push) ; 10
; [then-branch: 242 | i@603@01 < |First:($t@600@01)|]
(assert (< i@603@01 (Seq_length ($SortWrappers.$SnapToSeq<Int> ($Snap.first $t@600@01)))))
; [eval] i != rank
(pop) ; 10
(push) ; 10
; [else-branch: 242 | !(i@603@01 < |First:($t@600@01)|)]
(assert (not
  (<
    i@603@01
    (Seq_length ($SortWrappers.$SnapToSeq<Int> ($Snap.first $t@600@01))))))
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 241 | !(0 <= i@603@01)]
(assert (not (<= 0 i@603@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
; [then-branch: 243 | i@603@01 != First:(Second:(Second:($t@576@01))) && i@603@01 < |First:($t@600@01)| && 0 <= i@603@01 | live]
; [else-branch: 243 | !(i@603@01 != First:(Second:(Second:($t@576@01))) && i@603@01 < |First:($t@600@01)| && 0 <= i@603@01) | live]
(push) ; 8
; [then-branch: 243 | i@603@01 != First:(Second:(Second:($t@576@01))) && i@603@01 < |First:($t@600@01)| && 0 <= i@603@01]
(assert (and
  (and
    (not
      (=
        i@603@01
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@576@01))))))
    (<
      i@603@01
      (Seq_length ($SortWrappers.$SnapToSeq<Int> ($Snap.first $t@600@01)))))
  (<= 0 i@603@01)))
; [eval] diz.results_hist_value[i] == diz.results_hist_act[i]
; [eval] diz.results_hist_value[i]
(push) ; 9
(assert (not (>= i@603@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] diz.results_hist_act[i]
(push) ; 9
(assert (not (>= i@603@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (<
  i@603@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@595@01))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 243 | !(i@603@01 != First:(Second:(Second:($t@576@01))) && i@603@01 < |First:($t@600@01)| && 0 <= i@603@01)]
(assert (not
  (and
    (and
      (not
        (=
          i@603@01
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@576@01))))))
      (<
        i@603@01
        (Seq_length ($SortWrappers.$SnapToSeq<Int> ($Snap.first $t@600@01)))))
    (<= 0 i@603@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (implies
  (and
    (and
      (not
        (=
          i@603@01
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@576@01))))))
      (<
        i@603@01
        (Seq_length ($SortWrappers.$SnapToSeq<Int> ($Snap.first $t@600@01)))))
    (<= 0 i@603@01))
  (and
    (not
      (=
        i@603@01
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@576@01))))))
    (<
      i@603@01
      (Seq_length ($SortWrappers.$SnapToSeq<Int> ($Snap.first $t@600@01))))
    (<= 0 i@603@01))))
; Joined path conditions
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@603@01 Int)) (!
  (implies
    (and
      (and
        (not
          (=
            i@603@01
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@576@01))))))
        (<
          i@603@01
          (Seq_length ($SortWrappers.$SnapToSeq<Int> ($Snap.first $t@600@01)))))
      (<= 0 i@603@01))
    (and
      (not
        (=
          i@603@01
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@576@01))))))
      (<
        i@603@01
        (Seq_length ($SortWrappers.$SnapToSeq<Int> ($Snap.first $t@600@01))))
      (<= 0 i@603@01)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first $t@600@01))
    i@603@01))
  :qid |prog.l395-aux|)))
(assert (forall ((i@603@01 Int)) (!
  (implies
    (and
      (and
        (not
          (=
            i@603@01
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@576@01))))))
        (<
          i@603@01
          (Seq_length ($SortWrappers.$SnapToSeq<Int> ($Snap.first $t@600@01)))))
      (<= 0 i@603@01))
    (and
      (not
        (=
          i@603@01
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@576@01))))))
      (<
        i@603@01
        (Seq_length ($SortWrappers.$SnapToSeq<Int> ($Snap.first $t@600@01))))
      (<= 0 i@603@01)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@595@01))))
    i@603@01))
  :qid |prog.l395-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(push) ; 6
(assert (not (forall ((i@603@01 Int)) (!
  (implies
    (and
      (and
        (not
          (=
            i@603@01
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@576@01))))))
        (<
          i@603@01
          (Seq_length ($SortWrappers.$SnapToSeq<Int> ($Snap.first $t@600@01)))))
      (<= 0 i@603@01))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first $t@600@01))
        i@603@01)
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@595@01))))
        i@603@01)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first $t@600@01))
    i@603@01))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@595@01))))
    i@603@01))
  :qid |prog.l395|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (forall ((i@603@01 Int)) (!
  (implies
    (and
      (and
        (not
          (=
            i@603@01
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@576@01))))))
        (<
          i@603@01
          (Seq_length ($SortWrappers.$SnapToSeq<Int> ($Snap.first $t@600@01)))))
      (<= 0 i@603@01))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first $t@600@01))
        i@603@01)
      (Seq_index
        ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@595@01))))
        i@603@01)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first $t@600@01))
    i@603@01))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@595@01))))
    i@603@01))
  :qid |prog.l395|)))
(declare-const $t@604@01 $Snap)
(assert (= $t@604@01 ($Snap.combine ($Snap.first $t@604@01) ($Snap.second $t@604@01))))
(assert (= ($Snap.first $t@604@01) $Snap.unit))
; [eval] frac_val(fr) != none
; [eval] frac_val(fr)
(assert (=
  ($Snap.second $t@604@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@604@01))
    ($Snap.second ($Snap.second $t@604@01)))))
(assert (=
  ($Snap.second ($Snap.second $t@604@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@604@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@604@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@604@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@604@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@604@01)))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@604@01))))
  $Snap.unit))
; [eval] diz.results_hist_value == old(diz.results_hist_value)
; [eval] old(diz.results_hist_value)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@604@01))))
  ($SortWrappers.$SnapToSeq<Int> ($Snap.first $t@600@01))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; exhale acc(method_Program_lock_held(diz.field_Main_pr, globals), write)
; [exec]
; fold acc(method_Program_lock_invariant(diz.field_Main_pr, globals), write)
; [eval] diz != null
(set-option :timeout 0)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 6
(assert (not (=
  (-
    (+
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
      (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+
        (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
        (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (-
    (+
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
      (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+
        (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
        (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2))))))
(assert (<=
  (-
    (+
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
      (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+
        (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
        (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2))))
  $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
        (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+
          (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
          (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2)))))
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01))))))
      $Ref.null))))
(set-option :timeout 0)
(push) ; 6
(assert (not (or
  (=
    (-
      (/ (to_real 1) (to_real 2))
      ($Perm.min
        (+
          (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
          (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    $Perm.No)
  (<
    (-
      (/ (to_real 1) (to_real 2))
      ($Perm.min
        (+
          (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
          (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 6
(assert (not (=
  (-
    (+
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
      (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+
        (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
        (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(assert (not (or
  (=
    (-
      (/ (to_real 1) (to_real 2))
      ($Perm.min
        (+
          (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
          (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    $Perm.No)
  (<
    (-
      (/ (to_real 1) (to_real 2))
      ($Perm.min
        (+
          (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
          (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 6
(assert (not (=
  (-
    (+
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
      (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+
        (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
        (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(assert (not (or
  (=
    (-
      (/ (to_real 1) (to_real 2))
      ($Perm.min
        (+
          (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
          (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    $Perm.No)
  (<
    (-
      (/ (to_real 1) (to_real 2))
      ($Perm.min
        (+
          (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
          (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] 0 < diz.field_Program_maxvalue
(set-option :timeout 10)
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@589@01))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 244 | First:(Second:($t@589@01)) | live]
; [else-branch: 244 | !(First:(Second:($t@589@01))) | dead]
(push) ; 6
; [then-branch: 244 | First:(Second:($t@589@01))]
(set-option :timeout 0)
(push) ; 7
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 7
(assert (not (=
  (-
    (+
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
      (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+
        (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
        (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2))))
  $Perm.No)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (or
  (=
    (-
      (/ (to_real 1) (to_real 2))
      ($Perm.min
        (+
          (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
          (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    $Perm.No)
  (<
    (-
      (/ (to_real 1) (to_real 2))
      ($Perm.min
        (+
          (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
          (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_f != null
(set-option :timeout 10)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@589@01))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 245 | First:(Second:($t@589@01)) | live]
; [else-branch: 245 | !(First:(Second:($t@589@01))) | dead]
(push) ; 7
; [then-branch: 245 | First:(Second:($t@589@01))]
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_size == |diz.field_Program_f.channel_hist_value|
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] |diz.field_Program_f.channel_hist_value|
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@589@01))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 246 | First:(Second:($t@589@01)) | live]
; [else-branch: 246 | !(First:(Second:($t@589@01))) | dead]
(push) ; 8
; [then-branch: 246 | First:(Second:($t@589@01))]
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Program_size == |diz.field_Program_f.results_hist_value|
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] |diz.field_Program_f.results_hist_value|
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@589@01))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@604@01))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@589@01))))
  (Seq_length
    ($SortWrappers.$SnapToSeq<Int> ($Snap.first ($Snap.second ($Snap.second $t@604@01)))))))
; [eval] diz.field_Program_initialised ==> (forall i: Int, j: Int :: { diz.field_Program_f.channel_hist_value[i][j] } 0 <= i && (i < diz.field_Program_size && (0 <= j && j < |diz.field_Program_f.channel_hist_value[i]|)) ==> 0 <= diz.field_Program_f.channel_hist_value[i][j] && diz.field_Program_f.channel_hist_value[i][j] < diz.field_Program_maxvalue)
(set-option :timeout 10)
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(push) ; 10
(assert (not (not ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@589@01))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 247 | First:(Second:($t@589@01)) | live]
; [else-branch: 247 | !(First:(Second:($t@589@01))) | dead]
(push) ; 10
; [then-branch: 247 | First:(Second:($t@589@01))]
; [eval] (forall i: Int, j: Int :: { diz.field_Program_f.channel_hist_value[i][j] } 0 <= i && (i < diz.field_Program_size && (0 <= j && j < |diz.field_Program_f.channel_hist_value[i]|)) ==> 0 <= diz.field_Program_f.channel_hist_value[i][j] && diz.field_Program_f.channel_hist_value[i][j] < diz.field_Program_maxvalue)
(declare-const i@605@01 Int)
(declare-const j@606@01 Int)
(push) ; 11
; [eval] 0 <= i && (i < diz.field_Program_size && (0 <= j && j < |diz.field_Program_f.channel_hist_value[i]|)) ==> 0 <= diz.field_Program_f.channel_hist_value[i][j] && diz.field_Program_f.channel_hist_value[i][j] < diz.field_Program_maxvalue
; [eval] 0 <= i && (i < diz.field_Program_size && (0 <= j && j < |diz.field_Program_f.channel_hist_value[i]|))
; [eval] 0 <= i
(push) ; 12
; [then-branch: 248 | 0 <= i@605@01 | live]
; [else-branch: 248 | !(0 <= i@605@01) | live]
(push) ; 13
; [then-branch: 248 | 0 <= i@605@01]
(assert (<= 0 i@605@01))
; [eval] i < diz.field_Program_size
(push) ; 14
(assert (not (<
  $Perm.No
  (+
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
; [then-branch: 249 | i@605@01 < First:(Second:(Second:($t@589@01))) | live]
; [else-branch: 249 | !(i@605@01 < First:(Second:(Second:($t@589@01)))) | live]
(push) ; 15
; [then-branch: 249 | i@605@01 < First:(Second:(Second:($t@589@01)))]
(assert (<
  i@605@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@589@01))))))
; [eval] 0 <= j
(push) ; 16
; [then-branch: 250 | 0 <= j@606@01 | live]
; [else-branch: 250 | !(0 <= j@606@01) | live]
(push) ; 17
; [then-branch: 250 | 0 <= j@606@01]
(assert (<= 0 j@606@01))
; [eval] j < |diz.field_Program_f.channel_hist_value[i]|
; [eval] |diz.field_Program_f.channel_hist_value[i]|
; [eval] diz.field_Program_f.channel_hist_value[i]
(push) ; 18
(assert (not (<
  $Perm.No
  (+
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(assert (not (>= i@605@01 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(assert (not (<
  i@605@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(pop) ; 17
(push) ; 17
; [else-branch: 250 | !(0 <= j@606@01)]
(assert (not (<= 0 j@606@01)))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(pop) ; 15
(push) ; 15
; [else-branch: 249 | !(i@605@01 < First:(Second:(Second:($t@589@01))))]
(assert (not
  (<
    i@605@01
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@589@01)))))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(push) ; 13
; [else-branch: 248 | !(0 <= i@605@01)]
(assert (not (<= 0 i@605@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
; [then-branch: 251 | j@606@01 < |First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@589@01))))))))[i@605@01]| && 0 <= j@606@01 && i@605@01 < First:(Second:(Second:($t@589@01))) && 0 <= i@605@01 | live]
; [else-branch: 251 | !(j@606@01 < |First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@589@01))))))))[i@605@01]| && 0 <= j@606@01 && i@605@01 < First:(Second:(Second:($t@589@01))) && 0 <= i@605@01) | live]
(push) ; 13
; [then-branch: 251 | j@606@01 < |First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@589@01))))))))[i@605@01]| && 0 <= j@606@01 && i@605@01 < First:(Second:(Second:($t@589@01))) && 0 <= i@605@01]
(assert (and
  (and
    (and
      (<
        j@606@01
        (Seq_length
          (Seq_index
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))
            i@605@01)))
      (<= 0 j@606@01))
    (<
      i@605@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@589@01))))))
  (<= 0 i@605@01)))
; [eval] 0 <= diz.field_Program_f.channel_hist_value[i][j] && diz.field_Program_f.channel_hist_value[i][j] < diz.field_Program_maxvalue
; [eval] 0 <= diz.field_Program_f.channel_hist_value[i][j]
; [eval] diz.field_Program_f.channel_hist_value[i][j]
; [eval] diz.field_Program_f.channel_hist_value[i]
(set-option :timeout 10)
(push) ; 14
(assert (not (<
  $Perm.No
  (+
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= i@605@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (<
  i@605@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= j@606@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
; [then-branch: 252 | 0 <= First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@589@01))))))))[i@605@01][j@606@01] | live]
; [else-branch: 252 | !(0 <= First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@589@01))))))))[i@605@01][j@606@01]) | live]
(push) ; 15
; [then-branch: 252 | 0 <= First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@589@01))))))))[i@605@01][j@606@01]]
(assert (<=
  0
  (Seq_index
    (Seq_index
      ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))
      i@605@01)
    j@606@01)))
; [eval] diz.field_Program_f.channel_hist_value[i][j] < diz.field_Program_maxvalue
; [eval] diz.field_Program_f.channel_hist_value[i][j]
; [eval] diz.field_Program_f.channel_hist_value[i]
(set-option :timeout 10)
(push) ; 16
(assert (not (<
  $Perm.No
  (+
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(assert (not (>= i@605@01 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(assert (not (<
  i@605@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(assert (not (>= j@606@01 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 16
(assert (not (<
  $Perm.No
  (+
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    (/ (to_real 1) (to_real 2))))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
(push) ; 15
; [else-branch: 252 | !(0 <= First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@589@01))))))))[i@605@01][j@606@01])]
(assert (not
  (<=
    0
    (Seq_index
      (Seq_index
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))
        i@605@01)
      j@606@01))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(push) ; 13
; [else-branch: 251 | !(j@606@01 < |First:(First:(Second:(Second:(Second:(Second:(Second:(Second:($t@589@01))))))))[i@605@01]| && 0 <= j@606@01 && i@605@01 < First:(Second:(Second:($t@589@01))) && 0 <= i@605@01)]
(assert (not
  (and
    (and
      (and
        (<
          j@606@01
          (Seq_length
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))
              i@605@01)))
        (<= 0 j@606@01))
      (<
        i@605@01
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@589@01))))))
    (<= 0 i@605@01))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (implies
  (and
    (and
      (and
        (<
          j@606@01
          (Seq_length
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))
              i@605@01)))
        (<= 0 j@606@01))
      (<
        i@605@01
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@589@01))))))
    (<= 0 i@605@01))
  (and
    (<
      j@606@01
      (Seq_length
        (Seq_index
          ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))
          i@605@01)))
    (<= 0 j@606@01)
    (<
      i@605@01
      ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@589@01)))))
    (<= 0 i@605@01))))
; Joined path conditions
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: globals (tlq)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@605@01 Int) (j@606@01 Int)) (!
  (implies
    (and
      (and
        (and
          (<
            j@606@01
            (Seq_length
              (Seq_index
                ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))
                i@605@01)))
          (<= 0 j@606@01))
        (<
          i@605@01
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@589@01))))))
      (<= 0 i@605@01))
    (and
      (<
        j@606@01
        (Seq_length
          (Seq_index
            ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))
            i@605@01)))
      (<= 0 j@606@01)
      (<
        i@605@01
        ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@589@01)))))
      (<= 0 i@605@01)))
  :pattern ((Seq_index
    (Seq_index
      ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))
      i@605@01)
    j@606@01))
  :qid |prog.l266-aux|)))
; Nested auxiliary terms: non-globals (tlq)
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (implies
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@589@01)))
  (forall ((i@605@01 Int) (j@606@01 Int)) (!
    (implies
      (and
        (and
          (and
            (<
              j@606@01
              (Seq_length
                (Seq_index
                  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))
                  i@605@01)))
            (<= 0 j@606@01))
          (<
            i@605@01
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@589@01))))))
        (<= 0 i@605@01))
      (and
        (<
          j@606@01
          (Seq_length
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))
              i@605@01)))
        (<= 0 j@606@01)
        (<
          i@605@01
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@589@01)))))
        (<= 0 i@605@01)))
    :pattern ((Seq_index
      (Seq_index
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))
        i@605@01)
      j@606@01))
    :qid |prog.l266-aux|))))
(set-option :timeout 0)
(push) ; 9
(assert (not (implies
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@589@01)))
  (forall ((i@605@01 Int) (j@606@01 Int)) (!
    (implies
      (and
        (and
          (and
            (<
              j@606@01
              (Seq_length
                (Seq_index
                  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))
                  i@605@01)))
            (<= 0 j@606@01))
          (<
            i@605@01
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@589@01))))))
        (<= 0 i@605@01))
      (and
        (<
          (Seq_index
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))
              i@605@01)
            j@606@01)
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@589@01))))))
        (<=
          0
          (Seq_index
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))
              i@605@01)
            j@606@01))))
    :pattern ((Seq_index
      (Seq_index
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))
        i@605@01)
      j@606@01))
    :qid |prog.l266|)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (implies
  ($SortWrappers.$SnapToBool ($Snap.first ($Snap.second $t@589@01)))
  (forall ((i@605@01 Int) (j@606@01 Int)) (!
    (implies
      (and
        (and
          (and
            (<
              j@606@01
              (Seq_length
                (Seq_index
                  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))
                  i@605@01)))
            (<= 0 j@606@01))
          (<
            i@605@01
            ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@589@01))))))
        (<= 0 i@605@01))
      (and
        (<
          (Seq_index
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))
              i@605@01)
            j@606@01)
          ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@589@01))))))
        (<=
          0
          (Seq_index
            (Seq_index
              ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))
              i@605@01)
            j@606@01))))
    :pattern ((Seq_index
      (Seq_index
        ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))
        i@605@01)
      j@606@01))
    :qid |prog.l266|))))
(assert (method_Program_lock_invariant%trigger ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($Snap.first ($Snap.second $t@589@01))
    ($Snap.combine
      ($Snap.first ($Snap.second ($Snap.second $t@589@01)))
      ($Snap.combine
        ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@589@01))))
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($Snap.combine
              ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))
              $Snap.unit)
            ($Snap.combine
              ($Snap.combine
                ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01))))))))
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))))
                  $Snap.unit))
              ($Snap.combine
                ($Snap.combine
                  ($Snap.first ($Snap.second ($Snap.second $t@604@01)))
                  ($Snap.combine
                    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@604@01))))
                    $Snap.unit))
                $Snap.unit)))))))) ($SortWrappers.$SnapTo$Ref ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))) globals@575@01))
; [exec]
; exhale acc(method_Program_lock_invariant(diz.field_Main_pr, globals), write)
; [exec]
; label method_end_method_Main_run_8
(push) ; 9
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Main_pr != null
(push) ; 9
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] frac_val(diz.field_Main_r1) != none
; [eval] frac_val(diz.field_Main_r1)
(push) ; 9
(assert (not (not (= 2 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] frac_val(diz.field_Main_r2) != none
; [eval] frac_val(diz.field_Main_r2)
; [eval] frac_val(diz.field_Main_r1)
(push) ; 9
(assert (not (or
  (=
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    $Perm.No)
  (<
    $Perm.No
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 9
(assert (not (=
  (-
    (-
      (+
        (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
        (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+
          (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
          (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    ($Perm.min
      (-
        (+
          (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
          (/ (to_real 1) (to_real 2)))
        ($Perm.min
          (+
            (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
            (/ (to_real 1) (to_real 2)))
          (/ (to_real 1) (to_real 2))))
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (or
  (=
    (-
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
      ($Perm.min
        (-
          (+
            (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
            (/ (to_real 1) (to_real 2)))
          ($Perm.min
            (+
              (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
              (/ (to_real 1) (to_real 2)))
            (/ (to_real 1) (to_real 2))))
        (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))))
    $Perm.No)
  (<
    (-
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
      ($Perm.min
        (-
          (+
            (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
            (/ (to_real 1) (to_real 2)))
          ($Perm.min
            (+
              (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
              (/ (to_real 1) (to_real 2)))
            (/ (to_real 1) (to_real 2))))
        (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] diz.field_Main_pr.field_Program_f != null
(set-option :timeout 10)
(push) ; 9
(assert (not (<
  $Perm.No
  (-
    (+
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
      (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+
        (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
        (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2)))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] frac_val(diz.field_Main_r1)
(set-option :timeout 0)
(push) ; 9
(assert (not (or
  (=
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    $Perm.No)
  (<
    $Perm.No
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 9
(assert (not (=
  (-
    (-
      (+
        (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
        (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+
          (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
          (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    ($Perm.min
      (-
        (+
          (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
          (/ (to_real 1) (to_real 2)))
        ($Perm.min
          (+
            (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
            (/ (to_real 1) (to_real 2)))
          (/ (to_real 1) (to_real 2))))
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (or
  (=
    (-
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
      ($Perm.min
        (-
          (+
            (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
            (/ (to_real 1) (to_real 2)))
          ($Perm.min
            (+
              (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
              (/ (to_real 1) (to_real 2)))
            (/ (to_real 1) (to_real 2))))
        (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))))
    $Perm.No)
  (<
    (-
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
      ($Perm.min
        (-
          (+
            (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
            (/ (to_real 1) (to_real 2)))
          ($Perm.min
            (+
              (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
              (/ (to_real 1) (to_real 2)))
            (/ (to_real 1) (to_real 2))))
        (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] frac_val(diz.field_Main_r1)
(push) ; 9
(assert (not (or
  (=
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    $Perm.No)
  (<
    $Perm.No
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 9
(assert (not (=
  (-
    (-
      (+
        (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
        (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+
          (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
          (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    ($Perm.min
      (-
        (+
          (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
          (/ (to_real 1) (to_real 2)))
        ($Perm.min
          (+
            (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
            (/ (to_real 1) (to_real 2)))
          (/ (to_real 1) (to_real 2))))
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (or
  (=
    (-
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
      ($Perm.min
        (-
          (+
            (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
            (/ (to_real 1) (to_real 2)))
          ($Perm.min
            (+
              (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
              (/ (to_real 1) (to_real 2)))
            (/ (to_real 1) (to_real 2))))
        (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))))
    $Perm.No)
  (<
    (-
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
      ($Perm.min
        (-
          (+
            (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
            (/ (to_real 1) (to_real 2)))
          ($Perm.min
            (+
              (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
              (/ (to_real 1) (to_real 2)))
            (/ (to_real 1) (to_real 2))))
        (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] frac_val(diz.field_Main_r1)
(push) ; 9
(assert (not (or
  (=
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
    $Perm.No)
  (<
    $Perm.No
    (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 9
(assert (not (=
  (-
    (-
      (+
        (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
        (/ (to_real 1) (to_real 2)))
      ($Perm.min
        (+
          (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
          (/ (to_real 1) (to_real 2)))
        (/ (to_real 1) (to_real 2))))
    ($Perm.min
      (-
        (+
          (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
          (/ (to_real 1) (to_real 2)))
        ($Perm.min
          (+
            (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
            (/ (to_real 1) (to_real 2)))
          (/ (to_real 1) (to_real 2))))
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (or
  (=
    (-
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
      ($Perm.min
        (-
          (+
            (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
            (/ (to_real 1) (to_real 2)))
          ($Perm.min
            (+
              (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
              (/ (to_real 1) (to_real 2)))
            (/ (to_real 1) (to_real 2))))
        (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))))
    $Perm.No)
  (<
    (-
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
      ($Perm.min
        (-
          (+
            (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
            (/ (to_real 1) (to_real 2)))
          ($Perm.min
            (+
              (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
              (/ (to_real 1) (to_real 2)))
            (/ (to_real 1) (to_real 2))))
        (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))))
    $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 10)
(push) ; 9
(assert (not (<
  $Perm.No
  (-
    (+
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
      (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+
        (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
        (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2)))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] 0 <= diz.field_Main_rank
; [eval] diz.field_Main_rank < diz.field_Main_pr.field_Program_size
(push) ; 9
(assert (not (<
  $Perm.No
  (-
    (+
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
      (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+
        (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
        (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2)))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@576@01))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@589@01)))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@576@01))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second $t@589@01))))))
; [eval] 0 <= diz.field_Main_val
; [eval] diz.field_Main_val < diz.field_Main_pr.field_Program_maxvalue
(set-option :timeout 10)
(push) ; 9
(assert (not (<
  $Perm.No
  (-
    (+
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
      (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+
        (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
        (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2)))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@589@01))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@589@01)))))))
(set-option :timeout 10)
(push) ; 9
(assert (not (<
  $Perm.No
  (-
    (+
      (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
      (/ (to_real 1) (to_real 2)))
    ($Perm.min
      (+
        (frac_val<Perm> ($SortWrappers.$SnapTofrac ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@576@01)))))))))
        (/ (to_real 1) (to_real 2)))
      (/ (to_real 1) (to_real 2)))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] p_empty()
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- array_new_Sequence_Sequence_Integer__ ----------
(declare-const size0@607@01 Int)
(declare-const sys__result@608@01 Seq<Seq<Int>>)
(declare-const size0@609@01 Int)
(declare-const sys__result@610@01 Seq<Seq<Int>>)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@611@01 $Snap)
(assert (= $t@611@01 $Snap.unit))
; [eval] 0 < size0 ==> sys__result == Seq[Seq[Int]]()
; [eval] 0 < size0
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (not (< 0 size0@609@01))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (< 0 size0@609@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 253 | 0 < size0@609@01 | live]
; [else-branch: 253 | !(0 < size0@609@01) | live]
(push) ; 4
; [then-branch: 253 | 0 < size0@609@01]
(assert (< 0 size0@609@01))
; [eval] sys__result == Seq[Seq[Int]]()
; [eval] Seq[Seq[Int]]()
(pop) ; 4
(push) ; 4
; [else-branch: 253 | !(0 < size0@609@01)]
(assert (not (< 0 size0@609@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (< 0 size0@609@01)
  (Seq_equal sys__result@610@01 (as Seq_empty  Seq<Seq<Int>>))))
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
; ---------- array_new_Sequence_Integer_ ----------
(declare-const size0@612@01 Int)
(declare-const sys__result@613@01 Seq<Int>)
(declare-const size0@614@01 Int)
(declare-const sys__result@615@01 Seq<Int>)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(push) ; 2
(declare-const $t@616@01 $Snap)
(assert (= $t@616@01 $Snap.unit))
; [eval] 0 < size0 ==> sys__result == Seq[Int]()
; [eval] 0 < size0
(push) ; 3
(set-option :timeout 10)
(push) ; 4
(assert (not (not (< 0 size0@614@01))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (< 0 size0@614@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 254 | 0 < size0@614@01 | live]
; [else-branch: 254 | !(0 < size0@614@01) | live]
(push) ; 4
; [then-branch: 254 | 0 < size0@614@01]
(assert (< 0 size0@614@01))
; [eval] sys__result == Seq[Int]()
; [eval] Seq[Int]()
(pop) ; 4
(push) ; 4
; [else-branch: 254 | !(0 < size0@614@01)]
(assert (not (< 0 size0@614@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (implies
  (< 0 size0@614@01)
  (Seq_equal sys__result@615@01 (as Seq_empty  Seq<Int>))))
(pop) ; 2
(push) ; 2
; [exec]
; inhale false
(pop) ; 2
(pop) ; 1
